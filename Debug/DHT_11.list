
DHT_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  08009828  08009828  00019828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9a8  0800a9a8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9a8  0800a9a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9b0  0800a9b0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a9b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          000006f4  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010e11  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025d5  00000000  00000000  00031074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d31  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022d00  00000000  00000000  00035441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014935  00000000  00000000  00058141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d02da  00000000  00000000  0006ca76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b90  00000000  00000000  0013cd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001428e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009810 	.word	0x08009810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009810 	.word	0x08009810

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000f9c:	23aa      	movs	r3, #170	; 0xaa
 8000f9e:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa0:	8afa      	ldrh	r2, [r7, #22]
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2316      	movs	r3, #22
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	463b      	mov	r3, r7
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	21ee      	movs	r1, #238	; 0xee
 8000fb4:	4836      	ldr	r0, [pc, #216]	; (8001090 <read_calliberation_data+0x10c>)
 8000fb6:	f002 fca5 	bl	8003904 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fba:	783b      	ldrb	r3, [r7, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <read_calliberation_data+0x110>)
 8000fca:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fcc:	78bb      	ldrb	r3, [r7, #2]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <read_calliberation_data+0x114>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b21a      	sxth	r2, r3
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <read_calliberation_data+0x118>)
 8000fee:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <read_calliberation_data+0x11c>)
 8001002:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001004:	7a3b      	ldrb	r3, [r7, #8]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	7a7b      	ldrb	r3, [r7, #9]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <read_calliberation_data+0x120>)
 8001016:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001018:	7abb      	ldrb	r3, [r7, #10]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <read_calliberation_data+0x124>)
 800102a:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800102c:	7b3b      	ldrb	r3, [r7, #12]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <read_calliberation_data+0x128>)
 800103c:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <read_calliberation_data+0x12c>)
 800104e:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001050:	7c3b      	ldrb	r3, [r7, #16]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	7c7b      	ldrb	r3, [r7, #17]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <read_calliberation_data+0x130>)
 8001060:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001062:	7cbb      	ldrb	r3, [r7, #18]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	7cfb      	ldrb	r3, [r7, #19]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <read_calliberation_data+0x134>)
 8001072:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7d7b      	ldrb	r3, [r7, #21]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <read_calliberation_data+0x138>)
 8001084:	801a      	strh	r2, [r3, #0]

}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000025c 	.word	0x2000025c
 8001094:	2000020c 	.word	0x2000020c
 8001098:	2000020e 	.word	0x2000020e
 800109c:	20000210 	.word	0x20000210
 80010a0:	20000212 	.word	0x20000212
 80010a4:	20000214 	.word	0x20000214
 80010a8:	20000216 	.word	0x20000216
 80010ac:	20000218 	.word	0x20000218
 80010b0:	2000021a 	.word	0x2000021a
 80010b4:	2000021c 	.word	0x2000021c
 80010b8:	2000021e 	.word	0x2000021e
 80010bc:	20000220 	.word	0x20000220

080010c0 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010c6:	232e      	movs	r3, #46	; 0x2e
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010ca:	2300      	movs	r3, #0
 80010cc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	22f4      	movs	r2, #244	; 0xf4
 80010e0:	21ee      	movs	r1, #238	; 0xee
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <Get_UTemp+0x60>)
 80010e4:	f002 fb14 	bl	8003710 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010e8:	2005      	movs	r0, #5
 80010ea:	f001 fdf7 	bl	8002cdc <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	22f6      	movs	r2, #246	; 0xf6
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Get_UTemp+0x60>)
 8001104:	f002 fbfe 	bl	8003904 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2000025c 	.word	0x2000025c

08001124 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001128:	f7ff ffca 	bl	80010c0 <Get_UTemp>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <BMP180_GetTemp+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BMP180_GetTemp+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <BMP180_GetTemp+0x10c>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9f0 	bl	8000524 <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <BMP180_GetTemp+0x110>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9e9 	bl	8000524 <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <BMP180_GetTemp+0x114>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa48 	bl	80005f8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fcf2 	bl	8000b58 <__aeabi_d2iz>
 8001174:	4603      	mov	r3, r0
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <BMP180_GetTemp+0x118>)
 8001178:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <BMP180_GetTemp+0x11c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_GetTemp+0x120>)
 800118c:	f7ff fa34 	bl	80005f8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4614      	mov	r4, r2
 8001196:	461d      	mov	r5, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <BMP180_GetTemp+0x124>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <BMP180_GetTemp+0x118>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9bc 	bl	8000524 <__aeabi_i2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fcca 	bl	8000b58 <__aeabi_d2iz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <BMP180_GetTemp+0x128>)
 80011c8:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <BMP180_GetTemp+0x118>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <BMP180_GetTemp+0x128>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011d6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <BMP180_GetTemp+0x130>)
 80011ea:	f7ff fb2f 	bl	800084c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fcaf 	bl	8000b58 <__aeabi_d2iz>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <BMP180_GetTemp+0x134>)
 80011fe:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BMP180_GetTemp+0x134>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BMP180_GetTemp+0x138>)
 8001210:	f7ff fb1c 	bl	800084c <__aeabi_ddiv>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	20000224 	.word	0x20000224
 8001230:	20000216 	.word	0x20000216
 8001234:	20000214 	.word	0x20000214
 8001238:	40e00000 	.word	0x40e00000
 800123c:	2000022c 	.word	0x2000022c
 8001240:	2000021e 	.word	0x2000021e
 8001244:	40a00000 	.word	0x40a00000
 8001248:	20000220 	.word	0x20000220
 800124c:	20000230 	.word	0x20000230
 8001250:	2000023c 	.word	0x2000023c
 8001254:	40300000 	.word	0x40300000
 8001258:	20000250 	.word	0x20000250
 800125c:	40240000 	.word	0x40240000

08001260 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3334      	adds	r3, #52	; 0x34
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <Get_UPress+0xb4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	81bb      	strh	r3, [r7, #12]
 800127c:	2300      	movs	r3, #0
 800127e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 030f 	add.w	r3, r7, #15
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	22f4      	movs	r2, #244	; 0xf4
 8001294:	21ee      	movs	r1, #238	; 0xee
 8001296:	4820      	ldr	r0, [pc, #128]	; (8001318 <Get_UPress+0xb8>)
 8001298:	f002 fa3a 	bl	8003710 <HAL_I2C_Mem_Write>
	switch (oss)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d81a      	bhi.n	80012d8 <Get_UPress+0x78>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <Get_UPress+0x48>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	080012c1 	.word	0x080012c1
 80012b0:	080012c9 	.word	0x080012c9
 80012b4:	080012d1 	.word	0x080012d1
	{
		case (0):
			HAL_Delay (5);
 80012b8:	2005      	movs	r0, #5
 80012ba:	f001 fd0f 	bl	8002cdc <HAL_Delay>
			break;
 80012be:	e00b      	b.n	80012d8 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 80012c0:	2008      	movs	r0, #8
 80012c2:	f001 fd0b 	bl	8002cdc <HAL_Delay>
			break;
 80012c6:	e007      	b.n	80012d8 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 80012c8:	200e      	movs	r0, #14
 80012ca:	f001 fd07 	bl	8002cdc <HAL_Delay>
			break;
 80012ce:	e003      	b.n	80012d8 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 80012d0:	201a      	movs	r0, #26
 80012d2:	f001 fd03 	bl	8002cdc <HAL_Delay>
			break;
 80012d6:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	2303      	movs	r3, #3
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2301      	movs	r3, #1
 80012ea:	22f6      	movs	r2, #246	; 0xf6
 80012ec:	21ee      	movs	r1, #238	; 0xee
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <Get_UPress+0xb8>)
 80012f0:	f002 fb08 	bl	8003904 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	041a      	lsls	r2, r3, #16
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4413      	add	r3, r2
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	441a      	add	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f1c3 0308 	rsb	r3, r3, #8
 8001308:	fa42 f303 	asr.w	r3, r2, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	08009828 	.word	0x08009828
 8001318:	2000025c 	.word	0x2000025c

0800131c <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff9b 	bl	8001260 <Get_UPress>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001330:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001332:	4ba8      	ldr	r3, [pc, #672]	; (80015d4 <BMP180_GetPress+0x2b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4aa8      	ldr	r2, [pc, #672]	; (80015d8 <BMP180_GetPress+0x2bc>)
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8f1 	bl	8000524 <__aeabi_i2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <BMP180_GetPress+0x2c0>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4ba2      	ldr	r3, [pc, #648]	; (80015e0 <BMP180_GetPress+0x2c4>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fbf3 	bl	8000b58 <__aeabi_d2iz>
 8001372:	4603      	mov	r3, r0
 8001374:	4a9b      	ldr	r2, [pc, #620]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001376:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001378:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <BMP180_GetPress+0x2cc>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8d0 	bl	8000524 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b98      	ldr	r3, [pc, #608]	; (80015ec <BMP180_GetPress+0x2d0>)
 800138a:	f7ff f935 	bl	80005f8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <BMP180_GetPress+0x2d4>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	461a      	mov	r2, r3
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7ff fa4b 	bl	800084c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fbcb 	bl	8000b58 <__aeabi_d2iz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a8b      	ldr	r2, [pc, #556]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013c6:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80013c8:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013e0:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013e2:	4b87      	ldr	r3, [pc, #540]	; (8001600 <BMP180_GetPress+0x2e4>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f89b 	bl	8000524 <__aeabi_i2d>
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a81      	ldr	r2, [pc, #516]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f890 	bl	8000524 <__aeabi_i2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <BMP180_GetPress+0x2e8>)
 800140a:	f7ff fa1f 	bl	800084c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff f8ef 	bl	80005f8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <BMP180_GetPress+0x2d0>)
 8001428:	f7ff fa10 	bl	800084c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb90 	bl	8000b58 <__aeabi_d2iz>
 8001438:	4603      	mov	r3, r0
 800143a:	4a6a      	ldr	r2, [pc, #424]	; (80015e4 <BMP180_GetPress+0x2c8>)
 800143c:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <BMP180_GetPress+0x2ec>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	461a      	mov	r2, r3
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <BMP180_GetPress+0x2e0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f868 	bl	8000524 <__aeabi_i2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <BMP180_GetPress+0x2d0>)
 800145a:	f7ff f9f7 	bl	800084c <__aeabi_ddiv>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fb77 	bl	8000b58 <__aeabi_d2iz>
 800146a:	4603      	mov	r3, r0
 800146c:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800146e:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001470:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a64      	ldr	r2, [pc, #400]	; (800160c <BMP180_GetPress+0x2f0>)
 800147c:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <BMP180_GetPress+0x2f4>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	4b61      	ldr	r3, [pc, #388]	; (800160c <BMP180_GetPress+0x2f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	3302      	adds	r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <BMP180_GetPress+0x17e>
 8001498:	3303      	adds	r3, #3
 800149a:	109b      	asrs	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <BMP180_GetPress+0x2f8>)
 80014a0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <BMP180_GetPress+0x2fc>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f836 	bl	8000524 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <BMP180_GetPress+0x300>)
 80014be:	f7ff f9c5 	bl	800084c <__aeabi_ddiv>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb45 	bl	8000b58 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80014d2:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <BMP180_GetPress+0x304>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f822 	bl	8000524 <__aeabi_i2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a44      	ldr	r2, [pc, #272]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f817 	bl	8000524 <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <BMP180_GetPress+0x2e8>)
 80014fc:	f7ff f9a6 	bl	800084c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff f876 	bl	80005f8 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <BMP180_GetPress+0x308>)
 800151a:	f7ff f997 	bl	800084c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fb17 	bl	8000b58 <__aeabi_d2iz>
 800152a:	4603      	mov	r3, r0
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800152e:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4413      	add	r3, r2
 800153a:	3302      	adds	r3, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <BMP180_GetPress+0x30c>)
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fb00 	bl	8000b58 <__aeabi_d2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <BMP180_GetPress+0x2f0>)
 800155c:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <BMP180_GetPress+0x310>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <BMP180_GetPress+0x2f0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffc7 	bl	8000504 <__aeabi_ui2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <BMP180_GetPress+0x2c4>)
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb0e 	bl	8000ba8 <__aeabi_d2uiz>
 800158c:	4603      	mov	r3, r0
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <BMP180_GetPress+0x314>)
 8001590:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <BMP180_GetPress+0x2f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	fa41 f202 	asr.w	r2, r1, r2
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <BMP180_GetPress+0x318>)
 80015ae:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <BMP180_GetPress+0x318>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db41      	blt.n	800163c <BMP180_GetPress+0x320>
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <BMP180_GetPress+0x318>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	005a      	lsls	r2, r3, #1
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <BMP180_GetPress+0x314>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <BMP180_GetPress+0x31c>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e040      	b.n	8001650 <BMP180_GetPress+0x334>
 80015ce:	bf00      	nop
 80015d0:	20000228 	.word	0x20000228
 80015d4:	20000224 	.word	0x20000224
 80015d8:	20000216 	.word	0x20000216
 80015dc:	20000214 	.word	0x20000214
 80015e0:	40e00000 	.word	0x40e00000
 80015e4:	2000022c 	.word	0x2000022c
 80015e8:	2000021e 	.word	0x2000021e
 80015ec:	40a00000 	.word	0x40a00000
 80015f0:	20000220 	.word	0x20000220
 80015f4:	20000230 	.word	0x20000230
 80015f8:	2000023c 	.word	0x2000023c
 80015fc:	20000244 	.word	0x20000244
 8001600:	2000021a 	.word	0x2000021a
 8001604:	40b00000 	.word	0x40b00000
 8001608:	2000020e 	.word	0x2000020e
 800160c:	20000234 	.word	0x20000234
 8001610:	2000020c 	.word	0x2000020c
 8001614:	20000238 	.word	0x20000238
 8001618:	20000210 	.word	0x20000210
 800161c:	40c00000 	.word	0x40c00000
 8001620:	20000218 	.word	0x20000218
 8001624:	40f00000 	.word	0x40f00000
 8001628:	40100000 	.word	0x40100000
 800162c:	20000212 	.word	0x20000212
 8001630:	20000240 	.word	0x20000240
 8001634:	20000248 	.word	0x20000248
 8001638:	2000024c 	.word	0x2000024c
	else Press = (B7/B4)*2;
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <BMP180_GetPress+0x43c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <BMP180_GetPress+0x440>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4b44      	ldr	r3, [pc, #272]	; (8001760 <BMP180_GetPress+0x444>)
 800164e:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <BMP180_GetPress+0x444>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <BMP180_GetPress+0x448>)
 8001660:	f7ff f8f4 	bl	800084c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <BMP180_GetPress+0x444>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <BMP180_GetPress+0x448>)
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ffb6 	bl	80005f8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa60 	bl	8000b58 <__aeabi_d2iz>
 8001698:	4603      	mov	r3, r0
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <BMP180_GetPress+0x44c>)
 800169c:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <BMP180_GetPress+0x44c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f640 32de 	movw	r2, #3038	; 0xbde
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <BMP180_GetPress+0x450>)
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <BMP180_GetPress+0x44c>)
 80016ca:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <BMP180_GetPress+0x444>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <BMP180_GetPress+0x454>)
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff24 	bl	8000524 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <BMP180_GetPress+0x450>)
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa33 	bl	8000b58 <__aeabi_d2iz>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <BMP180_GetPress+0x458>)
 80016f6:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <BMP180_GetPress+0x444>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_i2d>
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <BMP180_GetPress+0x44c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <BMP180_GetPress+0x458>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <BMP180_GetPress+0x45c>)
 8001720:	f7ff f894 	bl	800084c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fdae 	bl	800028c <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa0e 	bl	8000b58 <__aeabi_d2iz>
 800173c:	4603      	mov	r3, r0
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <BMP180_GetPress+0x444>)
 8001740:	6013      	str	r3, [r2, #0]

	return Press;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <BMP180_GetPress+0x444>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	20000248 	.word	0x20000248
 800175c:	20000240 	.word	0x20000240
 8001760:	2000024c 	.word	0x2000024c
 8001764:	40700000 	.word	0x40700000
 8001768:	2000022c 	.word	0x2000022c
 800176c:	40f00000 	.word	0x40f00000
 8001770:	ffffe343 	.word	0xffffe343
 8001774:	20000230 	.word	0x20000230
 8001778:	40300000 	.word	0x40300000
 800177c:	00000000 	.word	0x00000000

08001780 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fdc7 	bl	800131c <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <BMP180_GetAlt+0x88>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800180c <BMP180_GetAlt+0x8c>
 800179e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017a2:	ee16 0a90 	vmov	r0, s13
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80017f8 <BMP180_GetAlt+0x78>
 80017b2:	ec43 2b10 	vmov	d0, r2, r3
 80017b6:	f007 f8f3 	bl	80089a0 <pow>
 80017ba:	ec53 2b10 	vmov	r2, r3, d0
 80017be:	f04f 0000 	mov.w	r0, #0
 80017c2:	4913      	ldr	r1, [pc, #76]	; (8001810 <BMP180_GetAlt+0x90>)
 80017c4:	f7fe fd60 	bl	8000288 <__aeabi_dsub>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001800 <BMP180_GetAlt+0x80>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe ff0f 	bl	80005f8 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	ee07 3a90 	vmov	s15, r3
}
 80017ec:	eeb0 0a67 	vmov.f32	s0, s15
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	ccd745e4 	.word	0xccd745e4
 80017fc:	3fc85b95 	.word	0x3fc85b95
 8001800:	00000000 	.word	0x00000000
 8001804:	40e5a540 	.word	0x40e5a540
 8001808:	2000024c 	.word	0x2000024c
 800180c:	47c5e680 	.word	0x47c5e680
 8001810:	3ff00000 	.word	0x3ff00000

08001814 <BMP180_Start>:

void BMP180_Start (void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001818:	f7ff fbb4 	bl	8000f84 <read_calliberation_data>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <DWT_Delay_Init+0x58>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <DWT_Delay_Init+0x58>)
 800182a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <DWT_Delay_Init+0x58>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a10      	ldr	r2, [pc, #64]	; (8001878 <DWT_Delay_Init+0x58>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <DWT_Delay_Init+0x5c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0e      	ldr	r2, [pc, #56]	; (800187c <DWT_Delay_Init+0x5c>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <DWT_Delay_Init+0x5c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <DWT_Delay_Init+0x5c>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <DWT_Delay_Init+0x5c>)
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800185a:	bf00      	nop
     __ASM volatile ("NOP");
 800185c:	bf00      	nop
  __ASM volatile ("NOP");
 800185e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <DWT_Delay_Init+0x5c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001868:	2300      	movs	r3, #0
 800186a:	e000      	b.n	800186e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 800186c:	2301      	movs	r3, #1
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000edf0 	.word	0xe000edf0
 800187c:	e0001000 	.word	0xe0001000

08001880 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <delay+0x40>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800188e:	f003 fc33 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8001892:	4603      	mov	r3, r0
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <delay+0x44>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	0c9b      	lsrs	r3, r3, #18
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80018a4:	bf00      	nop
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <delay+0x40>)
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3f8      	bcc.n	80018a6 <delay+0x26>
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	e0001000 	.word	0xe0001000
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fafa 	bl	8002ef0 <HAL_GPIO_Init>
}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 fadc 	bl	8002ef0 <HAL_GPIO_Init>
}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <DHT_Start>:


void DHT_Start (void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001944:	f7ff ff6c 	bl	8001820 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001948:	2102      	movs	r1, #2
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <DHT_Start+0x40>)
 800194c:	f7ff ffbc 	bl	80018c8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001950:	2200      	movs	r2, #0
 8001952:	2102      	movs	r1, #2
 8001954:	480a      	ldr	r0, [pc, #40]	; (8001980 <DHT_Start+0x40>)
 8001956:	f001 fc7f 	bl	8003258 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 800195a:	f244 6050 	movw	r0, #18000	; 0x4650
 800195e:	f7ff ff8f 	bl	8001880 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001962:	2201      	movs	r2, #1
 8001964:	2102      	movs	r1, #2
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <DHT_Start+0x40>)
 8001968:	f001 fc76 	bl	8003258 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 800196c:	2014      	movs	r0, #20
 800196e:	f7ff ff87 	bl	8001880 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001972:	2102      	movs	r1, #2
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DHT_Start+0x40>)
 8001976:	f7ff ffc5 	bl	8001904 <Set_Pin_Input>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020000 	.word	0x40020000

08001984 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	71fb      	strb	r3, [r7, #7]
	delay (40);
 800198e:	2028      	movs	r0, #40	; 0x28
 8001990:	f7ff ff76 	bl	8001880 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001994:	2102      	movs	r1, #2
 8001996:	4811      	ldr	r0, [pc, #68]	; (80019dc <DHT_Check_Response+0x58>)
 8001998:	f001 fc46 	bl	8003228 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10e      	bne.n	80019c0 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80019a2:	2050      	movs	r0, #80	; 0x50
 80019a4:	f7ff ff6c 	bl	8001880 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80019a8:	2102      	movs	r1, #2
 80019aa:	480c      	ldr	r0, [pc, #48]	; (80019dc <DHT_Check_Response+0x58>)
 80019ac:	f001 fc3c 	bl	8003228 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <DHT_Check_Response+0x38>
 80019b6:	2301      	movs	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	e001      	b.n	80019c0 <DHT_Check_Response+0x3c>
		else Response = -1;
 80019bc:	23ff      	movs	r3, #255	; 0xff
 80019be:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80019c0:	bf00      	nop
 80019c2:	2102      	movs	r1, #2
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <DHT_Check_Response+0x58>)
 80019c6:	f001 fc2f 	bl	8003228 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f8      	bne.n	80019c2 <DHT_Check_Response+0x3e>

	return Response;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40020000 	.word	0x40020000

080019e0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	71bb      	strb	r3, [r7, #6]
 80019ea:	e037      	b.n	8001a5c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80019ec:	bf00      	nop
 80019ee:	2102      	movs	r1, #2
 80019f0:	481e      	ldr	r0, [pc, #120]	; (8001a6c <DHT_Read+0x8c>)
 80019f2:	f001 fc19 	bl	8003228 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f8      	beq.n	80019ee <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80019fc:	2028      	movs	r0, #40	; 0x28
 80019fe:	f7ff ff3f 	bl	8001880 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001a02:	2102      	movs	r1, #2
 8001a04:	4819      	ldr	r0, [pc, #100]	; (8001a6c <DHT_Read+0x8c>)
 8001a06:	f001 fc0f 	bl	8003228 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10e      	bne.n	8001a2e <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2201      	movs	r2, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	4013      	ands	r3, r2
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	e00b      	b.n	8001a46 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	f1c3 0307 	rsb	r3, r3, #7
 8001a34:	2201      	movs	r2, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001a46:	bf00      	nop
 8001a48:	2102      	movs	r1, #2
 8001a4a:	4808      	ldr	r0, [pc, #32]	; (8001a6c <DHT_Read+0x8c>)
 8001a4c:	f001 fbec 	bl	8003228 <HAL_GPIO_ReadPin>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f8      	bne.n	8001a48 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001a56:	79bb      	ldrb	r3, [r7, #6]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	2b07      	cmp	r3, #7
 8001a60:	d9c4      	bls.n	80019ec <DHT_Read+0xc>
	}
	return i;
 8001a62:	79fb      	ldrb	r3, [r7, #7]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020000 	.word	0x40020000

08001a70 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001a78:	f7ff ff62 	bl	8001940 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001a7c:	f7ff ff82 	bl	8001984 <DHT_Check_Response>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <DHT_GetData+0xa4>)
 8001a86:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001a88:	f7ff ffaa 	bl	80019e0 <DHT_Read>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <DHT_GetData+0xa8>)
 8001a92:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001a94:	f7ff ffa4 	bl	80019e0 <DHT_Read>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <DHT_GetData+0xac>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001aa0:	f7ff ff9e 	bl	80019e0 <DHT_Read>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <DHT_GetData+0xb0>)
 8001aaa:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001aac:	f7ff ff98 	bl	80019e0 <DHT_Read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <DHT_GetData+0xb4>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001ab8:	f7ff ff92 	bl	80019e0 <DHT_Read>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <DHT_GetData+0xb8>)
 8001ac2:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <DHT_GetData+0xb8>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <DHT_GetData+0xa8>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <DHT_GetData+0xac>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <DHT_GetData+0xb0>)
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <DHT_GetData+0xb4>)
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4299      	cmp	r1, r3
 8001ae4:	d111      	bne.n	8001b0a <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <DHT_GetData+0xb0>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	ee07 3a90 	vmov	s15, r3
 8001aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <DHT_GetData+0xa8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000025a 	.word	0x2000025a
 8001b18:	20000254 	.word	0x20000254
 8001b1c:	20000255 	.word	0x20000255
 8001b20:	20000256 	.word	0x20000256
 8001b24:	20000257 	.word	0x20000257
 8001b28:	20000258 	.word	0x20000258

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f001 f862 	bl	8002bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b34:	f000 f954 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b38:	f000 fa64 	bl	8002004 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b3c:	f000 f9ba 	bl	8001eb4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b40:	f000 f9e6 	bl	8001f10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001b44:	f000 fa34 	bl	8001fb0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

   DHT_GetData(&DHT11_Data);
 8001b48:	488d      	ldr	r0, [pc, #564]	; (8001d80 <main+0x254>)
 8001b4a:	f7ff ff91 	bl	8001a70 <DHT_GetData>
   BMP180_Start();
 8001b4e:	f7ff fe61 	bl	8001814 <BMP180_Start>
   SSD1306_Init();
 8001b52:	f000 faaf 	bl	80020b4 <SSD1306_Init>

    SSD1306_GotoXY (35,0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2023      	movs	r0, #35	; 0x23
 8001b5a:	f000 fc15 	bl	8002388 <SSD1306_GotoXY>
    SSD1306_Puts ("WEATHER", &Font_11x18, 1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4988      	ldr	r1, [pc, #544]	; (8001d84 <main+0x258>)
 8001b62:	4889      	ldr	r0, [pc, #548]	; (8001d88 <main+0x25c>)
 8001b64:	f000 fca6 	bl	80024b4 <SSD1306_Puts>
    SSD1306_GotoXY (10,20);
 8001b68:	2114      	movs	r1, #20
 8001b6a:	200a      	movs	r0, #10
 8001b6c:	f000 fc0c 	bl	8002388 <SSD1306_GotoXY>
    SSD1306_Puts ("STATION", &Font_11x18, 1);
 8001b70:	2201      	movs	r2, #1
 8001b72:	4984      	ldr	r1, [pc, #528]	; (8001d84 <main+0x258>)
 8001b74:	4885      	ldr	r0, [pc, #532]	; (8001d8c <main+0x260>)
 8001b76:	f000 fc9d 	bl	80024b4 <SSD1306_Puts>
    SSD1306_GotoXY (30,40);
 8001b7a:	2128      	movs	r1, #40	; 0x28
 8001b7c:	201e      	movs	r0, #30
 8001b7e:	f000 fc03 	bl	8002388 <SSD1306_GotoXY>
    SSD1306_Puts ("", &Font_11x18, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	497f      	ldr	r1, [pc, #508]	; (8001d84 <main+0x258>)
 8001b86:	4882      	ldr	r0, [pc, #520]	; (8001d90 <main+0x264>)
 8001b88:	f000 fc94 	bl	80024b4 <SSD1306_Puts>
    SSD1306_GotoXY (20,40);
 8001b8c:	2128      	movs	r1, #40	; 0x28
 8001b8e:	2014      	movs	r0, #20
 8001b90:	f000 fbfa 	bl	8002388 <SSD1306_GotoXY>
    SSD1306_UpdateScreen(); //display
 8001b94:	f000 fb52 	bl	800223c <SSD1306_UpdateScreen>
    HAL_Delay(2000);
 8001b98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b9c:	f001 f89e 	bl	8002cdc <HAL_Delay>
    SSD1306_Clear();
 8001ba0:	f000 fd81 	bl	80026a6 <SSD1306_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  DHT_GetData(&DHT11_Data);
 8001ba4:	4876      	ldr	r0, [pc, #472]	; (8001d80 <main+0x254>)
 8001ba6:	f7ff ff63 	bl	8001a70 <DHT_GetData>
  	  //Temperature = DHT11_Data.Temperature;
	  Humidity = DHT11_Data.Humidity;
 8001baa:	4b75      	ldr	r3, [pc, #468]	; (8001d80 <main+0x254>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a79      	ldr	r2, [pc, #484]	; (8001d94 <main+0x268>)
 8001bb0:	6013      	str	r3, [r2, #0]
	  Temperature = BMP180_GetTemp();
 8001bb2:	f7ff fab7 	bl	8001124 <BMP180_GetTemp>
 8001bb6:	eef0 7a40 	vmov.f32	s15, s0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <main+0x26c>)
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
	  Pressure =  BMP180_GetPress (0)/100;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fbab 	bl	800131c <BMP180_GetPress>
 8001bc6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bca:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001d9c <main+0x270>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <main+0x274>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	  Altitude = BMP180_GetAlt(0);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff fdd1 	bl	8001780 <BMP180_GetAlt>
 8001bde:	eef0 7a40 	vmov.f32	s15, s0
 8001be2:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <main+0x278>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]
	  USART1_SendString(getCmd);

*/
	  /***********To display on OLED**************/

	  	  SSD1306_GotoXY (35,0);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2023      	movs	r0, #35	; 0x23
 8001bec:	f000 fbcc 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("BMP180", &Font_11x18, 1);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4964      	ldr	r1, [pc, #400]	; (8001d84 <main+0x258>)
 8001bf4:	486c      	ldr	r0, [pc, #432]	; (8001da8 <main+0x27c>)
 8001bf6:	f000 fc5d 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (0,0);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f000 fbc3 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("Temperature", &Font_11x18, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	495f      	ldr	r1, [pc, #380]	; (8001d84 <main+0x258>)
 8001c06:	4869      	ldr	r0, [pc, #420]	; (8001dac <main+0x280>)
 8001c08:	f000 fc54 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (20,40);
 8001c0c:	2128      	movs	r1, #40	; 0x28
 8001c0e:	2014      	movs	r0, #20
 8001c10:	f000 fbba 	bl	8002388 <SSD1306_GotoXY>
	  	  sprintf(Temperature1, "%.2f", Temperature);
 8001c14:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <main+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc95 	bl	8000548 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4963      	ldr	r1, [pc, #396]	; (8001db0 <main+0x284>)
 8001c24:	4863      	ldr	r0, [pc, #396]	; (8001db4 <main+0x288>)
 8001c26:	f004 fd5f 	bl	80066e8 <siprintf>
	  	  SSD1306_Puts(Temperature1, &Font_11x18, 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4955      	ldr	r1, [pc, #340]	; (8001d84 <main+0x258>)
 8001c2e:	4861      	ldr	r0, [pc, #388]	; (8001db4 <main+0x288>)
 8001c30:	f000 fc40 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_DrawCircle(80, 40, 2, 1);  //To print degree only
 8001c34:	2301      	movs	r3, #1
 8001c36:	2202      	movs	r2, #2
 8001c38:	2128      	movs	r1, #40	; 0x28
 8001c3a:	2050      	movs	r0, #80	; 0x50
 8001c3c:	f000 fc5f 	bl	80024fe <SSD1306_DrawCircle>
	  	  SSD1306_GotoXY (85,40);  //To print celcius
 8001c40:	2128      	movs	r1, #40	; 0x28
 8001c42:	2055      	movs	r0, #85	; 0x55
 8001c44:	f000 fba0 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("C", &Font_11x18, 1);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	494e      	ldr	r1, [pc, #312]	; (8001d84 <main+0x258>)
 8001c4c:	485a      	ldr	r0, [pc, #360]	; (8001db8 <main+0x28c>)
 8001c4e:	f000 fc31 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(); //display
 8001c52:	f000 faf3 	bl	800223c <SSD1306_UpdateScreen>
	  	  HAL_Delay(2000);
 8001c56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c5a:	f001 f83f 	bl	8002cdc <HAL_Delay>
	  	  SSD1306_Clear();
 8001c5e:	f000 fd22 	bl	80026a6 <SSD1306_Clear>


	  	  SSD1306_GotoXY (20,0);
 8001c62:	2100      	movs	r1, #0
 8001c64:	2014      	movs	r0, #20
 8001c66:	f000 fb8f 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("Humidity", &Font_11x18, 1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4945      	ldr	r1, [pc, #276]	; (8001d84 <main+0x258>)
 8001c6e:	4853      	ldr	r0, [pc, #332]	; (8001dbc <main+0x290>)
 8001c70:	f000 fc20 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (10,40);
 8001c74:	2128      	movs	r1, #40	; 0x28
 8001c76:	200a      	movs	r0, #10
 8001c78:	f000 fb86 	bl	8002388 <SSD1306_GotoXY>
	  	  sprintf(Humidity1, "%.2f", Humidity);
 8001c7c:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <main+0x268>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc61 	bl	8000548 <__aeabi_f2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4949      	ldr	r1, [pc, #292]	; (8001db0 <main+0x284>)
 8001c8c:	484c      	ldr	r0, [pc, #304]	; (8001dc0 <main+0x294>)
 8001c8e:	f004 fd2b 	bl	80066e8 <siprintf>
	  	  SSD1306_Puts(Humidity1, &Font_11x18, 1);
 8001c92:	2201      	movs	r2, #1
 8001c94:	493b      	ldr	r1, [pc, #236]	; (8001d84 <main+0x258>)
 8001c96:	484a      	ldr	r0, [pc, #296]	; (8001dc0 <main+0x294>)
 8001c98:	f000 fc0c 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (100,40);
 8001c9c:	2128      	movs	r1, #40	; 0x28
 8001c9e:	2064      	movs	r0, #100	; 0x64
 8001ca0:	f000 fb72 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("%", &Font_11x18, 1);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4937      	ldr	r1, [pc, #220]	; (8001d84 <main+0x258>)
 8001ca8:	4846      	ldr	r0, [pc, #280]	; (8001dc4 <main+0x298>)
 8001caa:	f000 fc03 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(); //display
 8001cae:	f000 fac5 	bl	800223c <SSD1306_UpdateScreen>
	  	  HAL_Delay(2000);
 8001cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cb6:	f001 f811 	bl	8002cdc <HAL_Delay>
	  	  SSD1306_Clear();
 8001cba:	f000 fcf4 	bl	80026a6 <SSD1306_Clear>

	  	  SSD1306_GotoXY (20,0);
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2014      	movs	r0, #20
 8001cc2:	f000 fb61 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("Pressure", &Font_11x18, 1);
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	492e      	ldr	r1, [pc, #184]	; (8001d84 <main+0x258>)
 8001cca:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <main+0x29c>)
 8001ccc:	f000 fbf2 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (10,40);
 8001cd0:	2128      	movs	r1, #40	; 0x28
 8001cd2:	200a      	movs	r0, #10
 8001cd4:	f000 fb58 	bl	8002388 <SSD1306_GotoXY>
	  	  sprintf(Pressure1, "%.2f", Pressure);
 8001cd8:	4b31      	ldr	r3, [pc, #196]	; (8001da0 <main+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4932      	ldr	r1, [pc, #200]	; (8001db0 <main+0x284>)
 8001ce8:	4838      	ldr	r0, [pc, #224]	; (8001dcc <main+0x2a0>)
 8001cea:	f004 fcfd 	bl	80066e8 <siprintf>
	  	  SSD1306_Puts(Pressure1, &Font_11x18, 1);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4924      	ldr	r1, [pc, #144]	; (8001d84 <main+0x258>)
 8001cf2:	4836      	ldr	r0, [pc, #216]	; (8001dcc <main+0x2a0>)
 8001cf4:	f000 fbde 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (100,40);
 8001cf8:	2128      	movs	r1, #40	; 0x28
 8001cfa:	2064      	movs	r0, #100	; 0x64
 8001cfc:	f000 fb44 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("pa", &Font_11x18, 1);
 8001d00:	2201      	movs	r2, #1
 8001d02:	4920      	ldr	r1, [pc, #128]	; (8001d84 <main+0x258>)
 8001d04:	4832      	ldr	r0, [pc, #200]	; (8001dd0 <main+0x2a4>)
 8001d06:	f000 fbd5 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(); //display
 8001d0a:	f000 fa97 	bl	800223c <SSD1306_UpdateScreen>
	  	  HAL_Delay(2000);
 8001d0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d12:	f000 ffe3 	bl	8002cdc <HAL_Delay>
	  	  SSD1306_Clear();
 8001d16:	f000 fcc6 	bl	80026a6 <SSD1306_Clear>

	  	  SSD1306_GotoXY (20,0);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2014      	movs	r0, #20
 8001d1e:	f000 fb33 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("Altitude", &Font_11x18, 1);
 8001d22:	2201      	movs	r2, #1
 8001d24:	4917      	ldr	r1, [pc, #92]	; (8001d84 <main+0x258>)
 8001d26:	482b      	ldr	r0, [pc, #172]	; (8001dd4 <main+0x2a8>)
 8001d28:	f000 fbc4 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (15,40);
 8001d2c:	2128      	movs	r1, #40	; 0x28
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 fb2a 	bl	8002388 <SSD1306_GotoXY>
	  	  sprintf(Altitude1, "%.2f", Altitude);
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <main+0x278>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	491b      	ldr	r1, [pc, #108]	; (8001db0 <main+0x284>)
 8001d44:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <main+0x2ac>)
 8001d46:	f004 fccf 	bl	80066e8 <siprintf>
	  	  SSD1306_Puts(Altitude1, &Font_11x18, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	490d      	ldr	r1, [pc, #52]	; (8001d84 <main+0x258>)
 8001d4e:	4822      	ldr	r0, [pc, #136]	; (8001dd8 <main+0x2ac>)
 8001d50:	f000 fbb0 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_GotoXY (90,40);
 8001d54:	2128      	movs	r1, #40	; 0x28
 8001d56:	205a      	movs	r0, #90	; 0x5a
 8001d58:	f000 fb16 	bl	8002388 <SSD1306_GotoXY>
	  	  SSD1306_Puts ("m", &Font_11x18, 1);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	4909      	ldr	r1, [pc, #36]	; (8001d84 <main+0x258>)
 8001d60:	481e      	ldr	r0, [pc, #120]	; (8001ddc <main+0x2b0>)
 8001d62:	f000 fba7 	bl	80024b4 <SSD1306_Puts>
	  	  SSD1306_UpdateScreen(); //display
 8001d66:	f000 fa69 	bl	800223c <SSD1306_UpdateScreen>
	  	  HAL_Delay(2000);
 8001d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d6e:	f000 ffb5 	bl	8002cdc <HAL_Delay>
	  	  SSD1306_Clear();
 8001d72:	f000 fc98 	bl	80026a6 <SSD1306_Clear>

	  HAL_Delay(2000);
 8001d76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d7a:	f000 ffaf 	bl	8002cdc <HAL_Delay>
	  DHT_GetData(&DHT11_Data);
 8001d7e:	e711      	b.n	8001ba4 <main+0x78>
 8001d80:	20000340 	.word	0x20000340
 8001d84:	20000000 	.word	0x20000000
 8001d88:	0800982c 	.word	0x0800982c
 8001d8c:	08009834 	.word	0x08009834
 8001d90:	0800983c 	.word	0x0800983c
 8001d94:	20000354 	.word	0x20000354
 8001d98:	20000348 	.word	0x20000348
 8001d9c:	42c80000 	.word	0x42c80000
 8001da0:	2000034c 	.word	0x2000034c
 8001da4:	20000350 	.word	0x20000350
 8001da8:	08009840 	.word	0x08009840
 8001dac:	08009848 	.word	0x08009848
 8001db0:	08009854 	.word	0x08009854
 8001db4:	20000358 	.word	0x20000358
 8001db8:	0800985c 	.word	0x0800985c
 8001dbc:	08009860 	.word	0x08009860
 8001dc0:	2000037c 	.word	0x2000037c
 8001dc4:	0800986c 	.word	0x0800986c
 8001dc8:	08009870 	.word	0x08009870
 8001dcc:	20000364 	.word	0x20000364
 8001dd0:	0800987c 	.word	0x0800987c
 8001dd4:	08009880 	.word	0x08009880
 8001dd8:	20000370 	.word	0x20000370
 8001ddc:	0800988c 	.word	0x0800988c

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	; 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fcdd 	bl	80067ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <SystemClock_Config+0xcc>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a27      	ldr	r2, [pc, #156]	; (8001eac <SystemClock_Config+0xcc>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <SystemClock_Config+0xcc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <SystemClock_Config+0xd0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e50:	2304      	movs	r3, #4
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001e54:	2348      	movs	r3, #72	; 0x48
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fce3 	bl	8004830 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e70:	f000 f918 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff44 	bl	8004d20 <HAL_RCC_ClockConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e9e:	f000 f901 	bl	80020a4 <Error_Handler>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3750      	adds	r7, #80	; 0x50
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <MX_I2C1_Init+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ec0:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_I2C1_Init+0x58>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <MX_I2C1_Init+0x50>)
 8001ef2:	f001 f9cb 	bl	800328c <HAL_I2C_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001efc:	f000 f8d2 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000025c 	.word	0x2000025c
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	00061a80 	.word	0x00061a80

08001f10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <MX_TIM1_Init+0x9c>)
 8001f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f34:	2231      	movs	r2, #49	; 0x31
 8001f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f5a:	f003 f901 	bl	8005160 <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f64:	f000 f89e 	bl	80020a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f76:	f003 f942 	bl	80051fe <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f80:	f000 f890 	bl	80020a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM1_Init+0x98>)
 8001f92:	f003 fb41 	bl	8005618 <HAL_TIMEx_MasterConfigSynchronization>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f9c:	f000 f882 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200002b0 	.word	0x200002b0
 8001fac:	40010000 	.word	0x40010000

08001fb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <MX_USART1_UART_Init+0x50>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_USART1_UART_Init+0x4c>)
 8001fe8:	f003 fb92 	bl	8005710 <HAL_UART_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff2:	f000 f857 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200002f8 	.word	0x200002f8
 8002000:	40011000 	.word	0x40011000

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_GPIO_Init+0x98>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <MX_GPIO_Init+0x98>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_GPIO_Init+0x98>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <MX_GPIO_Init+0x98>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <MX_GPIO_Init+0x98>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <MX_GPIO_Init+0x98>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_GPIO_Init+0x98>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a10      	ldr	r2, [pc, #64]	; (800209c <MX_GPIO_Init+0x98>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_GPIO_Init+0x98>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2102      	movs	r1, #2
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <MX_GPIO_Init+0x9c>)
 8002074:	f001 f8f0 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002078:	2302      	movs	r3, #2
 800207a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207c:	2301      	movs	r3, #1
 800207e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	4804      	ldr	r0, [pc, #16]	; (80020a0 <MX_GPIO_Init+0x9c>)
 8002090:	f000 ff2e 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80020ba:	f000 fafd 	bl	80026b8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80020be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80020c2:	2201      	movs	r2, #1
 80020c4:	2178      	movs	r1, #120	; 0x78
 80020c6:	485b      	ldr	r0, [pc, #364]	; (8002234 <SSD1306_Init+0x180>)
 80020c8:	f001 fe4e 	bl	8003d68 <HAL_I2C_IsDeviceReady>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e0a9      	b.n	800222a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80020d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80020da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020dc:	e002      	b.n	80020e4 <SSD1306_Init+0x30>
		p--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f9      	bne.n	80020de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80020ea:	22ae      	movs	r2, #174	; 0xae
 80020ec:	2100      	movs	r1, #0
 80020ee:	2078      	movs	r0, #120	; 0x78
 80020f0:	f000 fb5e 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80020f4:	2220      	movs	r2, #32
 80020f6:	2100      	movs	r1, #0
 80020f8:	2078      	movs	r0, #120	; 0x78
 80020fa:	f000 fb59 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020fe:	2210      	movs	r2, #16
 8002100:	2100      	movs	r1, #0
 8002102:	2078      	movs	r0, #120	; 0x78
 8002104:	f000 fb54 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002108:	22b0      	movs	r2, #176	; 0xb0
 800210a:	2100      	movs	r1, #0
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 fb4f 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002112:	22c8      	movs	r2, #200	; 0xc8
 8002114:	2100      	movs	r1, #0
 8002116:	2078      	movs	r0, #120	; 0x78
 8002118:	f000 fb4a 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2078      	movs	r0, #120	; 0x78
 8002122:	f000 fb45 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002126:	2210      	movs	r2, #16
 8002128:	2100      	movs	r1, #0
 800212a:	2078      	movs	r0, #120	; 0x78
 800212c:	f000 fb40 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002130:	2240      	movs	r2, #64	; 0x40
 8002132:	2100      	movs	r1, #0
 8002134:	2078      	movs	r0, #120	; 0x78
 8002136:	f000 fb3b 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800213a:	2281      	movs	r2, #129	; 0x81
 800213c:	2100      	movs	r1, #0
 800213e:	2078      	movs	r0, #120	; 0x78
 8002140:	f000 fb36 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002144:	22ff      	movs	r2, #255	; 0xff
 8002146:	2100      	movs	r1, #0
 8002148:	2078      	movs	r0, #120	; 0x78
 800214a:	f000 fb31 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800214e:	22a1      	movs	r2, #161	; 0xa1
 8002150:	2100      	movs	r1, #0
 8002152:	2078      	movs	r0, #120	; 0x78
 8002154:	f000 fb2c 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002158:	22a6      	movs	r2, #166	; 0xa6
 800215a:	2100      	movs	r1, #0
 800215c:	2078      	movs	r0, #120	; 0x78
 800215e:	f000 fb27 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002162:	22a8      	movs	r2, #168	; 0xa8
 8002164:	2100      	movs	r1, #0
 8002166:	2078      	movs	r0, #120	; 0x78
 8002168:	f000 fb22 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	2100      	movs	r1, #0
 8002170:	2078      	movs	r0, #120	; 0x78
 8002172:	f000 fb1d 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002176:	22a4      	movs	r2, #164	; 0xa4
 8002178:	2100      	movs	r1, #0
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f000 fb18 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002180:	22d3      	movs	r2, #211	; 0xd3
 8002182:	2100      	movs	r1, #0
 8002184:	2078      	movs	r0, #120	; 0x78
 8002186:	f000 fb13 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f000 fb0e 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002194:	22d5      	movs	r2, #213	; 0xd5
 8002196:	2100      	movs	r1, #0
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f000 fb09 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800219e:	22f0      	movs	r2, #240	; 0xf0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2078      	movs	r0, #120	; 0x78
 80021a4:	f000 fb04 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80021a8:	22d9      	movs	r2, #217	; 0xd9
 80021aa:	2100      	movs	r1, #0
 80021ac:	2078      	movs	r0, #120	; 0x78
 80021ae:	f000 faff 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80021b2:	2222      	movs	r2, #34	; 0x22
 80021b4:	2100      	movs	r1, #0
 80021b6:	2078      	movs	r0, #120	; 0x78
 80021b8:	f000 fafa 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80021bc:	22da      	movs	r2, #218	; 0xda
 80021be:	2100      	movs	r1, #0
 80021c0:	2078      	movs	r0, #120	; 0x78
 80021c2:	f000 faf5 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80021c6:	2212      	movs	r2, #18
 80021c8:	2100      	movs	r1, #0
 80021ca:	2078      	movs	r0, #120	; 0x78
 80021cc:	f000 faf0 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80021d0:	22db      	movs	r2, #219	; 0xdb
 80021d2:	2100      	movs	r1, #0
 80021d4:	2078      	movs	r0, #120	; 0x78
 80021d6:	f000 faeb 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80021da:	2220      	movs	r2, #32
 80021dc:	2100      	movs	r1, #0
 80021de:	2078      	movs	r0, #120	; 0x78
 80021e0:	f000 fae6 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80021e4:	228d      	movs	r2, #141	; 0x8d
 80021e6:	2100      	movs	r1, #0
 80021e8:	2078      	movs	r0, #120	; 0x78
 80021ea:	f000 fae1 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80021ee:	2214      	movs	r2, #20
 80021f0:	2100      	movs	r1, #0
 80021f2:	2078      	movs	r0, #120	; 0x78
 80021f4:	f000 fadc 	bl	80027b0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80021f8:	22af      	movs	r2, #175	; 0xaf
 80021fa:	2100      	movs	r1, #0
 80021fc:	2078      	movs	r0, #120	; 0x78
 80021fe:	f000 fad7 	bl	80027b0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002202:	222e      	movs	r2, #46	; 0x2e
 8002204:	2100      	movs	r1, #0
 8002206:	2078      	movs	r0, #120	; 0x78
 8002208:	f000 fad2 	bl	80027b0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f843 	bl	8002298 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002212:	f000 f813 	bl	800223c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <SSD1306_Init+0x184>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SSD1306_Init+0x184>)
 800221e:	2200      	movs	r2, #0
 8002220:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <SSD1306_Init+0x184>)
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000025c 	.word	0x2000025c
 8002238:	20000788 	.word	0x20000788

0800223c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002242:	2300      	movs	r3, #0
 8002244:	71fb      	strb	r3, [r7, #7]
 8002246:	e01d      	b.n	8002284 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	3b50      	subs	r3, #80	; 0x50
 800224c:	b2db      	uxtb	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	2100      	movs	r1, #0
 8002252:	2078      	movs	r0, #120	; 0x78
 8002254:	f000 faac 	bl	80027b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	2078      	movs	r0, #120	; 0x78
 800225e:	f000 faa7 	bl	80027b0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002262:	2210      	movs	r2, #16
 8002264:	2100      	movs	r1, #0
 8002266:	2078      	movs	r0, #120	; 0x78
 8002268:	f000 faa2 	bl	80027b0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <SSD1306_UpdateScreen+0x58>)
 8002272:	441a      	add	r2, r3
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	2140      	movs	r1, #64	; 0x40
 8002278:	2078      	movs	r0, #120	; 0x78
 800227a:	f000 fa33 	bl	80026e4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	3301      	adds	r3, #1
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d9de      	bls.n	8002248 <SSD1306_UpdateScreen+0xc>
	}
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000388 	.word	0x20000388

08002298 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <SSD1306_Fill+0x14>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e000      	b.n	80022ae <SSD1306_Fill+0x16>
 80022ac:	23ff      	movs	r3, #255	; 0xff
 80022ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b2:	4619      	mov	r1, r3
 80022b4:	4803      	ldr	r0, [pc, #12]	; (80022c4 <SSD1306_Fill+0x2c>)
 80022b6:	f004 fa7a 	bl	80067ae <memset>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000388 	.word	0x20000388

080022c8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	460b      	mov	r3, r1
 80022d4:	80bb      	strh	r3, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	70fb      	strb	r3, [r7, #3]
	if (
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	2b7f      	cmp	r3, #127	; 0x7f
 80022de:	d848      	bhi.n	8002372 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80022e0:	88bb      	ldrh	r3, [r7, #4]
 80022e2:	2b3f      	cmp	r3, #63	; 0x3f
 80022e4:	d845      	bhi.n	8002372 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <SSD1306_DrawPixel+0xb8>)
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d11a      	bne.n	8002338 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002302:	88fa      	ldrh	r2, [r7, #6]
 8002304:	88bb      	ldrh	r3, [r7, #4]
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	b298      	uxth	r0, r3
 800230a:	4603      	mov	r3, r0
 800230c:	01db      	lsls	r3, r3, #7
 800230e:	4413      	add	r3, r2
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <SSD1306_DrawPixel+0xbc>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	b25a      	sxtb	r2, r3
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	b25b      	sxtb	r3, r3
 8002324:	4313      	orrs	r3, r2
 8002326:	b259      	sxtb	r1, r3
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	4603      	mov	r3, r0
 800232c:	01db      	lsls	r3, r3, #7
 800232e:	4413      	add	r3, r2
 8002330:	b2c9      	uxtb	r1, r1
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <SSD1306_DrawPixel+0xbc>)
 8002334:	54d1      	strb	r1, [r2, r3]
 8002336:	e01d      	b.n	8002374 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	b298      	uxth	r0, r3
 8002340:	4603      	mov	r3, r0
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	4413      	add	r3, r2
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <SSD1306_DrawPixel+0xbc>)
 8002348:	5cd3      	ldrb	r3, [r2, r3]
 800234a:	b25a      	sxtb	r2, r3
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	b25b      	sxtb	r3, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4013      	ands	r3, r2
 8002360:	b259      	sxtb	r1, r3
 8002362:	88fa      	ldrh	r2, [r7, #6]
 8002364:	4603      	mov	r3, r0
 8002366:	01db      	lsls	r3, r3, #7
 8002368:	4413      	add	r3, r2
 800236a:	b2c9      	uxtb	r1, r1
 800236c:	4a05      	ldr	r2, [pc, #20]	; (8002384 <SSD1306_DrawPixel+0xbc>)
 800236e:	54d1      	strb	r1, [r2, r3]
 8002370:	e000      	b.n	8002374 <SSD1306_DrawPixel+0xac>
		return;
 8002372:	bf00      	nop
	}
}
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000788 	.word	0x20000788
 8002384:	20000388 	.word	0x20000388

08002388 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	460a      	mov	r2, r1
 8002392:	80fb      	strh	r3, [r7, #6]
 8002394:	4613      	mov	r3, r2
 8002396:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <SSD1306_GotoXY+0x28>)
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <SSD1306_GotoXY+0x28>)
 80023a0:	88bb      	ldrh	r3, [r7, #4]
 80023a2:	8053      	strh	r3, [r2, #2]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	20000788 	.word	0x20000788

080023b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <SSD1306_Putc+0xfc>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
	if (
 80023d0:	2b7f      	cmp	r3, #127	; 0x7f
 80023d2:	dc07      	bgt.n	80023e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <SSD1306_Putc+0xfc>)
 80023d6:	885b      	ldrh	r3, [r3, #2]
 80023d8:	461a      	mov	r2, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80023e0:	2b3f      	cmp	r3, #63	; 0x3f
 80023e2:	dd01      	ble.n	80023e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e05e      	b.n	80024a6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e04b      	b.n	8002486 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3b20      	subs	r3, #32
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	7849      	ldrb	r1, [r1, #1]
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4619      	mov	r1, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	440b      	add	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e030      	b.n	8002474 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d010      	beq.n	8002444 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002422:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <SSD1306_Putc+0xfc>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4413      	add	r3, r2
 800242c:	b298      	uxth	r0, r3
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <SSD1306_Putc+0xfc>)
 8002430:	885a      	ldrh	r2, [r3, #2]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4413      	add	r3, r2
 8002438:	b29b      	uxth	r3, r3
 800243a:	79ba      	ldrb	r2, [r7, #6]
 800243c:	4619      	mov	r1, r3
 800243e:	f7ff ff43 	bl	80022c8 <SSD1306_DrawPixel>
 8002442:	e014      	b.n	800246e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <SSD1306_Putc+0xfc>)
 8002446:	881a      	ldrh	r2, [r3, #0]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b298      	uxth	r0, r3
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <SSD1306_Putc+0xfc>)
 8002452:	885a      	ldrh	r2, [r3, #2]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4413      	add	r3, r2
 800245a:	b299      	uxth	r1, r3
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	f7ff ff2d 	bl	80022c8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3301      	adds	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4293      	cmp	r3, r2
 800247e:	d3c8      	bcc.n	8002412 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	461a      	mov	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4293      	cmp	r3, r2
 8002490:	d3ad      	bcc.n	80023ee <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <SSD1306_Putc+0xfc>)
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4413      	add	r3, r2
 800249e:	b29a      	uxth	r2, r3
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <SSD1306_Putc+0xfc>)
 80024a2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000788 	.word	0x20000788

080024b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80024c2:	e012      	b.n	80024ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff71 	bl	80023b4 <SSD1306_Putc>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d002      	beq.n	80024e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	e008      	b.n	80024f6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e8      	bne.n	80024c4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	781b      	ldrb	r3, [r3, #0]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80024fe:	b590      	push	{r4, r7, lr}
 8002500:	b087      	sub	sp, #28
 8002502:	af00      	add	r7, sp, #0
 8002504:	4604      	mov	r4, r0
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4623      	mov	r3, r4
 800250e:	80fb      	strh	r3, [r7, #6]
 8002510:	4603      	mov	r3, r0
 8002512:	80bb      	strh	r3, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	f1c3 0301 	rsb	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	461a      	mov	r2, r3
 800252e:	03d2      	lsls	r2, r2, #15
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002540:	88f8      	ldrh	r0, [r7, #6]
 8002542:	88ba      	ldrh	r2, [r7, #4]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4413      	add	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	787a      	ldrb	r2, [r7, #1]
 800254c:	4619      	mov	r1, r3
 800254e:	f7ff febb 	bl	80022c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002552:	88f8      	ldrh	r0, [r7, #6]
 8002554:	88ba      	ldrh	r2, [r7, #4]
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	b29b      	uxth	r3, r3
 800255c:	787a      	ldrb	r2, [r7, #1]
 800255e:	4619      	mov	r1, r3
 8002560:	f7ff feb2 	bl	80022c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002564:	88fa      	ldrh	r2, [r7, #6]
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	4413      	add	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	88b9      	ldrh	r1, [r7, #4]
 800256e:	787a      	ldrb	r2, [r7, #1]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fea9 	bl	80022c8 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	b29b      	uxth	r3, r3
 800257e:	88b9      	ldrh	r1, [r7, #4]
 8002580:	787a      	ldrb	r2, [r7, #1]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fea0 	bl	80022c8 <SSD1306_DrawPixel>

    while (x < y) {
 8002588:	e081      	b.n	800268e <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 800258a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0e      	blt.n	80025b0 <SSD1306_DrawCircle+0xb2>
            y--;
 8002592:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800259e:	8a7b      	ldrh	r3, [r7, #18]
 80025a0:	3302      	adds	r3, #2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80025a6:	8afa      	ldrh	r2, [r7, #22]
 80025a8:	8a7b      	ldrh	r3, [r7, #18]
 80025aa:	4413      	add	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80025b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3301      	adds	r3, #1
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80025bc:	8abb      	ldrh	r3, [r7, #20]
 80025be:	3302      	adds	r3, #2
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80025c4:	8afa      	ldrh	r2, [r7, #22]
 80025c6:	8abb      	ldrh	r3, [r7, #20]
 80025c8:	4413      	add	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	8a3b      	ldrh	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	b298      	uxth	r0, r3
 80025d6:	88ba      	ldrh	r2, [r7, #4]
 80025d8:	89fb      	ldrh	r3, [r7, #14]
 80025da:	4413      	add	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	787a      	ldrb	r2, [r7, #1]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7ff fe71 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80025e6:	88fa      	ldrh	r2, [r7, #6]
 80025e8:	8a3b      	ldrh	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b298      	uxth	r0, r3
 80025ee:	88ba      	ldrh	r2, [r7, #4]
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	4413      	add	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	787a      	ldrb	r2, [r7, #1]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7ff fe65 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	8a3b      	ldrh	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	b298      	uxth	r0, r3
 8002606:	88ba      	ldrh	r2, [r7, #4]
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	787a      	ldrb	r2, [r7, #1]
 8002610:	4619      	mov	r1, r3
 8002612:	f7ff fe59 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	8a3b      	ldrh	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	b298      	uxth	r0, r3
 800261e:	88ba      	ldrh	r2, [r7, #4]
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	b29b      	uxth	r3, r3
 8002626:	787a      	ldrb	r2, [r7, #1]
 8002628:	4619      	mov	r1, r3
 800262a:	f7ff fe4d 	bl	80022c8 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	89fb      	ldrh	r3, [r7, #14]
 8002632:	4413      	add	r3, r2
 8002634:	b298      	uxth	r0, r3
 8002636:	88ba      	ldrh	r2, [r7, #4]
 8002638:	8a3b      	ldrh	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	787a      	ldrb	r2, [r7, #1]
 8002640:	4619      	mov	r1, r3
 8002642:	f7ff fe41 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	89fb      	ldrh	r3, [r7, #14]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	b298      	uxth	r0, r3
 800264e:	88ba      	ldrh	r2, [r7, #4]
 8002650:	8a3b      	ldrh	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	787a      	ldrb	r2, [r7, #1]
 8002658:	4619      	mov	r1, r3
 800265a:	f7ff fe35 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	4413      	add	r3, r2
 8002664:	b298      	uxth	r0, r3
 8002666:	88ba      	ldrh	r2, [r7, #4]
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	787a      	ldrb	r2, [r7, #1]
 8002670:	4619      	mov	r1, r3
 8002672:	f7ff fe29 	bl	80022c8 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8002676:	88fa      	ldrh	r2, [r7, #6]
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	b298      	uxth	r0, r3
 800267e:	88ba      	ldrh	r2, [r7, #4]
 8002680:	8a3b      	ldrh	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	787a      	ldrb	r2, [r7, #1]
 8002688:	4619      	mov	r1, r3
 800268a:	f7ff fe1d 	bl	80022c8 <SSD1306_DrawPixel>
    while (x < y) {
 800268e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002692:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002696:	429a      	cmp	r2, r3
 8002698:	f6ff af77 	blt.w	800258a <SSD1306_DrawCircle+0x8c>
    }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}

080026a6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f7ff fdf4 	bl	8002298 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80026b0:	f7ff fdc4 	bl	800223c <SSD1306_UpdateScreen>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <ssd1306_I2C_Init+0x28>)
 80026c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026c2:	e002      	b.n	80026ca <ssd1306_I2C_Init+0x12>
		p--;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f9      	bne.n	80026c4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	0003d090 	.word	0x0003d090

080026e4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b0c7      	sub	sp, #284	; 0x11c
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80026f2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80026f6:	600a      	str	r2, [r1, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026fe:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002702:	4622      	mov	r2, r4
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800270a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800270e:	4602      	mov	r2, r0
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800271a:	460a      	mov	r2, r1
 800271c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800271e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002726:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800272a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002738:	e015      	b.n	8002766 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800273a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800273e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002742:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	441a      	add	r2, r3
 800274a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800274e:	3301      	adds	r3, #1
 8002750:	7811      	ldrb	r1, [r2, #0]
 8002752:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002756:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800275a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800275c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002760:	3301      	adds	r3, #1
 8002762:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002766:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800276a:	b29b      	uxth	r3, r3
 800276c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002770:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002774:	8812      	ldrh	r2, [r2, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d8df      	bhi.n	800273a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800277a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800277e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b299      	uxth	r1, r3
 8002786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	200a      	movs	r0, #10
 800279a:	9000      	str	r0, [sp, #0]
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <ssd1306_I2C_WriteMulti+0xc8>)
 800279e:	f000 feb9 	bl	8003514 <HAL_I2C_Master_Transmit>
}
 80027a2:	bf00      	nop
 80027a4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	2000025c 	.word	0x2000025c

080027b0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
 80027ba:	460b      	mov	r3, r1
 80027bc:	71bb      	strb	r3, [r7, #6]
 80027be:	4613      	mov	r3, r2
 80027c0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80027c6:	797b      	ldrb	r3, [r7, #5]
 80027c8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	b299      	uxth	r1, r3
 80027ce:	f107 020c 	add.w	r2, r7, #12
 80027d2:	230a      	movs	r3, #10
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2302      	movs	r3, #2
 80027d8:	4803      	ldr	r0, [pc, #12]	; (80027e8 <ssd1306_I2C_Write+0x38>)
 80027da:	f000 fe9b 	bl	8003514 <HAL_I2C_Master_Transmit>
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000025c 	.word	0x2000025c

080027ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_MspInit+0x4c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <HAL_MspInit+0x4c>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_MspInit+0x4c>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_MspInit+0x4c>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a08      	ldr	r2, [pc, #32]	; (8002838 <HAL_MspInit+0x4c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_MspInit+0x4c>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800

0800283c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_I2C_MspInit+0x84>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d12b      	bne.n	80028b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a17      	ldr	r2, [pc, #92]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800287a:	23c0      	movs	r3, #192	; 0xc0
 800287c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800287e:	2312      	movs	r3, #18
 8002880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800288a:	2304      	movs	r3, #4
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	480c      	ldr	r0, [pc, #48]	; (80028c8 <HAL_I2C_MspInit+0x8c>)
 8002896:	f000 fb2b 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 80028a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_I2C_MspInit+0x88>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028b6:	bf00      	nop
 80028b8:	3728      	adds	r7, #40	; 0x28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40005400 	.word	0x40005400
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020400 	.word	0x40020400

080028cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_TIM_Base_MspInit+0x3c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d10d      	bne.n	80028fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HAL_TIM_Base_MspInit+0x40>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_TIM_Base_MspInit+0x40>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <HAL_TIM_Base_MspInit+0x40>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40010000 	.word	0x40010000
 800290c:	40023800 	.word	0x40023800

08002910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	; 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_UART_MspInit+0x84>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d12c      	bne.n	800298c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <HAL_UART_MspInit+0x88>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_UART_MspInit+0x88>)
 800293c:	f043 0310 	orr.w	r3, r3, #16
 8002940:	6453      	str	r3, [r2, #68]	; 0x44
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_UART_MspInit+0x88>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_UART_MspInit+0x88>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <HAL_UART_MspInit+0x88>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <HAL_UART_MspInit+0x88>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800296a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800296e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800297c:	2307      	movs	r3, #7
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <HAL_UART_MspInit+0x8c>)
 8002988:	f000 fab2 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800298c:	bf00      	nop
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40011000 	.word	0x40011000
 8002998:	40023800 	.word	0x40023800
 800299c:	40020000 	.word	0x40020000

080029a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029a4:	e7fe      	b.n	80029a4 <NMI_Handler+0x4>

080029a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029aa:	e7fe      	b.n	80029aa <HardFault_Handler+0x4>

080029ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <MemManage_Handler+0x4>

080029b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <BusFault_Handler+0x4>

080029b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <UsageFault_Handler+0x4>

080029be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ec:	f000 f956 	bl	8002c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return 1;
 80029f8:	2301      	movs	r3, #1
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_kill>:

int _kill(int pid, int sig)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a0e:	f003 ff21 	bl	8006854 <__errno>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2216      	movs	r2, #22
 8002a16:	601a      	str	r2, [r3, #0]
  return -1;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_exit>:

void _exit (int status)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ffe7 	bl	8002a04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a36:	e7fe      	b.n	8002a36 <_exit+0x12>

08002a38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e00a      	b.n	8002a60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a4a:	f3af 8000 	nop.w
 8002a4e:	4601      	mov	r1, r0
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60ba      	str	r2, [r7, #8]
 8002a56:	b2ca      	uxtb	r2, r1
 8002a58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dbf0      	blt.n	8002a4a <_read+0x12>
  }

  return len;
 8002a68:	687b      	ldr	r3, [r7, #4]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e009      	b.n	8002a98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	60ba      	str	r2, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	dbf1      	blt.n	8002a84 <_write+0x12>
  }
  return len;
 8002aa0:	687b      	ldr	r3, [r7, #4]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_close>:

int _close(int file)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_isatty>:

int _isatty(int file)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aea:	2301      	movs	r3, #1
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <_sbrk+0x5c>)
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <_sbrk+0x60>)
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <_sbrk+0x64>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <_sbrk+0x64>)
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <_sbrk+0x68>)
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d207      	bcs.n	8002b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b44:	f003 fe86 	bl	8006854 <__errno>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b52:	e009      	b.n	8002b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <_sbrk+0x64>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <_sbrk+0x64>)
 8002b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20020000 	.word	0x20020000
 8002b74:	00000400 	.word	0x00000400
 8002b78:	20000790 	.word	0x20000790
 8002b7c:	200008e8 	.word	0x200008e8

08002b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <SystemInit+0x20>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <SystemInit+0x20>)
 8002b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ba8:	f7ff ffea 	bl	8002b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bac:	480c      	ldr	r0, [pc, #48]	; (8002be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bae:	490d      	ldr	r1, [pc, #52]	; (8002be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0a      	ldr	r2, [pc, #40]	; (8002bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bc4:	4c0a      	ldr	r4, [pc, #40]	; (8002bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bd2:	f003 fe45 	bl	8006860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bd6:	f7fe ffa9 	bl	8001b2c <main>
  bx  lr    
 8002bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002be8:	0800a9b8 	.word	0x0800a9b8
  ldr r2, =_sbss
 8002bec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002bf0:	200008e4 	.word	0x200008e4

08002bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bf4:	e7fe      	b.n	8002bf4 <ADC_IRQHandler>
	...

08002bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <HAL_Init+0x40>)
 8002c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_Init+0x40>)
 8002c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_Init+0x40>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f000 f931 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c26:	200f      	movs	r0, #15
 8002c28:	f000 f808 	bl	8002c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c2c:	f7ff fdde 	bl	80027ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00

08002c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x54>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x58>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f93b 	bl	8002ed6 <HAL_SYSTICK_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00e      	b.n	8002c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d80a      	bhi.n	8002c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c70:	2200      	movs	r2, #0
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f000 f911 	bl	8002e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <HAL_InitTick+0x5c>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000008 	.word	0x20000008
 8002c94:	20000010 	.word	0x20000010
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x20>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x24>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_IncTick+0x24>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000010 	.word	0x20000010
 8002cc0:	20000794 	.word	0x20000794

08002cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetTick+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000794 	.word	0x20000794

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff ffee 	bl	8002cc4 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d005      	beq.n	8002d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_Delay+0x44>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d02:	bf00      	nop
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d8f7      	bhi.n	8002d04 <HAL_Delay+0x28>
  {
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000010 	.word	0x20000010

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e54:	d301      	bcc.n	8002e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00f      	b.n	8002e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <SysTick_Config+0x40>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e62:	210f      	movs	r1, #15
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f7ff ff8e 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <SysTick_Config+0x40>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <SysTick_Config+0x40>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff47 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff5c 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ff8e 	bl	8002ddc <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5d 	bl	8002d88 <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffb0 	bl	8002e44 <SysTick_Config>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e16b      	b.n	80031e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 815a 	bne.w	80031de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b4 	beq.w	80031de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_GPIO_Init+0x30c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <HAL_GPIO_Init+0x310>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <HAL_GPIO_Init+0x324>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_GPIO_Init+0x328>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x20a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x310>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a32      	ldr	r2, [pc, #200]	; (8003224 <HAL_GPIO_Init+0x334>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x334>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae90 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e12b      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff fac2 	bl	800283c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f0:	f001 ff0e 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a81      	ldr	r2, [pc, #516]	; (8003500 <HAL_I2C_Init+0x274>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d807      	bhi.n	8003310 <HAL_I2C_Init+0x84>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a80      	ldr	r2, [pc, #512]	; (8003504 <HAL_I2C_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e006      	b.n	800331e <HAL_I2C_Init+0x92>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a7d      	ldr	r2, [pc, #500]	; (8003508 <HAL_I2C_Init+0x27c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e0e7      	b.n	80034f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a78      	ldr	r2, [pc, #480]	; (800350c <HAL_I2C_Init+0x280>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9b      	lsrs	r3, r3, #18
 8003330:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_I2C_Init+0x274>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <HAL_I2C_Init+0xd4>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	3301      	adds	r3, #1
 800335e:	e009      	b.n	8003374 <HAL_I2C_Init+0xe8>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	4a69      	ldr	r2, [pc, #420]	; (8003510 <HAL_I2C_Init+0x284>)
 800336c:	fba2 2303 	umull	r2, r3, r2, r3
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	3301      	adds	r3, #1
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	430b      	orrs	r3, r1
 800337a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003386:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	495c      	ldr	r1, [pc, #368]	; (8003500 <HAL_I2C_Init+0x274>)
 8003390:	428b      	cmp	r3, r1
 8003392:	d819      	bhi.n	80033c8 <HAL_I2C_Init+0x13c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e59      	subs	r1, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a2:	1c59      	adds	r1, r3, #1
 80033a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_I2C_Init+0x138>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	1e59      	subs	r1, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	e051      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c4:	2304      	movs	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x168>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x18e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x196>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1bc>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1dc>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	461a      	mov	r2, r3
 8003520:	460b      	mov	r3, r1
 8003522:	817b      	strh	r3, [r7, #10]
 8003524:	4613      	mov	r3, r2
 8003526:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff fbcc 	bl	8002cc4 <HAL_GetTick>
 800352c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b20      	cmp	r3, #32
 8003538:	f040 80e0 	bne.w	80036fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2319      	movs	r3, #25
 8003542:	2201      	movs	r2, #1
 8003544:	4970      	ldr	r1, [pc, #448]	; (8003708 <HAL_I2C_Master_Transmit+0x1f4>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 ff3c 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003552:	2302      	movs	r3, #2
 8003554:	e0d3      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_I2C_Master_Transmit+0x50>
 8003560:	2302      	movs	r3, #2
 8003562:	e0cc      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d007      	beq.n	800358a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003598:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2210      	movs	r2, #16
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_I2C_Master_Transmit+0x1f8>)
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035cc:	8979      	ldrh	r1, [r7, #10]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fcf6 	bl	8003fc4 <I2C_MasterRequestWrite>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f8:	e066      	b.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fffa 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b04      	cmp	r3, #4
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d11b      	bne.n	800369c <HAL_I2C_Master_Transmit+0x188>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d017      	beq.n	800369c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fff1 	bl	8004688 <I2C_WaitOnBTFFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e01a      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d194      	bne.n	80035fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	e000      	b.n	80036fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036fc:	2302      	movs	r3, #2
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000

08003710 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4603      	mov	r3, r0
 8003720:	817b      	strh	r3, [r7, #10]
 8003722:	460b      	mov	r3, r1
 8003724:	813b      	strh	r3, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372a:	f7ff facb 	bl	8002cc4 <HAL_GetTick>
 800372e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	f040 80d9 	bne.w	80038f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2319      	movs	r3, #25
 8003744:	2201      	movs	r2, #1
 8003746:	496d      	ldr	r1, [pc, #436]	; (80038fc <HAL_I2C_Mem_Write+0x1ec>)
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fe3b 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
 8003756:	e0cc      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Mem_Write+0x56>
 8003762:	2302      	movs	r3, #2
 8003764:	e0c5      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d007      	beq.n	800378c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2221      	movs	r2, #33	; 0x21
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	; 0x40
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a4d      	ldr	r2, [pc, #308]	; (8003900 <HAL_I2C_Mem_Write+0x1f0>)
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ce:	88f8      	ldrh	r0, [r7, #6]
 80037d0:	893a      	ldrh	r2, [r7, #8]
 80037d2:	8979      	ldrh	r1, [r7, #10]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	4603      	mov	r3, r0
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fc72 	bl	80040c8 <I2C_RequestMemoryWrite>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d052      	beq.n	8003890 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e081      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 ff00 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00d      	beq.n	800381a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b04      	cmp	r3, #4
 8003804:	d107      	bne.n	8003816 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06b      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b04      	cmp	r3, #4
 8003856:	d11b      	bne.n	8003890 <HAL_I2C_Mem_Write+0x180>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d017      	beq.n	8003890 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1aa      	bne.n	80037ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fef3 	bl	8004688 <I2C_WaitOnBTFFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e016      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	00100002 	.word	0x00100002
 8003900:	ffff0000 	.word	0xffff0000

08003904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	817b      	strh	r3, [r7, #10]
 8003916:	460b      	mov	r3, r1
 8003918:	813b      	strh	r3, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800391e:	f7ff f9d1 	bl	8002cc4 <HAL_GetTick>
 8003922:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	f040 8214 	bne.w	8003d5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2319      	movs	r3, #25
 8003938:	2201      	movs	r2, #1
 800393a:	497b      	ldr	r1, [pc, #492]	; (8003b28 <HAL_I2C_Mem_Read+0x224>)
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fd41 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
 800394a:	e207      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_I2C_Mem_Read+0x56>
 8003956:	2302      	movs	r3, #2
 8003958:	e200      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d007      	beq.n	8003980 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2222      	movs	r2, #34	; 0x22
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2240      	movs	r2, #64	; 0x40
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a5b      	ldr	r2, [pc, #364]	; (8003b2c <HAL_I2C_Mem_Read+0x228>)
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c2:	88f8      	ldrh	r0, [r7, #6]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fc0e 	bl	80041f4 <I2C_RequestMemoryRead>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1bc      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d113      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ea:	2300      	movs	r3, #0
 80039ec:	623b      	str	r3, [r7, #32]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	623b      	str	r3, [r7, #32]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e190      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d11b      	bne.n	8003a52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e170      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d11b      	bne.n	8003a92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	e150      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003aa8:	e144      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 80f1 	bhi.w	8003c96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d123      	bne.n	8003b04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fe29 	bl	8004718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e145      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	1c5a      	adds	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b02:	e117      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d14e      	bne.n	8003baa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b12:	2200      	movs	r2, #0
 8003b14:	4906      	ldr	r1, [pc, #24]	; (8003b30 <HAL_I2C_Mem_Read+0x22c>)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fc54 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e11a      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
 8003b26:	bf00      	nop
 8003b28:	00100002 	.word	0x00100002
 8003b2c:	ffff0000 	.word	0xffff0000
 8003b30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba8:	e0c4      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	496c      	ldr	r1, [pc, #432]	; (8003d64 <HAL_I2C_Mem_Read+0x460>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fc05 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cb      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	4955      	ldr	r1, [pc, #340]	; (8003d64 <HAL_I2C_Mem_Read+0x460>)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fbd7 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e09d      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c94:	e04e      	b.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fd3c 	bl	8004718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e058      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d124      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f aeb6 	bne.w	8003aaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	00010004 	.word	0x00010004

08003d68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7fe ffa4 	bl	8002cc4 <HAL_GetTick>
 8003d7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	f040 8111 	bne.w	8003fb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2319      	movs	r3, #25
 8003d96:	2201      	movs	r2, #1
 8003d98:	4988      	ldr	r1, [pc, #544]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fb12 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
 8003da8:	e104      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2C_IsDeviceReady+0x50>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e0fd      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d007      	beq.n	8003dde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2224      	movs	r2, #36	; 0x24
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a70      	ldr	r2, [pc, #448]	; (8003fc0 <HAL_I2C_IsDeviceReady+0x258>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fad0 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0b6      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe ff35 	bl	8002cc4 <HAL_GetTick>
 8003e5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e8a:	e025      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe ff1a 	bl	8002cc4 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <HAL_I2C_IsDeviceReady+0x13a>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22a0      	movs	r2, #160	; 0xa0
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_I2C_IsDeviceReady+0x188>
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <HAL_I2C_IsDeviceReady+0x188>
 8003eea:	7dbb      	ldrb	r3, [r7, #22]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0cd      	beq.n	8003e8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d129      	bne.n	8003f5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2319      	movs	r3, #25
 8003f32:	2201      	movs	r2, #1
 8003f34:	4921      	ldr	r1, [pc, #132]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fa44 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e036      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e02c      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	490f      	ldr	r1, [pc, #60]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa20 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e012      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f4ff af32 	bcc.w	8003e02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000

08003fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d006      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fec:	d108      	bne.n	8004000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00b      	b.n	8004018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b12      	cmp	r3, #18
 8004006:	d107      	bne.n	8004018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9cd 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d103      	bne.n	8004048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e035      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d108      	bne.n	8004068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e01b      	b.n	80040a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	11db      	asrs	r3, r3, #7
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0306 	and.w	r3, r3, #6
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f063 030f 	orn	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <I2C_MasterRequestWrite+0xfc>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fa16 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e010      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4907      	ldr	r1, [pc, #28]	; (80040c4 <I2C_MasterRequestWrite+0x100>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fa06 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	00010008 	.word	0x00010008
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	460b      	mov	r3, r1
 80040dc:	813b      	strh	r3, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f960 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004118:	d103      	bne.n	8004122 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e05f      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	492d      	ldr	r1, [pc, #180]	; (80041f0 <I2C_RequestMemoryWrite+0x128>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f9bb 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04c      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	6a39      	ldr	r1, [r7, #32]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fa46 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b04      	cmp	r3, #4
 8004178:	d107      	bne.n	800418a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02b      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004194:	893b      	ldrh	r3, [r7, #8]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	e021      	b.n	80041e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a0:	893b      	ldrh	r3, [r7, #8]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fa20 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d107      	bne.n	80041d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e005      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041da:	893b      	ldrh	r3, [r7, #8]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	2200      	movs	r2, #0
 8004236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f8c2 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004254:	d103      	bne.n	800425e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0aa      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004262:	897b      	ldrh	r3, [r7, #10]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	4952      	ldr	r1, [pc, #328]	; (80043c0 <I2C_RequestMemoryRead+0x1cc>)
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f91d 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e097      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	6a39      	ldr	r1, [r7, #32]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f9a8 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e076      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e021      	b.n	8004320 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f982 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e050      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004316:	893b      	ldrh	r3, [r7, #8]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	6a39      	ldr	r1, [r7, #32]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f967 	bl	80045f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b04      	cmp	r3, #4
 8004336:	d107      	bne.n	8004348 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e035      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2200      	movs	r2, #0
 8004364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f82b 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d103      	bne.n	800438c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e013      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004390:	897b      	ldrh	r3, [r7, #10]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6a3a      	ldr	r2, [r7, #32]
 80043a4:	4906      	ldr	r1, [pc, #24]	; (80043c0 <I2C_RequestMemoryRead+0x1cc>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f886 	bl	80044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	e048      	b.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d044      	beq.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fc71 	bl	8002cc4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d139      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10d      	bne.n	800441a <I2C_WaitOnFlagUntilTimeout+0x56>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	43da      	mvns	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4013      	ands	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	bf0c      	ite	eq
 8004410:	2301      	moveq	r3, #1
 8004412:	2300      	movne	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	461a      	mov	r2, r3
 8004418:	e00c      	b.n	8004434 <I2C_WaitOnFlagUntilTimeout+0x70>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	d116      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e023      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10d      	bne.n	800448e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	43da      	mvns	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	e00c      	b.n	80044a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d093      	beq.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044c6:	e071      	b.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d123      	bne.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	f043 0204 	orr.w	r2, r3, #4
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e067      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d041      	beq.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fe fbcc 	bl	8002cc4 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d136      	bne.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10c      	bne.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf14      	ite	ne
 800455a:	2301      	movne	r3, #1
 800455c:	2300      	moveq	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	e00b      	b.n	800457a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	43da      	mvns	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf14      	ite	ne
 8004574:	2301      	movne	r3, #1
 8004576:	2300      	moveq	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0220 	orr.w	r2, r3, #32
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e021      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10c      	bne.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	43da      	mvns	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	4013      	ands	r3, r2
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e00b      	b.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4013      	ands	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f af6d 	bne.w	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004604:	e034      	b.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8e3 	bl	80047d2 <I2C_IsAcknowledgeFailed>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e034      	b.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d028      	beq.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fe fb51 	bl	8002cc4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11d      	bne.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d016      	beq.n	8004670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e007      	b.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d1c3      	bne.n	8004606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004694:	e034      	b.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f89b 	bl	80047d2 <I2C_IsAcknowledgeFailed>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e034      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d028      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe fb09 	bl	8002cc4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11d      	bne.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d016      	beq.n	8004700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d1c3      	bne.n	8004696 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004724:	e049      	b.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b10      	cmp	r3, #16
 8004732:	d119      	bne.n	8004768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0210 	mvn.w	r2, #16
 800473c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e030      	b.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004768:	f7fe faac 	bl	8002cc4 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	d302      	bcc.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11d      	bne.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d016      	beq.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e007      	b.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d1ae      	bne.n	8004726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d11b      	bne.n	8004822 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0204 	orr.w	r2, r3, #4
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e267      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d075      	beq.n	800493a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800484e:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d00c      	beq.n	8004874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800485a:	4b85      	ldr	r3, [pc, #532]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d112      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b82      	ldr	r3, [pc, #520]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004872:	d10b      	bne.n	800488c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004874:	4b7e      	ldr	r3, [pc, #504]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d05b      	beq.n	8004938 <HAL_RCC_OscConfig+0x108>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d157      	bne.n	8004938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e242      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x74>
 8004896:	4b76      	ldr	r3, [pc, #472]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a75      	ldr	r2, [pc, #468]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e01d      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ac:	d10c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x98>
 80048ae:	4b70      	ldr	r3, [pc, #448]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a6f      	ldr	r2, [pc, #444]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	4b6d      	ldr	r3, [pc, #436]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6c      	ldr	r2, [pc, #432]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCC_OscConfig+0xb0>
 80048c8:	4b69      	ldr	r3, [pc, #420]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a68      	ldr	r2, [pc, #416]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	4b66      	ldr	r3, [pc, #408]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a65      	ldr	r2, [pc, #404]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80048da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d013      	beq.n	8004910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e8:	f7fe f9ec 	bl	8002cc4 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f0:	f7fe f9e8 	bl	8002cc4 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b64      	cmp	r3, #100	; 0x64
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e207      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0xc0>
 800490e:	e014      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fe f9d8 	bl	8002cc4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004918:	f7fe f9d4 	bl	8002cc4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e1f3      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0xe8>
 8004936:	e000      	b.n	800493a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d063      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004946:	4b4a      	ldr	r3, [pc, #296]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11c      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b44      	ldr	r3, [pc, #272]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d116      	bne.n	8004998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	4b41      	ldr	r3, [pc, #260]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e1c7      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4937      	ldr	r1, [pc, #220]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	e03a      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a0:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <HAL_RCC_OscConfig+0x244>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fe f98d 	bl	8002cc4 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ae:	f7fe f989 	bl	8002cc4 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e1a8      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c0:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4925      	ldr	r1, [pc, #148]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]
 80049e0:	e015      	b.n	8004a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049e2:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCC_OscConfig+0x244>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe f96c 	bl	8002cc4 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fe f968 	bl	8002cc4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e187      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d036      	beq.n	8004a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_RCC_OscConfig+0x248>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a28:	f7fe f94c 	bl	8002cc4 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fe f948 	bl	8002cc4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e167      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_OscConfig+0x240>)
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x200>
 8004a4e:	e01b      	b.n	8004a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a50:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <HAL_RCC_OscConfig+0x248>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a56:	f7fe f935 	bl	8002cc4 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	e00e      	b.n	8004a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fe f931 	bl	8002cc4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d907      	bls.n	8004a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e150      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
 8004a70:	40023800 	.word	0x40023800
 8004a74:	42470000 	.word	0x42470000
 8004a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7c:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ea      	bne.n	8004a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8097 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a9a:	4b81      	ldr	r3, [pc, #516]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	4b7d      	ldr	r3, [pc, #500]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4a7c      	ldr	r2, [pc, #496]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ab6:	4b7a      	ldr	r3, [pc, #488]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	4b77      	ldr	r3, [pc, #476]	; (8004ca4 <HAL_RCC_OscConfig+0x474>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d118      	bne.n	8004b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad2:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a73      	ldr	r2, [pc, #460]	; (8004ca4 <HAL_RCC_OscConfig+0x474>)
 8004ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ade:	f7fe f8f1 	bl	8002cc4 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae4:	e008      	b.n	8004af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae6:	f7fe f8ed 	bl	8002cc4 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e10c      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af8:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_OscConfig+0x474>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f0      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x2ea>
 8004b0c:	4b64      	ldr	r3, [pc, #400]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a63      	ldr	r2, [pc, #396]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	e01c      	b.n	8004b54 <HAL_RCC_OscConfig+0x324>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x30c>
 8004b22:	4b5f      	ldr	r3, [pc, #380]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a5e      	ldr	r2, [pc, #376]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a5b      	ldr	r2, [pc, #364]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	e00b      	b.n	8004b54 <HAL_RCC_OscConfig+0x324>
 8004b3c:	4b58      	ldr	r3, [pc, #352]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b40:	4a57      	ldr	r2, [pc, #348]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	6713      	str	r3, [r2, #112]	; 0x70
 8004b48:	4b55      	ldr	r3, [pc, #340]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	4a54      	ldr	r2, [pc, #336]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 0304 	bic.w	r3, r3, #4
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d015      	beq.n	8004b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fe f8b2 	bl	8002cc4 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fe f8ae 	bl	8002cc4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0cb      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7a:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ee      	beq.n	8004b64 <HAL_RCC_OscConfig+0x334>
 8004b86:	e014      	b.n	8004bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b88:	f7fe f89c 	bl	8002cc4 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b90:	f7fe f898 	bl	8002cc4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e0b5      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1ee      	bne.n	8004b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb8:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80a1 	beq.w	8004d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bce:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d05c      	beq.n	8004c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d141      	bne.n	8004c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_RCC_OscConfig+0x478>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7fe f86c 	bl	8002cc4 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fe f868 	bl	8002cc4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e087      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	3b01      	subs	r3, #1
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	491b      	ldr	r1, [pc, #108]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c38:	4b1b      	ldr	r3, [pc, #108]	; (8004ca8 <HAL_RCC_OscConfig+0x478>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fe f841 	bl	8002cc4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fe f83d 	bl	8002cc4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e05c      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x416>
 8004c64:	e054      	b.n	8004d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <HAL_RCC_OscConfig+0x478>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fe f82a 	bl	8002cc4 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fe f826 	bl	8002cc4 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e045      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_OscConfig+0x470>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f0      	bne.n	8004c74 <HAL_RCC_OscConfig+0x444>
 8004c92:	e03d      	b.n	8004d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d107      	bne.n	8004cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e038      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <HAL_RCC_OscConfig+0x4ec>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d028      	beq.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d121      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d11a      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d111      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d107      	bne.n	8004d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800

08004d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0cc      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d34:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d90c      	bls.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b65      	ldr	r3, [pc, #404]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b63      	ldr	r3, [pc, #396]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e0b8      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d74:	4b59      	ldr	r3, [pc, #356]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	4a58      	ldr	r2, [pc, #352]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a52      	ldr	r2, [pc, #328]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d98:	4b50      	ldr	r3, [pc, #320]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	494d      	ldr	r1, [pc, #308]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d044      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	4b47      	ldr	r3, [pc, #284]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d119      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e07f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dde:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e06f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dee:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e067      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dfe:	4b37      	ldr	r3, [pc, #220]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f023 0203 	bic.w	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	4934      	ldr	r1, [pc, #208]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e10:	f7fd ff58 	bl	8002cc4 <HAL_GetTick>
 8004e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e18:	f7fd ff54 	bl	8002cc4 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e04f      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2e:	4b2b      	ldr	r3, [pc, #172]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 020c 	and.w	r2, r3, #12
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d1eb      	bne.n	8004e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e40:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d20c      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e032      	b.n	8004ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d008      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4916      	ldr	r1, [pc, #88]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e92:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	490e      	ldr	r1, [pc, #56]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ea6:	f000 f821 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	490a      	ldr	r1, [pc, #40]	; (8004ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	5ccb      	ldrb	r3, [r1, r3]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ec2:	4b09      	ldr	r3, [pc, #36]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd feb8 	bl	8002c3c <HAL_InitTick>

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023c00 	.word	0x40023c00
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	0800a5ec 	.word	0x0800a5ec
 8004ee4:	20000008 	.word	0x20000008
 8004ee8:	2000000c 	.word	0x2000000c

08004eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef0:	b094      	sub	sp, #80	; 0x50
 8004ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	2300      	movs	r3, #0
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004efc:	2300      	movs	r3, #0
 8004efe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f04:	4b79      	ldr	r3, [pc, #484]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d00d      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x40>
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	f200 80e1 	bhi.w	80050d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x34>
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f1e:	e0db      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b73      	ldr	r3, [pc, #460]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f24:	e0db      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f26:	4b73      	ldr	r3, [pc, #460]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f2a:	e0d8      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f2c:	4b6f      	ldr	r3, [pc, #444]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f36:	4b6d      	ldr	r3, [pc, #436]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d063      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f42:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	0159      	lsls	r1, r3, #5
 8004f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f70:	0150      	lsls	r0, r2, #5
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4621      	mov	r1, r4
 8004f78:	1a51      	subs	r1, r2, r1
 8004f7a:	6139      	str	r1, [r7, #16]
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f90:	4659      	mov	r1, fp
 8004f92:	018b      	lsls	r3, r1, #6
 8004f94:	4651      	mov	r1, sl
 8004f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f9a:	4651      	mov	r1, sl
 8004f9c:	018a      	lsls	r2, r1, #6
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	4699      	mov	r9, r3
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	eb18 0303 	adds.w	r3, r8, r3
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	462b      	mov	r3, r5
 8004fcc:	eb49 0303 	adc.w	r3, r9, r3
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fde:	4629      	mov	r1, r5
 8004fe0:	024b      	lsls	r3, r1, #9
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fe8:	4621      	mov	r1, r4
 8004fea:	024a      	lsls	r2, r1, #9
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ffc:	f7fb fe44 	bl	8000c88 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4613      	mov	r3, r2
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005008:	e058      	b.n	80050bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b38      	ldr	r3, [pc, #224]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	2200      	movs	r2, #0
 8005012:	4618      	mov	r0, r3
 8005014:	4611      	mov	r1, r2
 8005016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800501a:	623b      	str	r3, [r7, #32]
 800501c:	2300      	movs	r3, #0
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
 8005020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005024:	4642      	mov	r2, r8
 8005026:	464b      	mov	r3, r9
 8005028:	f04f 0000 	mov.w	r0, #0
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	0159      	lsls	r1, r3, #5
 8005032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005036:	0150      	lsls	r0, r2, #5
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4641      	mov	r1, r8
 800503e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005042:	4649      	mov	r1, r9
 8005044:	eb63 0b01 	sbc.w	fp, r3, r1
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800505c:	ebb2 040a 	subs.w	r4, r2, sl
 8005060:	eb63 050b 	sbc.w	r5, r3, fp
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	00eb      	lsls	r3, r5, #3
 800506e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005072:	00e2      	lsls	r2, r4, #3
 8005074:	4614      	mov	r4, r2
 8005076:	461d      	mov	r5, r3
 8005078:	4643      	mov	r3, r8
 800507a:	18e3      	adds	r3, r4, r3
 800507c:	603b      	str	r3, [r7, #0]
 800507e:	464b      	mov	r3, r9
 8005080:	eb45 0303 	adc.w	r3, r5, r3
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005092:	4629      	mov	r1, r5
 8005094:	028b      	lsls	r3, r1, #10
 8005096:	4621      	mov	r1, r4
 8005098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800509c:	4621      	mov	r1, r4
 800509e:	028a      	lsls	r2, r1, #10
 80050a0:	4610      	mov	r0, r2
 80050a2:	4619      	mov	r1, r3
 80050a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a6:	2200      	movs	r2, #0
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	61fa      	str	r2, [r7, #28]
 80050ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b0:	f7fb fdea 	bl	8000c88 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4613      	mov	r3, r2
 80050ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_GetSysClockFreq+0x200>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	3301      	adds	r3, #1
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050d6:	e002      	b.n	80050de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b05      	ldr	r3, [pc, #20]	; (80050f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3750      	adds	r7, #80	; 0x50
 80050e4:	46bd      	mov	sp, r7
 80050e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ea:	bf00      	nop
 80050ec:	40023800 	.word	0x40023800
 80050f0:	00f42400 	.word	0x00f42400
 80050f4:	007a1200 	.word	0x007a1200

080050f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_GetHCLKFreq+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20000008 	.word	0x20000008

08005110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005114:	f7ff fff0 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0a9b      	lsrs	r3, r3, #10
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4903      	ldr	r1, [pc, #12]	; (8005134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800512c:	4618      	mov	r0, r3
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	0800a5fc 	.word	0x0800a5fc

08005138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800513c:	f7ff ffdc 	bl	80050f8 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0b5b      	lsrs	r3, r3, #13
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4903      	ldr	r1, [pc, #12]	; (800515c <HAL_RCC_GetPCLK2Freq+0x24>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40023800 	.word	0x40023800
 800515c:	0800a5fc 	.word	0x0800a5fc

08005160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e041      	b.n	80051f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd fba0 	bl	80028cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3304      	adds	r3, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4610      	mov	r0, r2
 80051a0:	f000 f8f4 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005208:	2300      	movs	r3, #0
 800520a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_ConfigClockSource+0x1c>
 8005216:	2302      	movs	r3, #2
 8005218:	e0b4      	b.n	8005384 <HAL_TIM_ConfigClockSource+0x186>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005238:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005240:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005252:	d03e      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xd4>
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	f200 8087 	bhi.w	800536a <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005260:	f000 8086 	beq.w	8005370 <HAL_TIM_ConfigClockSource+0x172>
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d87f      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 800526a:	2b70      	cmp	r3, #112	; 0x70
 800526c:	d01a      	beq.n	80052a4 <HAL_TIM_ConfigClockSource+0xa6>
 800526e:	2b70      	cmp	r3, #112	; 0x70
 8005270:	d87b      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 8005272:	2b60      	cmp	r3, #96	; 0x60
 8005274:	d050      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x11a>
 8005276:	2b60      	cmp	r3, #96	; 0x60
 8005278:	d877      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 800527a:	2b50      	cmp	r3, #80	; 0x50
 800527c:	d03c      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0xfa>
 800527e:	2b50      	cmp	r3, #80	; 0x50
 8005280:	d873      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d058      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x13a>
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	d86f      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 800528a:	2b30      	cmp	r3, #48	; 0x30
 800528c:	d064      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x15a>
 800528e:	2b30      	cmp	r3, #48	; 0x30
 8005290:	d86b      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 8005292:	2b20      	cmp	r3, #32
 8005294:	d060      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x15a>
 8005296:	2b20      	cmp	r3, #32
 8005298:	d867      	bhi.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d05c      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x15a>
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d05a      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x15a>
 80052a2:	e062      	b.n	800536a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	f000 f990 	bl	80055d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	609a      	str	r2, [r3, #8]
      break;
 80052d0:	e04f      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052e2:	f000 f979 	bl	80055d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f4:	609a      	str	r2, [r3, #8]
      break;
 80052f6:	e03c      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005304:	461a      	mov	r2, r3
 8005306:	f000 f8ed 	bl	80054e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2150      	movs	r1, #80	; 0x50
 8005310:	4618      	mov	r0, r3
 8005312:	f000 f946 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005316:	e02c      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005324:	461a      	mov	r2, r3
 8005326:	f000 f90c 	bl	8005542 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2160      	movs	r1, #96	; 0x60
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f936 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005336:	e01c      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005344:	461a      	mov	r2, r3
 8005346:	f000 f8cd 	bl	80054e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2140      	movs	r1, #64	; 0x40
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f926 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005356:	e00c      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 f91d 	bl	80055a2 <TIM_ITRx_SetConfig>
      break;
 8005368:	e003      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
      break;
 800536e:	e000      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005370:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a46      	ldr	r2, [pc, #280]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d00f      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a43      	ldr	r2, [pc, #268]	; (80054bc <TIM_Base_SetConfig+0x130>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a42      	ldr	r2, [pc, #264]	; (80054c0 <TIM_Base_SetConfig+0x134>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a41      	ldr	r2, [pc, #260]	; (80054c4 <TIM_Base_SetConfig+0x138>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0x40>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <TIM_Base_SetConfig+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a35      	ldr	r2, [pc, #212]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ec:	d027      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a32      	ldr	r2, [pc, #200]	; (80054bc <TIM_Base_SetConfig+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d023      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a31      	ldr	r2, [pc, #196]	; (80054c0 <TIM_Base_SetConfig+0x134>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a30      	ldr	r2, [pc, #192]	; (80054c4 <TIM_Base_SetConfig+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2f      	ldr	r2, [pc, #188]	; (80054c8 <TIM_Base_SetConfig+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d017      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <TIM_Base_SetConfig+0x140>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a2d      	ldr	r2, [pc, #180]	; (80054d0 <TIM_Base_SetConfig+0x144>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00f      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <TIM_Base_SetConfig+0x148>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00b      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2b      	ldr	r2, [pc, #172]	; (80054d8 <TIM_Base_SetConfig+0x14c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x150>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <TIM_Base_SetConfig+0xb2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x154>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <TIM_Base_SetConfig+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0xf8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a12      	ldr	r2, [pc, #72]	; (80054c8 <TIM_Base_SetConfig+0x13c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d103      	bne.n	800548c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]
  }
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	40001800 	.word	0x40001800
 80054dc:	40001c00 	.word	0x40001c00
 80054e0:	40002000 	.word	0x40002000

080054e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800550e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 030a 	bic.w	r3, r3, #10
 8005520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b087      	sub	sp, #28
 8005546:	af00      	add	r7, sp, #0
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f023 0210 	bic.w	r2, r3, #16
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800556c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	031b      	lsls	r3, r3, #12
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800557e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	f043 0307 	orr.w	r3, r3, #7
 80055c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800562c:	2302      	movs	r3, #2
 800562e:	e05a      	b.n	80056e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567c:	d01d      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1a      	ldr	r2, [pc, #104]	; (8005700 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a17      	ldr	r2, [pc, #92]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a15      	ldr	r2, [pc, #84]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d10c      	bne.n	80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40010400 	.word	0x40010400
 8005708:	40014000 	.word	0x40014000
 800570c:	40001800 	.word	0x40001800

08005710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e042      	b.n	80057a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fd f8ea 	bl	8002910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2224      	movs	r2, #36	; 0x24
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f82b 	bl	80057b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b4:	b0c0      	sub	sp, #256	; 0x100
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	68d9      	ldr	r1, [r3, #12]
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	ea40 0301 	orr.w	r3, r0, r1
 80057d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005808:	f021 010c 	bic.w	r1, r1, #12
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005816:	430b      	orrs	r3, r1
 8005818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	6999      	ldr	r1, [r3, #24]
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	ea40 0301 	orr.w	r3, r0, r1
 8005836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b8f      	ldr	r3, [pc, #572]	; (8005a7c <UART_SetConfig+0x2cc>)
 8005840:	429a      	cmp	r2, r3
 8005842:	d005      	beq.n	8005850 <UART_SetConfig+0xa0>
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b8d      	ldr	r3, [pc, #564]	; (8005a80 <UART_SetConfig+0x2d0>)
 800584c:	429a      	cmp	r2, r3
 800584e:	d104      	bne.n	800585a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7ff fc72 	bl	8005138 <HAL_RCC_GetPCLK2Freq>
 8005854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005858:	e003      	b.n	8005862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800585a:	f7ff fc59 	bl	8005110 <HAL_RCC_GetPCLK1Freq>
 800585e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	f040 810c 	bne.w	8005a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005874:	2200      	movs	r2, #0
 8005876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800587a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800587e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	1891      	adds	r1, r2, r2
 8005888:	65b9      	str	r1, [r7, #88]	; 0x58
 800588a:	415b      	adcs	r3, r3
 800588c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005892:	4621      	mov	r1, r4
 8005894:	eb12 0801 	adds.w	r8, r2, r1
 8005898:	4629      	mov	r1, r5
 800589a:	eb43 0901 	adc.w	r9, r3, r1
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	f04f 0300 	mov.w	r3, #0
 80058a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058b2:	4690      	mov	r8, r2
 80058b4:	4699      	mov	r9, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	eb18 0303 	adds.w	r3, r8, r3
 80058bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c0:	462b      	mov	r3, r5
 80058c2:	eb49 0303 	adc.w	r3, r9, r3
 80058c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058de:	460b      	mov	r3, r1
 80058e0:	18db      	adds	r3, r3, r3
 80058e2:	653b      	str	r3, [r7, #80]	; 0x50
 80058e4:	4613      	mov	r3, r2
 80058e6:	eb42 0303 	adc.w	r3, r2, r3
 80058ea:	657b      	str	r3, [r7, #84]	; 0x54
 80058ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058f4:	f7fb f9c8 	bl	8000c88 <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b61      	ldr	r3, [pc, #388]	; (8005a84 <UART_SetConfig+0x2d4>)
 80058fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	011c      	lsls	r4, r3, #4
 8005906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005918:	4642      	mov	r2, r8
 800591a:	464b      	mov	r3, r9
 800591c:	1891      	adds	r1, r2, r2
 800591e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005920:	415b      	adcs	r3, r3
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005928:	4641      	mov	r1, r8
 800592a:	eb12 0a01 	adds.w	sl, r2, r1
 800592e:	4649      	mov	r1, r9
 8005930:	eb43 0b01 	adc.w	fp, r3, r1
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005948:	4692      	mov	sl, r2
 800594a:	469b      	mov	fp, r3
 800594c:	4643      	mov	r3, r8
 800594e:	eb1a 0303 	adds.w	r3, sl, r3
 8005952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005956:	464b      	mov	r3, r9
 8005958:	eb4b 0303 	adc.w	r3, fp, r3
 800595c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800596c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005974:	460b      	mov	r3, r1
 8005976:	18db      	adds	r3, r3, r3
 8005978:	643b      	str	r3, [r7, #64]	; 0x40
 800597a:	4613      	mov	r3, r2
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	647b      	str	r3, [r7, #68]	; 0x44
 8005982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800598a:	f7fb f97d 	bl	8000c88 <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4611      	mov	r1, r2
 8005994:	4b3b      	ldr	r3, [pc, #236]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005996:	fba3 2301 	umull	r2, r3, r3, r1
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2264      	movs	r2, #100	; 0x64
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	1acb      	subs	r3, r1, r3
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <UART_SetConfig+0x2d4>)
 80059ac:	fba3 2302 	umull	r2, r3, r3, r2
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b8:	441c      	add	r4, r3
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d4:	415b      	adcs	r3, r3
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6339      	str	r1, [r7, #48]	; 0x30
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a10:	464b      	mov	r3, r9
 8005a12:	460a      	mov	r2, r1
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a30:	460b      	mov	r3, r1
 8005a32:	18db      	adds	r3, r3, r3
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a36:	4613      	mov	r3, r2
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a46:	f7fb f91f 	bl	8000c88 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <UART_SetConfig+0x2d4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 0207 	and.w	r2, r3, #7
 8005a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4422      	add	r2, r4
 8005a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a78:	e106      	b.n	8005c88 <UART_SetConfig+0x4d8>
 8005a7a:	bf00      	nop
 8005a7c:	40011000 	.word	0x40011000
 8005a80:	40011400 	.word	0x40011400
 8005a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a9a:	4642      	mov	r2, r8
 8005a9c:	464b      	mov	r3, r9
 8005a9e:	1891      	adds	r1, r2, r2
 8005aa0:	6239      	str	r1, [r7, #32]
 8005aa2:	415b      	adcs	r3, r3
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aaa:	4641      	mov	r1, r8
 8005aac:	1854      	adds	r4, r2, r1
 8005aae:	4649      	mov	r1, r9
 8005ab0:	eb43 0501 	adc.w	r5, r3, r1
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	00eb      	lsls	r3, r5, #3
 8005abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ac2:	00e2      	lsls	r2, r4, #3
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	4643      	mov	r3, r8
 8005aca:	18e3      	adds	r3, r4, r3
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	eb45 0303 	adc.w	r3, r5, r3
 8005ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005af6:	4629      	mov	r1, r5
 8005af8:	008b      	lsls	r3, r1, #2
 8005afa:	4621      	mov	r1, r4
 8005afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b00:	4621      	mov	r1, r4
 8005b02:	008a      	lsls	r2, r1, #2
 8005b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b08:	f7fb f8be 	bl	8000c88 <__aeabi_uldivmod>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4b60      	ldr	r3, [pc, #384]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005b12:	fba3 2302 	umull	r2, r3, r3, r2
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	011c      	lsls	r4, r3, #4
 8005b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b2c:	4642      	mov	r2, r8
 8005b2e:	464b      	mov	r3, r9
 8005b30:	1891      	adds	r1, r2, r2
 8005b32:	61b9      	str	r1, [r7, #24]
 8005b34:	415b      	adcs	r3, r3
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	1851      	adds	r1, r2, r1
 8005b40:	6139      	str	r1, [r7, #16]
 8005b42:	4649      	mov	r1, r9
 8005b44:	414b      	adcs	r3, r1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b54:	4659      	mov	r1, fp
 8005b56:	00cb      	lsls	r3, r1, #3
 8005b58:	4651      	mov	r1, sl
 8005b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5e:	4651      	mov	r1, sl
 8005b60:	00ca      	lsls	r2, r1, #3
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	4642      	mov	r2, r8
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b70:	464b      	mov	r3, r9
 8005b72:	460a      	mov	r2, r1
 8005b74:	eb42 0303 	adc.w	r3, r2, r3
 8005b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	f04f 0300 	mov.w	r3, #0
 8005b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b94:	4649      	mov	r1, r9
 8005b96:	008b      	lsls	r3, r1, #2
 8005b98:	4641      	mov	r1, r8
 8005b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	008a      	lsls	r2, r1, #2
 8005ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ba6:	f7fb f86f 	bl	8000c88 <__aeabi_uldivmod>
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4b38      	ldr	r3, [pc, #224]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	2264      	movs	r2, #100	; 0x64
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	1acb      	subs	r3, r1, r3
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	3332      	adds	r3, #50	; 0x32
 8005bc4:	4a33      	ldr	r2, [pc, #204]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd0:	441c      	add	r4, r3
 8005bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8005bda:	677a      	str	r2, [r7, #116]	; 0x74
 8005bdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005be0:	4642      	mov	r2, r8
 8005be2:	464b      	mov	r3, r9
 8005be4:	1891      	adds	r1, r2, r2
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	415b      	adcs	r3, r3
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	1851      	adds	r1, r2, r1
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	414b      	adcs	r3, r1
 8005bfa:	607b      	str	r3, [r7, #4]
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c08:	4659      	mov	r1, fp
 8005c0a:	00cb      	lsls	r3, r1, #3
 8005c0c:	4651      	mov	r1, sl
 8005c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c12:	4651      	mov	r1, sl
 8005c14:	00ca      	lsls	r2, r1, #3
 8005c16:	4610      	mov	r0, r2
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c22:	464b      	mov	r3, r9
 8005c24:	460a      	mov	r2, r1
 8005c26:	eb42 0303 	adc.w	r3, r2, r3
 8005c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	663b      	str	r3, [r7, #96]	; 0x60
 8005c36:	667a      	str	r2, [r7, #100]	; 0x64
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c44:	4649      	mov	r1, r9
 8005c46:	008b      	lsls	r3, r1, #2
 8005c48:	4641      	mov	r1, r8
 8005c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c4e:	4641      	mov	r1, r8
 8005c50:	008a      	lsls	r2, r1, #2
 8005c52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c56:	f7fb f817 	bl	8000c88 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005c60:	fba3 1302 	umull	r1, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	2164      	movs	r1, #100	; 0x64
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	3332      	adds	r3, #50	; 0x32
 8005c72:	4a08      	ldr	r2, [pc, #32]	; (8005c94 <UART_SetConfig+0x4e4>)
 8005c74:	fba2 2303 	umull	r2, r3, r2, r3
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4422      	add	r2, r4
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <__cvt>:
 8005c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	ec55 4b10 	vmov	r4, r5, d0
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	460e      	mov	r6, r1
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	bfbb      	ittet	lt
 8005caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cae:	461d      	movlt	r5, r3
 8005cb0:	2300      	movge	r3, #0
 8005cb2:	232d      	movlt	r3, #45	; 0x2d
 8005cb4:	700b      	strb	r3, [r1, #0]
 8005cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	f023 0820 	bic.w	r8, r3, #32
 8005cc2:	bfbc      	itt	lt
 8005cc4:	4622      	movlt	r2, r4
 8005cc6:	4614      	movlt	r4, r2
 8005cc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ccc:	d005      	beq.n	8005cda <__cvt+0x42>
 8005cce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cd2:	d100      	bne.n	8005cd6 <__cvt+0x3e>
 8005cd4:	3601      	adds	r6, #1
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	e000      	b.n	8005cdc <__cvt+0x44>
 8005cda:	2103      	movs	r1, #3
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	ab02      	add	r3, sp, #8
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	ec45 4b10 	vmov	d0, r4, r5
 8005ce8:	4653      	mov	r3, sl
 8005cea:	4632      	mov	r2, r6
 8005cec:	f000 fe68 	bl	80069c0 <_dtoa_r>
 8005cf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	d102      	bne.n	8005cfe <__cvt+0x66>
 8005cf8:	f019 0f01 	tst.w	r9, #1
 8005cfc:	d022      	beq.n	8005d44 <__cvt+0xac>
 8005cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d02:	eb07 0906 	add.w	r9, r7, r6
 8005d06:	d110      	bne.n	8005d2a <__cvt+0x92>
 8005d08:	783b      	ldrb	r3, [r7, #0]
 8005d0a:	2b30      	cmp	r3, #48	; 0x30
 8005d0c:	d10a      	bne.n	8005d24 <__cvt+0x8c>
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2300      	movs	r3, #0
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7fa fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d1a:	b918      	cbnz	r0, 8005d24 <__cvt+0x8c>
 8005d1c:	f1c6 0601 	rsb	r6, r6, #1
 8005d20:	f8ca 6000 	str.w	r6, [sl]
 8005d24:	f8da 3000 	ldr.w	r3, [sl]
 8005d28:	4499      	add	r9, r3
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	4629      	mov	r1, r5
 8005d32:	f7fa fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d36:	b108      	cbz	r0, 8005d3c <__cvt+0xa4>
 8005d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d3c:	2230      	movs	r2, #48	; 0x30
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	454b      	cmp	r3, r9
 8005d42:	d307      	bcc.n	8005d54 <__cvt+0xbc>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d48:	1bdb      	subs	r3, r3, r7
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	b004      	add	sp, #16
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	9103      	str	r1, [sp, #12]
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e7f0      	b.n	8005d3e <__cvt+0xa6>

08005d5c <__exponent>:
 8005d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2900      	cmp	r1, #0
 8005d62:	bfb8      	it	lt
 8005d64:	4249      	neglt	r1, r1
 8005d66:	f803 2b02 	strb.w	r2, [r3], #2
 8005d6a:	bfb4      	ite	lt
 8005d6c:	222d      	movlt	r2, #45	; 0x2d
 8005d6e:	222b      	movge	r2, #43	; 0x2b
 8005d70:	2909      	cmp	r1, #9
 8005d72:	7042      	strb	r2, [r0, #1]
 8005d74:	dd2a      	ble.n	8005dcc <__exponent+0x70>
 8005d76:	f10d 0207 	add.w	r2, sp, #7
 8005d7a:	4617      	mov	r7, r2
 8005d7c:	260a      	movs	r6, #10
 8005d7e:	4694      	mov	ip, r2
 8005d80:	fb91 f5f6 	sdiv	r5, r1, r6
 8005d84:	fb06 1415 	mls	r4, r6, r5, r1
 8005d88:	3430      	adds	r4, #48	; 0x30
 8005d8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005d8e:	460c      	mov	r4, r1
 8005d90:	2c63      	cmp	r4, #99	; 0x63
 8005d92:	f102 32ff 	add.w	r2, r2, #4294967295
 8005d96:	4629      	mov	r1, r5
 8005d98:	dcf1      	bgt.n	8005d7e <__exponent+0x22>
 8005d9a:	3130      	adds	r1, #48	; 0x30
 8005d9c:	f1ac 0402 	sub.w	r4, ip, #2
 8005da0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005da4:	1c41      	adds	r1, r0, #1
 8005da6:	4622      	mov	r2, r4
 8005da8:	42ba      	cmp	r2, r7
 8005daa:	d30a      	bcc.n	8005dc2 <__exponent+0x66>
 8005dac:	f10d 0209 	add.w	r2, sp, #9
 8005db0:	eba2 020c 	sub.w	r2, r2, ip
 8005db4:	42bc      	cmp	r4, r7
 8005db6:	bf88      	it	hi
 8005db8:	2200      	movhi	r2, #0
 8005dba:	4413      	add	r3, r2
 8005dbc:	1a18      	subs	r0, r3, r0
 8005dbe:	b003      	add	sp, #12
 8005dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005dc6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005dca:	e7ed      	b.n	8005da8 <__exponent+0x4c>
 8005dcc:	2330      	movs	r3, #48	; 0x30
 8005dce:	3130      	adds	r1, #48	; 0x30
 8005dd0:	7083      	strb	r3, [r0, #2]
 8005dd2:	70c1      	strb	r1, [r0, #3]
 8005dd4:	1d03      	adds	r3, r0, #4
 8005dd6:	e7f1      	b.n	8005dbc <__exponent+0x60>

08005dd8 <_printf_float>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b02 	vpush	{d8}
 8005de0:	b08d      	sub	sp, #52	; 0x34
 8005de2:	460c      	mov	r4, r1
 8005de4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005de8:	4616      	mov	r6, r2
 8005dea:	461f      	mov	r7, r3
 8005dec:	4605      	mov	r5, r0
 8005dee:	f000 fce7 	bl	80067c0 <_localeconv_r>
 8005df2:	f8d0 a000 	ldr.w	sl, [r0]
 8005df6:	4650      	mov	r0, sl
 8005df8:	f7fa fa3a 	bl	8000270 <strlen>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	9305      	str	r3, [sp, #20]
 8005e04:	f8d8 3000 	ldr.w	r3, [r8]
 8005e08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	f103 0208 	add.w	r2, r3, #8
 8005e16:	f8c8 2000 	str.w	r2, [r8]
 8005e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e22:	9307      	str	r3, [sp, #28]
 8005e24:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e28:	ee08 0a10 	vmov	s16, r0
 8005e2c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e34:	4b9e      	ldr	r3, [pc, #632]	; (80060b0 <_printf_float+0x2d8>)
 8005e36:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3a:	f7fa fe77 	bl	8000b2c <__aeabi_dcmpun>
 8005e3e:	bb88      	cbnz	r0, 8005ea4 <_printf_float+0xcc>
 8005e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e44:	4b9a      	ldr	r3, [pc, #616]	; (80060b0 <_printf_float+0x2d8>)
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	f7fa fe51 	bl	8000af0 <__aeabi_dcmple>
 8005e4e:	bb48      	cbnz	r0, 8005ea4 <_printf_float+0xcc>
 8005e50:	2200      	movs	r2, #0
 8005e52:	2300      	movs	r3, #0
 8005e54:	4640      	mov	r0, r8
 8005e56:	4649      	mov	r1, r9
 8005e58:	f7fa fe40 	bl	8000adc <__aeabi_dcmplt>
 8005e5c:	b110      	cbz	r0, 8005e64 <_printf_float+0x8c>
 8005e5e:	232d      	movs	r3, #45	; 0x2d
 8005e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e64:	4a93      	ldr	r2, [pc, #588]	; (80060b4 <_printf_float+0x2dc>)
 8005e66:	4b94      	ldr	r3, [pc, #592]	; (80060b8 <_printf_float+0x2e0>)
 8005e68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e6c:	bf94      	ite	ls
 8005e6e:	4690      	movls	r8, r2
 8005e70:	4698      	movhi	r8, r3
 8005e72:	2303      	movs	r3, #3
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	9b05      	ldr	r3, [sp, #20]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	9700      	str	r7, [sp, #0]
 8005e84:	4633      	mov	r3, r6
 8005e86:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 f9da 	bl	8006244 <_printf_common>
 8005e90:	3001      	adds	r0, #1
 8005e92:	f040 8090 	bne.w	8005fb6 <_printf_float+0x1de>
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9a:	b00d      	add	sp, #52	; 0x34
 8005e9c:	ecbd 8b02 	vpop	{d8}
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	4649      	mov	r1, r9
 8005eac:	f7fa fe3e 	bl	8000b2c <__aeabi_dcmpun>
 8005eb0:	b140      	cbz	r0, 8005ec4 <_printf_float+0xec>
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfbc      	itt	lt
 8005eb8:	232d      	movlt	r3, #45	; 0x2d
 8005eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ebe:	4a7f      	ldr	r2, [pc, #508]	; (80060bc <_printf_float+0x2e4>)
 8005ec0:	4b7f      	ldr	r3, [pc, #508]	; (80060c0 <_printf_float+0x2e8>)
 8005ec2:	e7d1      	b.n	8005e68 <_printf_float+0x90>
 8005ec4:	6863      	ldr	r3, [r4, #4]
 8005ec6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005eca:	9206      	str	r2, [sp, #24]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	d13f      	bne.n	8005f50 <_printf_float+0x178>
 8005ed0:	2306      	movs	r3, #6
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	9b05      	ldr	r3, [sp, #20]
 8005ed6:	6861      	ldr	r1, [r4, #4]
 8005ed8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005edc:	2300      	movs	r3, #0
 8005ede:	9303      	str	r3, [sp, #12]
 8005ee0:	ab0a      	add	r3, sp, #40	; 0x28
 8005ee2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005ee6:	ab09      	add	r3, sp, #36	; 0x24
 8005ee8:	ec49 8b10 	vmov	d0, r8, r9
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	6022      	str	r2, [r4, #0]
 8005ef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	f7ff fecf 	bl	8005c98 <__cvt>
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005efe:	2b47      	cmp	r3, #71	; 0x47
 8005f00:	4680      	mov	r8, r0
 8005f02:	d108      	bne.n	8005f16 <_printf_float+0x13e>
 8005f04:	1cc8      	adds	r0, r1, #3
 8005f06:	db02      	blt.n	8005f0e <_printf_float+0x136>
 8005f08:	6863      	ldr	r3, [r4, #4]
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	dd41      	ble.n	8005f92 <_printf_float+0x1ba>
 8005f0e:	f1ab 0302 	sub.w	r3, fp, #2
 8005f12:	fa5f fb83 	uxtb.w	fp, r3
 8005f16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f1a:	d820      	bhi.n	8005f5e <_printf_float+0x186>
 8005f1c:	3901      	subs	r1, #1
 8005f1e:	465a      	mov	r2, fp
 8005f20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f24:	9109      	str	r1, [sp, #36]	; 0x24
 8005f26:	f7ff ff19 	bl	8005d5c <__exponent>
 8005f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f2c:	1813      	adds	r3, r2, r0
 8005f2e:	2a01      	cmp	r2, #1
 8005f30:	4681      	mov	r9, r0
 8005f32:	6123      	str	r3, [r4, #16]
 8005f34:	dc02      	bgt.n	8005f3c <_printf_float+0x164>
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	07d2      	lsls	r2, r2, #31
 8005f3a:	d501      	bpl.n	8005f40 <_printf_float+0x168>
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d09c      	beq.n	8005e82 <_printf_float+0xaa>
 8005f48:	232d      	movs	r3, #45	; 0x2d
 8005f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4e:	e798      	b.n	8005e82 <_printf_float+0xaa>
 8005f50:	9a06      	ldr	r2, [sp, #24]
 8005f52:	2a47      	cmp	r2, #71	; 0x47
 8005f54:	d1be      	bne.n	8005ed4 <_printf_float+0xfc>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1bc      	bne.n	8005ed4 <_printf_float+0xfc>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e7b9      	b.n	8005ed2 <_printf_float+0xfa>
 8005f5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f62:	d118      	bne.n	8005f96 <_printf_float+0x1be>
 8005f64:	2900      	cmp	r1, #0
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	dd0b      	ble.n	8005f82 <_printf_float+0x1aa>
 8005f6a:	6121      	str	r1, [r4, #16]
 8005f6c:	b913      	cbnz	r3, 8005f74 <_printf_float+0x19c>
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	07d0      	lsls	r0, r2, #31
 8005f72:	d502      	bpl.n	8005f7a <_printf_float+0x1a2>
 8005f74:	3301      	adds	r3, #1
 8005f76:	440b      	add	r3, r1
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f7c:	f04f 0900 	mov.w	r9, #0
 8005f80:	e7de      	b.n	8005f40 <_printf_float+0x168>
 8005f82:	b913      	cbnz	r3, 8005f8a <_printf_float+0x1b2>
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	07d2      	lsls	r2, r2, #31
 8005f88:	d501      	bpl.n	8005f8e <_printf_float+0x1b6>
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	e7f4      	b.n	8005f78 <_printf_float+0x1a0>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7f2      	b.n	8005f78 <_printf_float+0x1a0>
 8005f92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	db05      	blt.n	8005fa8 <_printf_float+0x1d0>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	6121      	str	r1, [r4, #16]
 8005fa0:	07d8      	lsls	r0, r3, #31
 8005fa2:	d5ea      	bpl.n	8005f7a <_printf_float+0x1a2>
 8005fa4:	1c4b      	adds	r3, r1, #1
 8005fa6:	e7e7      	b.n	8005f78 <_printf_float+0x1a0>
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	bfd4      	ite	le
 8005fac:	f1c1 0202 	rsble	r2, r1, #2
 8005fb0:	2201      	movgt	r2, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	e7e0      	b.n	8005f78 <_printf_float+0x1a0>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	055a      	lsls	r2, r3, #21
 8005fba:	d407      	bmi.n	8005fcc <_printf_float+0x1f4>
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d12c      	bne.n	8006024 <_printf_float+0x24c>
 8005fca:	e764      	b.n	8005e96 <_printf_float+0xbe>
 8005fcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fd0:	f240 80e0 	bls.w	8006194 <_printf_float+0x3bc>
 8005fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f7fa fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d034      	beq.n	800604e <_printf_float+0x276>
 8005fe4:	4a37      	ldr	r2, [pc, #220]	; (80060c4 <_printf_float+0x2ec>)
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af51 	beq.w	8005e96 <_printf_float+0xbe>
 8005ff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	db02      	blt.n	8006002 <_printf_float+0x22a>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	07d8      	lsls	r0, r3, #31
 8006000:	d510      	bpl.n	8006024 <_printf_float+0x24c>
 8006002:	ee18 3a10 	vmov	r3, s16
 8006006:	4652      	mov	r2, sl
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f af41 	beq.w	8005e96 <_printf_float+0xbe>
 8006014:	f04f 0800 	mov.w	r8, #0
 8006018:	f104 091a 	add.w	r9, r4, #26
 800601c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800601e:	3b01      	subs	r3, #1
 8006020:	4543      	cmp	r3, r8
 8006022:	dc09      	bgt.n	8006038 <_printf_float+0x260>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	079b      	lsls	r3, r3, #30
 8006028:	f100 8107 	bmi.w	800623a <_printf_float+0x462>
 800602c:	68e0      	ldr	r0, [r4, #12]
 800602e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006030:	4298      	cmp	r0, r3
 8006032:	bfb8      	it	lt
 8006034:	4618      	movlt	r0, r3
 8006036:	e730      	b.n	8005e9a <_printf_float+0xc2>
 8006038:	2301      	movs	r3, #1
 800603a:	464a      	mov	r2, r9
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	f43f af27 	beq.w	8005e96 <_printf_float+0xbe>
 8006048:	f108 0801 	add.w	r8, r8, #1
 800604c:	e7e6      	b.n	800601c <_printf_float+0x244>
 800604e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006050:	2b00      	cmp	r3, #0
 8006052:	dc39      	bgt.n	80060c8 <_printf_float+0x2f0>
 8006054:	4a1b      	ldr	r2, [pc, #108]	; (80060c4 <_printf_float+0x2ec>)
 8006056:	2301      	movs	r3, #1
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	f43f af19 	beq.w	8005e96 <_printf_float+0xbe>
 8006064:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006068:	4313      	orrs	r3, r2
 800606a:	d102      	bne.n	8006072 <_printf_float+0x29a>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	d5d8      	bpl.n	8006024 <_printf_float+0x24c>
 8006072:	ee18 3a10 	vmov	r3, s16
 8006076:	4652      	mov	r2, sl
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f af09 	beq.w	8005e96 <_printf_float+0xbe>
 8006084:	f04f 0900 	mov.w	r9, #0
 8006088:	f104 0a1a 	add.w	sl, r4, #26
 800608c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608e:	425b      	negs	r3, r3
 8006090:	454b      	cmp	r3, r9
 8006092:	dc01      	bgt.n	8006098 <_printf_float+0x2c0>
 8006094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006096:	e792      	b.n	8005fbe <_printf_float+0x1e6>
 8006098:	2301      	movs	r3, #1
 800609a:	4652      	mov	r2, sl
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f aef7 	beq.w	8005e96 <_printf_float+0xbe>
 80060a8:	f109 0901 	add.w	r9, r9, #1
 80060ac:	e7ee      	b.n	800608c <_printf_float+0x2b4>
 80060ae:	bf00      	nop
 80060b0:	7fefffff 	.word	0x7fefffff
 80060b4:	0800a604 	.word	0x0800a604
 80060b8:	0800a608 	.word	0x0800a608
 80060bc:	0800a60c 	.word	0x0800a60c
 80060c0:	0800a610 	.word	0x0800a610
 80060c4:	0800a614 	.word	0x0800a614
 80060c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060cc:	429a      	cmp	r2, r3
 80060ce:	bfa8      	it	ge
 80060d0:	461a      	movge	r2, r3
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	4691      	mov	r9, r2
 80060d6:	dc37      	bgt.n	8006148 <_printf_float+0x370>
 80060d8:	f04f 0b00 	mov.w	fp, #0
 80060dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060e0:	f104 021a 	add.w	r2, r4, #26
 80060e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	eba3 0309 	sub.w	r3, r3, r9
 80060ec:	455b      	cmp	r3, fp
 80060ee:	dc33      	bgt.n	8006158 <_printf_float+0x380>
 80060f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060f4:	429a      	cmp	r2, r3
 80060f6:	db3b      	blt.n	8006170 <_printf_float+0x398>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07da      	lsls	r2, r3, #31
 80060fc:	d438      	bmi.n	8006170 <_printf_float+0x398>
 80060fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006102:	eba2 0903 	sub.w	r9, r2, r3
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	4591      	cmp	r9, r2
 800610c:	bfa8      	it	ge
 800610e:	4691      	movge	r9, r2
 8006110:	f1b9 0f00 	cmp.w	r9, #0
 8006114:	dc35      	bgt.n	8006182 <_printf_float+0x3aa>
 8006116:	f04f 0800 	mov.w	r8, #0
 800611a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800611e:	f104 0a1a 	add.w	sl, r4, #26
 8006122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	eba3 0309 	sub.w	r3, r3, r9
 800612c:	4543      	cmp	r3, r8
 800612e:	f77f af79 	ble.w	8006024 <_printf_float+0x24c>
 8006132:	2301      	movs	r3, #1
 8006134:	4652      	mov	r2, sl
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f aeaa 	beq.w	8005e96 <_printf_float+0xbe>
 8006142:	f108 0801 	add.w	r8, r8, #1
 8006146:	e7ec      	b.n	8006122 <_printf_float+0x34a>
 8006148:	4613      	mov	r3, r2
 800614a:	4631      	mov	r1, r6
 800614c:	4642      	mov	r2, r8
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	d1c0      	bne.n	80060d8 <_printf_float+0x300>
 8006156:	e69e      	b.n	8005e96 <_printf_float+0xbe>
 8006158:	2301      	movs	r3, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	9205      	str	r2, [sp, #20]
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f ae97 	beq.w	8005e96 <_printf_float+0xbe>
 8006168:	9a05      	ldr	r2, [sp, #20]
 800616a:	f10b 0b01 	add.w	fp, fp, #1
 800616e:	e7b9      	b.n	80060e4 <_printf_float+0x30c>
 8006170:	ee18 3a10 	vmov	r3, s16
 8006174:	4652      	mov	r2, sl
 8006176:	4631      	mov	r1, r6
 8006178:	4628      	mov	r0, r5
 800617a:	47b8      	blx	r7
 800617c:	3001      	adds	r0, #1
 800617e:	d1be      	bne.n	80060fe <_printf_float+0x326>
 8006180:	e689      	b.n	8005e96 <_printf_float+0xbe>
 8006182:	9a05      	ldr	r2, [sp, #20]
 8006184:	464b      	mov	r3, r9
 8006186:	4442      	add	r2, r8
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	d1c1      	bne.n	8006116 <_printf_float+0x33e>
 8006192:	e680      	b.n	8005e96 <_printf_float+0xbe>
 8006194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006196:	2a01      	cmp	r2, #1
 8006198:	dc01      	bgt.n	800619e <_printf_float+0x3c6>
 800619a:	07db      	lsls	r3, r3, #31
 800619c:	d53a      	bpl.n	8006214 <_printf_float+0x43c>
 800619e:	2301      	movs	r3, #1
 80061a0:	4642      	mov	r2, r8
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b8      	blx	r7
 80061a8:	3001      	adds	r0, #1
 80061aa:	f43f ae74 	beq.w	8005e96 <_printf_float+0xbe>
 80061ae:	ee18 3a10 	vmov	r3, s16
 80061b2:	4652      	mov	r2, sl
 80061b4:	4631      	mov	r1, r6
 80061b6:	4628      	mov	r0, r5
 80061b8:	47b8      	blx	r7
 80061ba:	3001      	adds	r0, #1
 80061bc:	f43f ae6b 	beq.w	8005e96 <_printf_float+0xbe>
 80061c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061c4:	2200      	movs	r2, #0
 80061c6:	2300      	movs	r3, #0
 80061c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80061cc:	f7fa fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d0:	b9d8      	cbnz	r0, 800620a <_printf_float+0x432>
 80061d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80061d6:	f108 0201 	add.w	r2, r8, #1
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	d10e      	bne.n	8006202 <_printf_float+0x42a>
 80061e4:	e657      	b.n	8005e96 <_printf_float+0xbe>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4652      	mov	r2, sl
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f ae50 	beq.w	8005e96 <_printf_float+0xbe>
 80061f6:	f108 0801 	add.w	r8, r8, #1
 80061fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4543      	cmp	r3, r8
 8006200:	dcf1      	bgt.n	80061e6 <_printf_float+0x40e>
 8006202:	464b      	mov	r3, r9
 8006204:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006208:	e6da      	b.n	8005fc0 <_printf_float+0x1e8>
 800620a:	f04f 0800 	mov.w	r8, #0
 800620e:	f104 0a1a 	add.w	sl, r4, #26
 8006212:	e7f2      	b.n	80061fa <_printf_float+0x422>
 8006214:	2301      	movs	r3, #1
 8006216:	4642      	mov	r2, r8
 8006218:	e7df      	b.n	80061da <_printf_float+0x402>
 800621a:	2301      	movs	r3, #1
 800621c:	464a      	mov	r2, r9
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	f43f ae36 	beq.w	8005e96 <_printf_float+0xbe>
 800622a:	f108 0801 	add.w	r8, r8, #1
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006232:	1a5b      	subs	r3, r3, r1
 8006234:	4543      	cmp	r3, r8
 8006236:	dcf0      	bgt.n	800621a <_printf_float+0x442>
 8006238:	e6f8      	b.n	800602c <_printf_float+0x254>
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	f104 0919 	add.w	r9, r4, #25
 8006242:	e7f4      	b.n	800622e <_printf_float+0x456>

08006244 <_printf_common>:
 8006244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	4616      	mov	r6, r2
 800624a:	4699      	mov	r9, r3
 800624c:	688a      	ldr	r2, [r1, #8]
 800624e:	690b      	ldr	r3, [r1, #16]
 8006250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006254:	4293      	cmp	r3, r2
 8006256:	bfb8      	it	lt
 8006258:	4613      	movlt	r3, r2
 800625a:	6033      	str	r3, [r6, #0]
 800625c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006260:	4607      	mov	r7, r0
 8006262:	460c      	mov	r4, r1
 8006264:	b10a      	cbz	r2, 800626a <_printf_common+0x26>
 8006266:	3301      	adds	r3, #1
 8006268:	6033      	str	r3, [r6, #0]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	0699      	lsls	r1, r3, #26
 800626e:	bf42      	ittt	mi
 8006270:	6833      	ldrmi	r3, [r6, #0]
 8006272:	3302      	addmi	r3, #2
 8006274:	6033      	strmi	r3, [r6, #0]
 8006276:	6825      	ldr	r5, [r4, #0]
 8006278:	f015 0506 	ands.w	r5, r5, #6
 800627c:	d106      	bne.n	800628c <_printf_common+0x48>
 800627e:	f104 0a19 	add.w	sl, r4, #25
 8006282:	68e3      	ldr	r3, [r4, #12]
 8006284:	6832      	ldr	r2, [r6, #0]
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	42ab      	cmp	r3, r5
 800628a:	dc26      	bgt.n	80062da <_printf_common+0x96>
 800628c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006290:	1e13      	subs	r3, r2, #0
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	bf18      	it	ne
 8006296:	2301      	movne	r3, #1
 8006298:	0692      	lsls	r2, r2, #26
 800629a:	d42b      	bmi.n	80062f4 <_printf_common+0xb0>
 800629c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a0:	4649      	mov	r1, r9
 80062a2:	4638      	mov	r0, r7
 80062a4:	47c0      	blx	r8
 80062a6:	3001      	adds	r0, #1
 80062a8:	d01e      	beq.n	80062e8 <_printf_common+0xa4>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	6922      	ldr	r2, [r4, #16]
 80062ae:	f003 0306 	and.w	r3, r3, #6
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	bf02      	ittt	eq
 80062b6:	68e5      	ldreq	r5, [r4, #12]
 80062b8:	6833      	ldreq	r3, [r6, #0]
 80062ba:	1aed      	subeq	r5, r5, r3
 80062bc:	68a3      	ldr	r3, [r4, #8]
 80062be:	bf0c      	ite	eq
 80062c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062c4:	2500      	movne	r5, #0
 80062c6:	4293      	cmp	r3, r2
 80062c8:	bfc4      	itt	gt
 80062ca:	1a9b      	subgt	r3, r3, r2
 80062cc:	18ed      	addgt	r5, r5, r3
 80062ce:	2600      	movs	r6, #0
 80062d0:	341a      	adds	r4, #26
 80062d2:	42b5      	cmp	r5, r6
 80062d4:	d11a      	bne.n	800630c <_printf_common+0xc8>
 80062d6:	2000      	movs	r0, #0
 80062d8:	e008      	b.n	80062ec <_printf_common+0xa8>
 80062da:	2301      	movs	r3, #1
 80062dc:	4652      	mov	r2, sl
 80062de:	4649      	mov	r1, r9
 80062e0:	4638      	mov	r0, r7
 80062e2:	47c0      	blx	r8
 80062e4:	3001      	adds	r0, #1
 80062e6:	d103      	bne.n	80062f0 <_printf_common+0xac>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f0:	3501      	adds	r5, #1
 80062f2:	e7c6      	b.n	8006282 <_printf_common+0x3e>
 80062f4:	18e1      	adds	r1, r4, r3
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	2030      	movs	r0, #48	; 0x30
 80062fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062fe:	4422      	add	r2, r4
 8006300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006308:	3302      	adds	r3, #2
 800630a:	e7c7      	b.n	800629c <_printf_common+0x58>
 800630c:	2301      	movs	r3, #1
 800630e:	4622      	mov	r2, r4
 8006310:	4649      	mov	r1, r9
 8006312:	4638      	mov	r0, r7
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d0e6      	beq.n	80062e8 <_printf_common+0xa4>
 800631a:	3601      	adds	r6, #1
 800631c:	e7d9      	b.n	80062d2 <_printf_common+0x8e>
	...

08006320 <_printf_i>:
 8006320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	7e0f      	ldrb	r7, [r1, #24]
 8006326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006328:	2f78      	cmp	r7, #120	; 0x78
 800632a:	4691      	mov	r9, r2
 800632c:	4680      	mov	r8, r0
 800632e:	460c      	mov	r4, r1
 8006330:	469a      	mov	sl, r3
 8006332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006336:	d807      	bhi.n	8006348 <_printf_i+0x28>
 8006338:	2f62      	cmp	r7, #98	; 0x62
 800633a:	d80a      	bhi.n	8006352 <_printf_i+0x32>
 800633c:	2f00      	cmp	r7, #0
 800633e:	f000 80d4 	beq.w	80064ea <_printf_i+0x1ca>
 8006342:	2f58      	cmp	r7, #88	; 0x58
 8006344:	f000 80c0 	beq.w	80064c8 <_printf_i+0x1a8>
 8006348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006350:	e03a      	b.n	80063c8 <_printf_i+0xa8>
 8006352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006356:	2b15      	cmp	r3, #21
 8006358:	d8f6      	bhi.n	8006348 <_printf_i+0x28>
 800635a:	a101      	add	r1, pc, #4	; (adr r1, 8006360 <_printf_i+0x40>)
 800635c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006360:	080063b9 	.word	0x080063b9
 8006364:	080063cd 	.word	0x080063cd
 8006368:	08006349 	.word	0x08006349
 800636c:	08006349 	.word	0x08006349
 8006370:	08006349 	.word	0x08006349
 8006374:	08006349 	.word	0x08006349
 8006378:	080063cd 	.word	0x080063cd
 800637c:	08006349 	.word	0x08006349
 8006380:	08006349 	.word	0x08006349
 8006384:	08006349 	.word	0x08006349
 8006388:	08006349 	.word	0x08006349
 800638c:	080064d1 	.word	0x080064d1
 8006390:	080063f9 	.word	0x080063f9
 8006394:	0800648b 	.word	0x0800648b
 8006398:	08006349 	.word	0x08006349
 800639c:	08006349 	.word	0x08006349
 80063a0:	080064f3 	.word	0x080064f3
 80063a4:	08006349 	.word	0x08006349
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	08006349 	.word	0x08006349
 80063b0:	08006349 	.word	0x08006349
 80063b4:	08006493 	.word	0x08006493
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	1d1a      	adds	r2, r3, #4
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	602a      	str	r2, [r5, #0]
 80063c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063c8:	2301      	movs	r3, #1
 80063ca:	e09f      	b.n	800650c <_printf_i+0x1ec>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	682b      	ldr	r3, [r5, #0]
 80063d0:	0607      	lsls	r7, r0, #24
 80063d2:	f103 0104 	add.w	r1, r3, #4
 80063d6:	6029      	str	r1, [r5, #0]
 80063d8:	d501      	bpl.n	80063de <_printf_i+0xbe>
 80063da:	681e      	ldr	r6, [r3, #0]
 80063dc:	e003      	b.n	80063e6 <_printf_i+0xc6>
 80063de:	0646      	lsls	r6, r0, #25
 80063e0:	d5fb      	bpl.n	80063da <_printf_i+0xba>
 80063e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	da03      	bge.n	80063f2 <_printf_i+0xd2>
 80063ea:	232d      	movs	r3, #45	; 0x2d
 80063ec:	4276      	negs	r6, r6
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f2:	485a      	ldr	r0, [pc, #360]	; (800655c <_printf_i+0x23c>)
 80063f4:	230a      	movs	r3, #10
 80063f6:	e012      	b.n	800641e <_printf_i+0xfe>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	6820      	ldr	r0, [r4, #0]
 80063fc:	1d19      	adds	r1, r3, #4
 80063fe:	6029      	str	r1, [r5, #0]
 8006400:	0605      	lsls	r5, r0, #24
 8006402:	d501      	bpl.n	8006408 <_printf_i+0xe8>
 8006404:	681e      	ldr	r6, [r3, #0]
 8006406:	e002      	b.n	800640e <_printf_i+0xee>
 8006408:	0641      	lsls	r1, r0, #25
 800640a:	d5fb      	bpl.n	8006404 <_printf_i+0xe4>
 800640c:	881e      	ldrh	r6, [r3, #0]
 800640e:	4853      	ldr	r0, [pc, #332]	; (800655c <_printf_i+0x23c>)
 8006410:	2f6f      	cmp	r7, #111	; 0x6f
 8006412:	bf0c      	ite	eq
 8006414:	2308      	moveq	r3, #8
 8006416:	230a      	movne	r3, #10
 8006418:	2100      	movs	r1, #0
 800641a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800641e:	6865      	ldr	r5, [r4, #4]
 8006420:	60a5      	str	r5, [r4, #8]
 8006422:	2d00      	cmp	r5, #0
 8006424:	bfa2      	ittt	ge
 8006426:	6821      	ldrge	r1, [r4, #0]
 8006428:	f021 0104 	bicge.w	r1, r1, #4
 800642c:	6021      	strge	r1, [r4, #0]
 800642e:	b90e      	cbnz	r6, 8006434 <_printf_i+0x114>
 8006430:	2d00      	cmp	r5, #0
 8006432:	d04b      	beq.n	80064cc <_printf_i+0x1ac>
 8006434:	4615      	mov	r5, r2
 8006436:	fbb6 f1f3 	udiv	r1, r6, r3
 800643a:	fb03 6711 	mls	r7, r3, r1, r6
 800643e:	5dc7      	ldrb	r7, [r0, r7]
 8006440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006444:	4637      	mov	r7, r6
 8006446:	42bb      	cmp	r3, r7
 8006448:	460e      	mov	r6, r1
 800644a:	d9f4      	bls.n	8006436 <_printf_i+0x116>
 800644c:	2b08      	cmp	r3, #8
 800644e:	d10b      	bne.n	8006468 <_printf_i+0x148>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	07de      	lsls	r6, r3, #31
 8006454:	d508      	bpl.n	8006468 <_printf_i+0x148>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6861      	ldr	r1, [r4, #4]
 800645a:	4299      	cmp	r1, r3
 800645c:	bfde      	ittt	le
 800645e:	2330      	movle	r3, #48	; 0x30
 8006460:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006464:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006468:	1b52      	subs	r2, r2, r5
 800646a:	6122      	str	r2, [r4, #16]
 800646c:	f8cd a000 	str.w	sl, [sp]
 8006470:	464b      	mov	r3, r9
 8006472:	aa03      	add	r2, sp, #12
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f7ff fee4 	bl	8006244 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	d14a      	bne.n	8006516 <_printf_i+0x1f6>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b004      	add	sp, #16
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f043 0320 	orr.w	r3, r3, #32
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	4833      	ldr	r0, [pc, #204]	; (8006560 <_printf_i+0x240>)
 8006494:	2778      	movs	r7, #120	; 0x78
 8006496:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	6829      	ldr	r1, [r5, #0]
 800649e:	061f      	lsls	r7, r3, #24
 80064a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064a4:	d402      	bmi.n	80064ac <_printf_i+0x18c>
 80064a6:	065f      	lsls	r7, r3, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2b6      	uxthmi	r6, r6
 80064ac:	07df      	lsls	r7, r3, #31
 80064ae:	bf48      	it	mi
 80064b0:	f043 0320 	orrmi.w	r3, r3, #32
 80064b4:	6029      	str	r1, [r5, #0]
 80064b6:	bf48      	it	mi
 80064b8:	6023      	strmi	r3, [r4, #0]
 80064ba:	b91e      	cbnz	r6, 80064c4 <_printf_i+0x1a4>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	f023 0320 	bic.w	r3, r3, #32
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	2310      	movs	r3, #16
 80064c6:	e7a7      	b.n	8006418 <_printf_i+0xf8>
 80064c8:	4824      	ldr	r0, [pc, #144]	; (800655c <_printf_i+0x23c>)
 80064ca:	e7e4      	b.n	8006496 <_printf_i+0x176>
 80064cc:	4615      	mov	r5, r2
 80064ce:	e7bd      	b.n	800644c <_printf_i+0x12c>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	6826      	ldr	r6, [r4, #0]
 80064d4:	6961      	ldr	r1, [r4, #20]
 80064d6:	1d18      	adds	r0, r3, #4
 80064d8:	6028      	str	r0, [r5, #0]
 80064da:	0635      	lsls	r5, r6, #24
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0x1c4>
 80064e0:	6019      	str	r1, [r3, #0]
 80064e2:	e002      	b.n	80064ea <_printf_i+0x1ca>
 80064e4:	0670      	lsls	r0, r6, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0x1c0>
 80064e8:	8019      	strh	r1, [r3, #0]
 80064ea:	2300      	movs	r3, #0
 80064ec:	6123      	str	r3, [r4, #16]
 80064ee:	4615      	mov	r5, r2
 80064f0:	e7bc      	b.n	800646c <_printf_i+0x14c>
 80064f2:	682b      	ldr	r3, [r5, #0]
 80064f4:	1d1a      	adds	r2, r3, #4
 80064f6:	602a      	str	r2, [r5, #0]
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	6862      	ldr	r2, [r4, #4]
 80064fc:	2100      	movs	r1, #0
 80064fe:	4628      	mov	r0, r5
 8006500:	f7f9 fe66 	bl	80001d0 <memchr>
 8006504:	b108      	cbz	r0, 800650a <_printf_i+0x1ea>
 8006506:	1b40      	subs	r0, r0, r5
 8006508:	6060      	str	r0, [r4, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	6123      	str	r3, [r4, #16]
 800650e:	2300      	movs	r3, #0
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006514:	e7aa      	b.n	800646c <_printf_i+0x14c>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	462a      	mov	r2, r5
 800651a:	4649      	mov	r1, r9
 800651c:	4640      	mov	r0, r8
 800651e:	47d0      	blx	sl
 8006520:	3001      	adds	r0, #1
 8006522:	d0ad      	beq.n	8006480 <_printf_i+0x160>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	079b      	lsls	r3, r3, #30
 8006528:	d413      	bmi.n	8006552 <_printf_i+0x232>
 800652a:	68e0      	ldr	r0, [r4, #12]
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	4298      	cmp	r0, r3
 8006530:	bfb8      	it	lt
 8006532:	4618      	movlt	r0, r3
 8006534:	e7a6      	b.n	8006484 <_printf_i+0x164>
 8006536:	2301      	movs	r3, #1
 8006538:	4632      	mov	r2, r6
 800653a:	4649      	mov	r1, r9
 800653c:	4640      	mov	r0, r8
 800653e:	47d0      	blx	sl
 8006540:	3001      	adds	r0, #1
 8006542:	d09d      	beq.n	8006480 <_printf_i+0x160>
 8006544:	3501      	adds	r5, #1
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	9903      	ldr	r1, [sp, #12]
 800654a:	1a5b      	subs	r3, r3, r1
 800654c:	42ab      	cmp	r3, r5
 800654e:	dcf2      	bgt.n	8006536 <_printf_i+0x216>
 8006550:	e7eb      	b.n	800652a <_printf_i+0x20a>
 8006552:	2500      	movs	r5, #0
 8006554:	f104 0619 	add.w	r6, r4, #25
 8006558:	e7f5      	b.n	8006546 <_printf_i+0x226>
 800655a:	bf00      	nop
 800655c:	0800a616 	.word	0x0800a616
 8006560:	0800a627 	.word	0x0800a627

08006564 <std>:
 8006564:	2300      	movs	r3, #0
 8006566:	b510      	push	{r4, lr}
 8006568:	4604      	mov	r4, r0
 800656a:	e9c0 3300 	strd	r3, r3, [r0]
 800656e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006572:	6083      	str	r3, [r0, #8]
 8006574:	8181      	strh	r1, [r0, #12]
 8006576:	6643      	str	r3, [r0, #100]	; 0x64
 8006578:	81c2      	strh	r2, [r0, #14]
 800657a:	6183      	str	r3, [r0, #24]
 800657c:	4619      	mov	r1, r3
 800657e:	2208      	movs	r2, #8
 8006580:	305c      	adds	r0, #92	; 0x5c
 8006582:	f000 f914 	bl	80067ae <memset>
 8006586:	4b0d      	ldr	r3, [pc, #52]	; (80065bc <std+0x58>)
 8006588:	6263      	str	r3, [r4, #36]	; 0x24
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <std+0x5c>)
 800658c:	62a3      	str	r3, [r4, #40]	; 0x28
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <std+0x60>)
 8006590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006592:	4b0d      	ldr	r3, [pc, #52]	; (80065c8 <std+0x64>)
 8006594:	6323      	str	r3, [r4, #48]	; 0x30
 8006596:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <std+0x68>)
 8006598:	6224      	str	r4, [r4, #32]
 800659a:	429c      	cmp	r4, r3
 800659c:	d006      	beq.n	80065ac <std+0x48>
 800659e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065a2:	4294      	cmp	r4, r2
 80065a4:	d002      	beq.n	80065ac <std+0x48>
 80065a6:	33d0      	adds	r3, #208	; 0xd0
 80065a8:	429c      	cmp	r4, r3
 80065aa:	d105      	bne.n	80065b8 <std+0x54>
 80065ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b4:	f000 b978 	b.w	80068a8 <__retarget_lock_init_recursive>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	bf00      	nop
 80065bc:	08006729 	.word	0x08006729
 80065c0:	0800674b 	.word	0x0800674b
 80065c4:	08006783 	.word	0x08006783
 80065c8:	080067a7 	.word	0x080067a7
 80065cc:	20000798 	.word	0x20000798

080065d0 <stdio_exit_handler>:
 80065d0:	4a02      	ldr	r2, [pc, #8]	; (80065dc <stdio_exit_handler+0xc>)
 80065d2:	4903      	ldr	r1, [pc, #12]	; (80065e0 <stdio_exit_handler+0x10>)
 80065d4:	4803      	ldr	r0, [pc, #12]	; (80065e4 <stdio_exit_handler+0x14>)
 80065d6:	f000 b869 	b.w	80066ac <_fwalk_sglue>
 80065da:	bf00      	nop
 80065dc:	20000014 	.word	0x20000014
 80065e0:	08008259 	.word	0x08008259
 80065e4:	20000020 	.word	0x20000020

080065e8 <cleanup_stdio>:
 80065e8:	6841      	ldr	r1, [r0, #4]
 80065ea:	4b0c      	ldr	r3, [pc, #48]	; (800661c <cleanup_stdio+0x34>)
 80065ec:	4299      	cmp	r1, r3
 80065ee:	b510      	push	{r4, lr}
 80065f0:	4604      	mov	r4, r0
 80065f2:	d001      	beq.n	80065f8 <cleanup_stdio+0x10>
 80065f4:	f001 fe30 	bl	8008258 <_fflush_r>
 80065f8:	68a1      	ldr	r1, [r4, #8]
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <cleanup_stdio+0x38>)
 80065fc:	4299      	cmp	r1, r3
 80065fe:	d002      	beq.n	8006606 <cleanup_stdio+0x1e>
 8006600:	4620      	mov	r0, r4
 8006602:	f001 fe29 	bl	8008258 <_fflush_r>
 8006606:	68e1      	ldr	r1, [r4, #12]
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <cleanup_stdio+0x3c>)
 800660a:	4299      	cmp	r1, r3
 800660c:	d004      	beq.n	8006618 <cleanup_stdio+0x30>
 800660e:	4620      	mov	r0, r4
 8006610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006614:	f001 be20 	b.w	8008258 <_fflush_r>
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	20000798 	.word	0x20000798
 8006620:	20000800 	.word	0x20000800
 8006624:	20000868 	.word	0x20000868

08006628 <global_stdio_init.part.0>:
 8006628:	b510      	push	{r4, lr}
 800662a:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <global_stdio_init.part.0+0x30>)
 800662c:	4c0b      	ldr	r4, [pc, #44]	; (800665c <global_stdio_init.part.0+0x34>)
 800662e:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <global_stdio_init.part.0+0x38>)
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	4620      	mov	r0, r4
 8006634:	2200      	movs	r2, #0
 8006636:	2104      	movs	r1, #4
 8006638:	f7ff ff94 	bl	8006564 <std>
 800663c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006640:	2201      	movs	r2, #1
 8006642:	2109      	movs	r1, #9
 8006644:	f7ff ff8e 	bl	8006564 <std>
 8006648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800664c:	2202      	movs	r2, #2
 800664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006652:	2112      	movs	r1, #18
 8006654:	f7ff bf86 	b.w	8006564 <std>
 8006658:	200008d0 	.word	0x200008d0
 800665c:	20000798 	.word	0x20000798
 8006660:	080065d1 	.word	0x080065d1

08006664 <__sfp_lock_acquire>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sfp_lock_acquire+0x8>)
 8006666:	f000 b920 	b.w	80068aa <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	200008d9 	.word	0x200008d9

08006670 <__sfp_lock_release>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__sfp_lock_release+0x8>)
 8006672:	f000 b91b 	b.w	80068ac <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	200008d9 	.word	0x200008d9

0800667c <__sinit>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4604      	mov	r4, r0
 8006680:	f7ff fff0 	bl	8006664 <__sfp_lock_acquire>
 8006684:	6a23      	ldr	r3, [r4, #32]
 8006686:	b11b      	cbz	r3, 8006690 <__sinit+0x14>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bff0 	b.w	8006670 <__sfp_lock_release>
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <__sinit+0x28>)
 8006692:	6223      	str	r3, [r4, #32]
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <__sinit+0x2c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f5      	bne.n	8006688 <__sinit+0xc>
 800669c:	f7ff ffc4 	bl	8006628 <global_stdio_init.part.0>
 80066a0:	e7f2      	b.n	8006688 <__sinit+0xc>
 80066a2:	bf00      	nop
 80066a4:	080065e9 	.word	0x080065e9
 80066a8:	200008d0 	.word	0x200008d0

080066ac <_fwalk_sglue>:
 80066ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066b0:	4607      	mov	r7, r0
 80066b2:	4688      	mov	r8, r1
 80066b4:	4614      	mov	r4, r2
 80066b6:	2600      	movs	r6, #0
 80066b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066bc:	f1b9 0901 	subs.w	r9, r9, #1
 80066c0:	d505      	bpl.n	80066ce <_fwalk_sglue+0x22>
 80066c2:	6824      	ldr	r4, [r4, #0]
 80066c4:	2c00      	cmp	r4, #0
 80066c6:	d1f7      	bne.n	80066b8 <_fwalk_sglue+0xc>
 80066c8:	4630      	mov	r0, r6
 80066ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ce:	89ab      	ldrh	r3, [r5, #12]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d907      	bls.n	80066e4 <_fwalk_sglue+0x38>
 80066d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066d8:	3301      	adds	r3, #1
 80066da:	d003      	beq.n	80066e4 <_fwalk_sglue+0x38>
 80066dc:	4629      	mov	r1, r5
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	4306      	orrs	r6, r0
 80066e4:	3568      	adds	r5, #104	; 0x68
 80066e6:	e7e9      	b.n	80066bc <_fwalk_sglue+0x10>

080066e8 <siprintf>:
 80066e8:	b40e      	push	{r1, r2, r3}
 80066ea:	b500      	push	{lr}
 80066ec:	b09c      	sub	sp, #112	; 0x70
 80066ee:	ab1d      	add	r3, sp, #116	; 0x74
 80066f0:	9002      	str	r0, [sp, #8]
 80066f2:	9006      	str	r0, [sp, #24]
 80066f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066f8:	4809      	ldr	r0, [pc, #36]	; (8006720 <siprintf+0x38>)
 80066fa:	9107      	str	r1, [sp, #28]
 80066fc:	9104      	str	r1, [sp, #16]
 80066fe:	4909      	ldr	r1, [pc, #36]	; (8006724 <siprintf+0x3c>)
 8006700:	f853 2b04 	ldr.w	r2, [r3], #4
 8006704:	9105      	str	r1, [sp, #20]
 8006706:	6800      	ldr	r0, [r0, #0]
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	a902      	add	r1, sp, #8
 800670c:	f001 fc20 	bl	8007f50 <_svfiprintf_r>
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	b01c      	add	sp, #112	; 0x70
 8006718:	f85d eb04 	ldr.w	lr, [sp], #4
 800671c:	b003      	add	sp, #12
 800671e:	4770      	bx	lr
 8006720:	2000006c 	.word	0x2000006c
 8006724:	ffff0208 	.word	0xffff0208

08006728 <__sread>:
 8006728:	b510      	push	{r4, lr}
 800672a:	460c      	mov	r4, r1
 800672c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006730:	f000 f86c 	bl	800680c <_read_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	bfab      	itete	ge
 8006738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800673a:	89a3      	ldrhlt	r3, [r4, #12]
 800673c:	181b      	addge	r3, r3, r0
 800673e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006742:	bfac      	ite	ge
 8006744:	6563      	strge	r3, [r4, #84]	; 0x54
 8006746:	81a3      	strhlt	r3, [r4, #12]
 8006748:	bd10      	pop	{r4, pc}

0800674a <__swrite>:
 800674a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	461f      	mov	r7, r3
 8006750:	898b      	ldrh	r3, [r1, #12]
 8006752:	05db      	lsls	r3, r3, #23
 8006754:	4605      	mov	r5, r0
 8006756:	460c      	mov	r4, r1
 8006758:	4616      	mov	r6, r2
 800675a:	d505      	bpl.n	8006768 <__swrite+0x1e>
 800675c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006760:	2302      	movs	r3, #2
 8006762:	2200      	movs	r2, #0
 8006764:	f000 f840 	bl	80067e8 <_lseek_r>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800676e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	4632      	mov	r2, r6
 8006776:	463b      	mov	r3, r7
 8006778:	4628      	mov	r0, r5
 800677a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	f000 b857 	b.w	8006830 <_write_r>

08006782 <__sseek>:
 8006782:	b510      	push	{r4, lr}
 8006784:	460c      	mov	r4, r1
 8006786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678a:	f000 f82d 	bl	80067e8 <_lseek_r>
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	bf15      	itete	ne
 8006794:	6560      	strne	r0, [r4, #84]	; 0x54
 8006796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800679a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800679e:	81a3      	strheq	r3, [r4, #12]
 80067a0:	bf18      	it	ne
 80067a2:	81a3      	strhne	r3, [r4, #12]
 80067a4:	bd10      	pop	{r4, pc}

080067a6 <__sclose>:
 80067a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067aa:	f000 b80d 	b.w	80067c8 <_close_r>

080067ae <memset>:
 80067ae:	4402      	add	r2, r0
 80067b0:	4603      	mov	r3, r0
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d100      	bne.n	80067b8 <memset+0xa>
 80067b6:	4770      	bx	lr
 80067b8:	f803 1b01 	strb.w	r1, [r3], #1
 80067bc:	e7f9      	b.n	80067b2 <memset+0x4>
	...

080067c0 <_localeconv_r>:
 80067c0:	4800      	ldr	r0, [pc, #0]	; (80067c4 <_localeconv_r+0x4>)
 80067c2:	4770      	bx	lr
 80067c4:	20000160 	.word	0x20000160

080067c8 <_close_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4d06      	ldr	r5, [pc, #24]	; (80067e4 <_close_r+0x1c>)
 80067cc:	2300      	movs	r3, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	602b      	str	r3, [r5, #0]
 80067d4:	f7fc f969 	bl	8002aaa <_close>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_close_r+0x1a>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_close_r+0x1a>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	200008d4 	.word	0x200008d4

080067e8 <_lseek_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d07      	ldr	r5, [pc, #28]	; (8006808 <_lseek_r+0x20>)
 80067ec:	4604      	mov	r4, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fc f97e 	bl	8002af8 <_lseek>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_lseek_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_lseek_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	200008d4 	.word	0x200008d4

0800680c <_read_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	; (800682c <_read_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fc f90c 	bl	8002a38 <_read>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_read_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_read_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200008d4 	.word	0x200008d4

08006830 <_write_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	; (8006850 <_write_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fc f917 	bl	8002a72 <_write>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_write_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_write_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	200008d4 	.word	0x200008d4

08006854 <__errno>:
 8006854:	4b01      	ldr	r3, [pc, #4]	; (800685c <__errno+0x8>)
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	2000006c 	.word	0x2000006c

08006860 <__libc_init_array>:
 8006860:	b570      	push	{r4, r5, r6, lr}
 8006862:	4d0d      	ldr	r5, [pc, #52]	; (8006898 <__libc_init_array+0x38>)
 8006864:	4c0d      	ldr	r4, [pc, #52]	; (800689c <__libc_init_array+0x3c>)
 8006866:	1b64      	subs	r4, r4, r5
 8006868:	10a4      	asrs	r4, r4, #2
 800686a:	2600      	movs	r6, #0
 800686c:	42a6      	cmp	r6, r4
 800686e:	d109      	bne.n	8006884 <__libc_init_array+0x24>
 8006870:	4d0b      	ldr	r5, [pc, #44]	; (80068a0 <__libc_init_array+0x40>)
 8006872:	4c0c      	ldr	r4, [pc, #48]	; (80068a4 <__libc_init_array+0x44>)
 8006874:	f002 ffcc 	bl	8009810 <_init>
 8006878:	1b64      	subs	r4, r4, r5
 800687a:	10a4      	asrs	r4, r4, #2
 800687c:	2600      	movs	r6, #0
 800687e:	42a6      	cmp	r6, r4
 8006880:	d105      	bne.n	800688e <__libc_init_array+0x2e>
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	f855 3b04 	ldr.w	r3, [r5], #4
 8006888:	4798      	blx	r3
 800688a:	3601      	adds	r6, #1
 800688c:	e7ee      	b.n	800686c <__libc_init_array+0xc>
 800688e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006892:	4798      	blx	r3
 8006894:	3601      	adds	r6, #1
 8006896:	e7f2      	b.n	800687e <__libc_init_array+0x1e>
 8006898:	0800a9b0 	.word	0x0800a9b0
 800689c:	0800a9b0 	.word	0x0800a9b0
 80068a0:	0800a9b0 	.word	0x0800a9b0
 80068a4:	0800a9b4 	.word	0x0800a9b4

080068a8 <__retarget_lock_init_recursive>:
 80068a8:	4770      	bx	lr

080068aa <__retarget_lock_acquire_recursive>:
 80068aa:	4770      	bx	lr

080068ac <__retarget_lock_release_recursive>:
 80068ac:	4770      	bx	lr

080068ae <quorem>:
 80068ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b2:	6903      	ldr	r3, [r0, #16]
 80068b4:	690c      	ldr	r4, [r1, #16]
 80068b6:	42a3      	cmp	r3, r4
 80068b8:	4607      	mov	r7, r0
 80068ba:	db7e      	blt.n	80069ba <quorem+0x10c>
 80068bc:	3c01      	subs	r4, #1
 80068be:	f101 0814 	add.w	r8, r1, #20
 80068c2:	f100 0514 	add.w	r5, r0, #20
 80068c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d4:	3301      	adds	r3, #1
 80068d6:	429a      	cmp	r2, r3
 80068d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80068e4:	d331      	bcc.n	800694a <quorem+0x9c>
 80068e6:	f04f 0e00 	mov.w	lr, #0
 80068ea:	4640      	mov	r0, r8
 80068ec:	46ac      	mov	ip, r5
 80068ee:	46f2      	mov	sl, lr
 80068f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80068f4:	b293      	uxth	r3, r2
 80068f6:	fb06 e303 	mla	r3, r6, r3, lr
 80068fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068fe:	0c1a      	lsrs	r2, r3, #16
 8006900:	b29b      	uxth	r3, r3
 8006902:	ebaa 0303 	sub.w	r3, sl, r3
 8006906:	f8dc a000 	ldr.w	sl, [ip]
 800690a:	fa13 f38a 	uxtah	r3, r3, sl
 800690e:	fb06 220e 	mla	r2, r6, lr, r2
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	9b00      	ldr	r3, [sp, #0]
 8006916:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800691a:	b292      	uxth	r2, r2
 800691c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006924:	f8bd 3000 	ldrh.w	r3, [sp]
 8006928:	4581      	cmp	r9, r0
 800692a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800692e:	f84c 3b04 	str.w	r3, [ip], #4
 8006932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006936:	d2db      	bcs.n	80068f0 <quorem+0x42>
 8006938:	f855 300b 	ldr.w	r3, [r5, fp]
 800693c:	b92b      	cbnz	r3, 800694a <quorem+0x9c>
 800693e:	9b01      	ldr	r3, [sp, #4]
 8006940:	3b04      	subs	r3, #4
 8006942:	429d      	cmp	r5, r3
 8006944:	461a      	mov	r2, r3
 8006946:	d32c      	bcc.n	80069a2 <quorem+0xf4>
 8006948:	613c      	str	r4, [r7, #16]
 800694a:	4638      	mov	r0, r7
 800694c:	f001 f9a6 	bl	8007c9c <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	db22      	blt.n	800699a <quorem+0xec>
 8006954:	3601      	adds	r6, #1
 8006956:	4629      	mov	r1, r5
 8006958:	2000      	movs	r0, #0
 800695a:	f858 2b04 	ldr.w	r2, [r8], #4
 800695e:	f8d1 c000 	ldr.w	ip, [r1]
 8006962:	b293      	uxth	r3, r2
 8006964:	1ac3      	subs	r3, r0, r3
 8006966:	0c12      	lsrs	r2, r2, #16
 8006968:	fa13 f38c 	uxtah	r3, r3, ip
 800696c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006974:	b29b      	uxth	r3, r3
 8006976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800697a:	45c1      	cmp	r9, r8
 800697c:	f841 3b04 	str.w	r3, [r1], #4
 8006980:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006984:	d2e9      	bcs.n	800695a <quorem+0xac>
 8006986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800698a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800698e:	b922      	cbnz	r2, 800699a <quorem+0xec>
 8006990:	3b04      	subs	r3, #4
 8006992:	429d      	cmp	r5, r3
 8006994:	461a      	mov	r2, r3
 8006996:	d30a      	bcc.n	80069ae <quorem+0x100>
 8006998:	613c      	str	r4, [r7, #16]
 800699a:	4630      	mov	r0, r6
 800699c:	b003      	add	sp, #12
 800699e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	3b04      	subs	r3, #4
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	d1ce      	bne.n	8006948 <quorem+0x9a>
 80069aa:	3c01      	subs	r4, #1
 80069ac:	e7c9      	b.n	8006942 <quorem+0x94>
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	2a00      	cmp	r2, #0
 80069b4:	d1f0      	bne.n	8006998 <quorem+0xea>
 80069b6:	3c01      	subs	r4, #1
 80069b8:	e7eb      	b.n	8006992 <quorem+0xe4>
 80069ba:	2000      	movs	r0, #0
 80069bc:	e7ee      	b.n	800699c <quorem+0xee>
	...

080069c0 <_dtoa_r>:
 80069c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c4:	ed2d 8b04 	vpush	{d8-d9}
 80069c8:	69c5      	ldr	r5, [r0, #28]
 80069ca:	b093      	sub	sp, #76	; 0x4c
 80069cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069d0:	ec57 6b10 	vmov	r6, r7, d0
 80069d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069d8:	9107      	str	r1, [sp, #28]
 80069da:	4604      	mov	r4, r0
 80069dc:	920a      	str	r2, [sp, #40]	; 0x28
 80069de:	930d      	str	r3, [sp, #52]	; 0x34
 80069e0:	b975      	cbnz	r5, 8006a00 <_dtoa_r+0x40>
 80069e2:	2010      	movs	r0, #16
 80069e4:	f000 fe2a 	bl	800763c <malloc>
 80069e8:	4602      	mov	r2, r0
 80069ea:	61e0      	str	r0, [r4, #28]
 80069ec:	b920      	cbnz	r0, 80069f8 <_dtoa_r+0x38>
 80069ee:	4bae      	ldr	r3, [pc, #696]	; (8006ca8 <_dtoa_r+0x2e8>)
 80069f0:	21ef      	movs	r1, #239	; 0xef
 80069f2:	48ae      	ldr	r0, [pc, #696]	; (8006cac <_dtoa_r+0x2ec>)
 80069f4:	f001 fc90 	bl	8008318 <__assert_func>
 80069f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069fc:	6005      	str	r5, [r0, #0]
 80069fe:	60c5      	str	r5, [r0, #12]
 8006a00:	69e3      	ldr	r3, [r4, #28]
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	b151      	cbz	r1, 8006a1c <_dtoa_r+0x5c>
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	604a      	str	r2, [r1, #4]
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4093      	lsls	r3, r2
 8006a0e:	608b      	str	r3, [r1, #8]
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 ff07 	bl	8007824 <_Bfree>
 8006a16:	69e3      	ldr	r3, [r4, #28]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	1e3b      	subs	r3, r7, #0
 8006a1e:	bfbb      	ittet	lt
 8006a20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a24:	9303      	strlt	r3, [sp, #12]
 8006a26:	2300      	movge	r3, #0
 8006a28:	2201      	movlt	r2, #1
 8006a2a:	bfac      	ite	ge
 8006a2c:	f8c8 3000 	strge.w	r3, [r8]
 8006a30:	f8c8 2000 	strlt.w	r2, [r8]
 8006a34:	4b9e      	ldr	r3, [pc, #632]	; (8006cb0 <_dtoa_r+0x2f0>)
 8006a36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a3a:	ea33 0308 	bics.w	r3, r3, r8
 8006a3e:	d11b      	bne.n	8006a78 <_dtoa_r+0xb8>
 8006a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a4c:	4333      	orrs	r3, r6
 8006a4e:	f000 8593 	beq.w	8007578 <_dtoa_r+0xbb8>
 8006a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a54:	b963      	cbnz	r3, 8006a70 <_dtoa_r+0xb0>
 8006a56:	4b97      	ldr	r3, [pc, #604]	; (8006cb4 <_dtoa_r+0x2f4>)
 8006a58:	e027      	b.n	8006aaa <_dtoa_r+0xea>
 8006a5a:	4b97      	ldr	r3, [pc, #604]	; (8006cb8 <_dtoa_r+0x2f8>)
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	9800      	ldr	r0, [sp, #0]
 8006a66:	b013      	add	sp, #76	; 0x4c
 8006a68:	ecbd 8b04 	vpop	{d8-d9}
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	4b90      	ldr	r3, [pc, #576]	; (8006cb4 <_dtoa_r+0x2f4>)
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	3303      	adds	r3, #3
 8006a76:	e7f3      	b.n	8006a60 <_dtoa_r+0xa0>
 8006a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	ec51 0b17 	vmov	r0, r1, d7
 8006a82:	eeb0 8a47 	vmov.f32	s16, s14
 8006a86:	eef0 8a67 	vmov.f32	s17, s15
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f7fa f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a90:	4681      	mov	r9, r0
 8006a92:	b160      	cbz	r0, 8006aae <_dtoa_r+0xee>
 8006a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a96:	2301      	movs	r3, #1
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 8568 	beq.w	8007572 <_dtoa_r+0xbb2>
 8006aa2:	4b86      	ldr	r3, [pc, #536]	; (8006cbc <_dtoa_r+0x2fc>)
 8006aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	e7da      	b.n	8006a64 <_dtoa_r+0xa4>
 8006aae:	aa10      	add	r2, sp, #64	; 0x40
 8006ab0:	a911      	add	r1, sp, #68	; 0x44
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ab8:	eef0 0a68 	vmov.f32	s1, s17
 8006abc:	f001 f994 	bl	8007de8 <__d2b>
 8006ac0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d07f      	beq.n	8006bca <_dtoa_r+0x20a>
 8006aca:	ee18 3a90 	vmov	r3, s17
 8006ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006ad6:	ec51 0b18 	vmov	r0, r1, d8
 8006ada:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ae2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4b75      	ldr	r3, [pc, #468]	; (8006cc0 <_dtoa_r+0x300>)
 8006aec:	f7f9 fbcc 	bl	8000288 <__aeabi_dsub>
 8006af0:	a367      	add	r3, pc, #412	; (adr r3, 8006c90 <_dtoa_r+0x2d0>)
 8006af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af6:	f7f9 fd7f 	bl	80005f8 <__aeabi_dmul>
 8006afa:	a367      	add	r3, pc, #412	; (adr r3, 8006c98 <_dtoa_r+0x2d8>)
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f7f9 fbc4 	bl	800028c <__adddf3>
 8006b04:	4606      	mov	r6, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	460f      	mov	r7, r1
 8006b0a:	f7f9 fd0b 	bl	8000524 <__aeabi_i2d>
 8006b0e:	a364      	add	r3, pc, #400	; (adr r3, 8006ca0 <_dtoa_r+0x2e0>)
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f7f9 fd70 	bl	80005f8 <__aeabi_dmul>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fbb4 	bl	800028c <__adddf3>
 8006b24:	4606      	mov	r6, r0
 8006b26:	460f      	mov	r7, r1
 8006b28:	f7fa f816 	bl	8000b58 <__aeabi_d2iz>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4683      	mov	fp, r0
 8006b30:	2300      	movs	r3, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 ffd1 	bl	8000adc <__aeabi_dcmplt>
 8006b3a:	b148      	cbz	r0, 8006b50 <_dtoa_r+0x190>
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f7f9 fcf1 	bl	8000524 <__aeabi_i2d>
 8006b42:	4632      	mov	r2, r6
 8006b44:	463b      	mov	r3, r7
 8006b46:	f7f9 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4a:	b908      	cbnz	r0, 8006b50 <_dtoa_r+0x190>
 8006b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b50:	f1bb 0f16 	cmp.w	fp, #22
 8006b54:	d857      	bhi.n	8006c06 <_dtoa_r+0x246>
 8006b56:	4b5b      	ldr	r3, [pc, #364]	; (8006cc4 <_dtoa_r+0x304>)
 8006b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	ec51 0b18 	vmov	r0, r1, d8
 8006b64:	f7f9 ffba 	bl	8000adc <__aeabi_dcmplt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d04e      	beq.n	8006c0a <_dtoa_r+0x24a>
 8006b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b70:	2300      	movs	r3, #0
 8006b72:	930c      	str	r3, [sp, #48]	; 0x30
 8006b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b76:	1b5b      	subs	r3, r3, r5
 8006b78:	1e5a      	subs	r2, r3, #1
 8006b7a:	bf45      	ittet	mi
 8006b7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b80:	9305      	strmi	r3, [sp, #20]
 8006b82:	2300      	movpl	r3, #0
 8006b84:	2300      	movmi	r3, #0
 8006b86:	9206      	str	r2, [sp, #24]
 8006b88:	bf54      	ite	pl
 8006b8a:	9305      	strpl	r3, [sp, #20]
 8006b8c:	9306      	strmi	r3, [sp, #24]
 8006b8e:	f1bb 0f00 	cmp.w	fp, #0
 8006b92:	db3c      	blt.n	8006c0e <_dtoa_r+0x24e>
 8006b94:	9b06      	ldr	r3, [sp, #24]
 8006b96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b9a:	445b      	add	r3, fp
 8006b9c:	9306      	str	r3, [sp, #24]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b07      	ldr	r3, [sp, #28]
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d868      	bhi.n	8006c7a <_dtoa_r+0x2ba>
 8006ba8:	2b05      	cmp	r3, #5
 8006baa:	bfc4      	itt	gt
 8006bac:	3b04      	subgt	r3, #4
 8006bae:	9307      	strgt	r3, [sp, #28]
 8006bb0:	9b07      	ldr	r3, [sp, #28]
 8006bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bb6:	bfcc      	ite	gt
 8006bb8:	2500      	movgt	r5, #0
 8006bba:	2501      	movle	r5, #1
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	f200 8085 	bhi.w	8006ccc <_dtoa_r+0x30c>
 8006bc2:	e8df f003 	tbb	[pc, r3]
 8006bc6:	3b2e      	.short	0x3b2e
 8006bc8:	5839      	.short	0x5839
 8006bca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bce:	441d      	add	r5, r3
 8006bd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	bfc1      	itttt	gt
 8006bd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006be0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006be4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006be8:	bfd6      	itet	le
 8006bea:	f1c3 0320 	rsble	r3, r3, #32
 8006bee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006bf2:	fa06 f003 	lslle.w	r0, r6, r3
 8006bf6:	f7f9 fc85 	bl	8000504 <__aeabi_ui2d>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c00:	3d01      	subs	r5, #1
 8006c02:	920e      	str	r2, [sp, #56]	; 0x38
 8006c04:	e76f      	b.n	8006ae6 <_dtoa_r+0x126>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7b3      	b.n	8006b72 <_dtoa_r+0x1b2>
 8006c0a:	900c      	str	r0, [sp, #48]	; 0x30
 8006c0c:	e7b2      	b.n	8006b74 <_dtoa_r+0x1b4>
 8006c0e:	9b05      	ldr	r3, [sp, #20]
 8006c10:	eba3 030b 	sub.w	r3, r3, fp
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	f1cb 0300 	rsb	r3, fp, #0
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c20:	e7bf      	b.n	8006ba2 <_dtoa_r+0x1e2>
 8006c22:	2300      	movs	r3, #0
 8006c24:	9309      	str	r3, [sp, #36]	; 0x24
 8006c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dc52      	bgt.n	8006cd2 <_dtoa_r+0x312>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	461a      	mov	r2, r3
 8006c34:	920a      	str	r2, [sp, #40]	; 0x28
 8006c36:	e00b      	b.n	8006c50 <_dtoa_r+0x290>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e7f3      	b.n	8006c24 <_dtoa_r+0x264>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	445b      	add	r3, fp
 8006c44:	9301      	str	r3, [sp, #4]
 8006c46:	3301      	adds	r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	9304      	str	r3, [sp, #16]
 8006c4c:	bfb8      	it	lt
 8006c4e:	2301      	movlt	r3, #1
 8006c50:	69e0      	ldr	r0, [r4, #28]
 8006c52:	2100      	movs	r1, #0
 8006c54:	2204      	movs	r2, #4
 8006c56:	f102 0614 	add.w	r6, r2, #20
 8006c5a:	429e      	cmp	r6, r3
 8006c5c:	d93d      	bls.n	8006cda <_dtoa_r+0x31a>
 8006c5e:	6041      	str	r1, [r0, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fd9f 	bl	80077a4 <_Balloc>
 8006c66:	9000      	str	r0, [sp, #0]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d139      	bne.n	8006ce0 <_dtoa_r+0x320>
 8006c6c:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <_dtoa_r+0x308>)
 8006c6e:	4602      	mov	r2, r0
 8006c70:	f240 11af 	movw	r1, #431	; 0x1af
 8006c74:	e6bd      	b.n	80069f2 <_dtoa_r+0x32>
 8006c76:	2301      	movs	r3, #1
 8006c78:	e7e1      	b.n	8006c3e <_dtoa_r+0x27e>
 8006c7a:	2501      	movs	r5, #1
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	9509      	str	r5, [sp, #36]	; 0x24
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	9304      	str	r3, [sp, #16]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2312      	movs	r3, #18
 8006c8e:	e7d1      	b.n	8006c34 <_dtoa_r+0x274>
 8006c90:	636f4361 	.word	0x636f4361
 8006c94:	3fd287a7 	.word	0x3fd287a7
 8006c98:	8b60c8b3 	.word	0x8b60c8b3
 8006c9c:	3fc68a28 	.word	0x3fc68a28
 8006ca0:	509f79fb 	.word	0x509f79fb
 8006ca4:	3fd34413 	.word	0x3fd34413
 8006ca8:	0800a645 	.word	0x0800a645
 8006cac:	0800a65c 	.word	0x0800a65c
 8006cb0:	7ff00000 	.word	0x7ff00000
 8006cb4:	0800a641 	.word	0x0800a641
 8006cb8:	0800a638 	.word	0x0800a638
 8006cbc:	0800a615 	.word	0x0800a615
 8006cc0:	3ff80000 	.word	0x3ff80000
 8006cc4:	0800a748 	.word	0x0800a748
 8006cc8:	0800a6b4 	.word	0x0800a6b4
 8006ccc:	2301      	movs	r3, #1
 8006cce:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd0:	e7d7      	b.n	8006c82 <_dtoa_r+0x2c2>
 8006cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	e7ba      	b.n	8006c50 <_dtoa_r+0x290>
 8006cda:	3101      	adds	r1, #1
 8006cdc:	0052      	lsls	r2, r2, #1
 8006cde:	e7ba      	b.n	8006c56 <_dtoa_r+0x296>
 8006ce0:	69e3      	ldr	r3, [r4, #28]
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	9b04      	ldr	r3, [sp, #16]
 8006ce8:	2b0e      	cmp	r3, #14
 8006cea:	f200 80a8 	bhi.w	8006e3e <_dtoa_r+0x47e>
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	f000 80a5 	beq.w	8006e3e <_dtoa_r+0x47e>
 8006cf4:	f1bb 0f00 	cmp.w	fp, #0
 8006cf8:	dd38      	ble.n	8006d6c <_dtoa_r+0x3ac>
 8006cfa:	4bc0      	ldr	r3, [pc, #768]	; (8006ffc <_dtoa_r+0x63c>)
 8006cfc:	f00b 020f 	and.w	r2, fp, #15
 8006d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d10:	d019      	beq.n	8006d46 <_dtoa_r+0x386>
 8006d12:	4bbb      	ldr	r3, [pc, #748]	; (8007000 <_dtoa_r+0x640>)
 8006d14:	ec51 0b18 	vmov	r0, r1, d8
 8006d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d1c:	f7f9 fd96 	bl	800084c <__aeabi_ddiv>
 8006d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d24:	f008 080f 	and.w	r8, r8, #15
 8006d28:	2503      	movs	r5, #3
 8006d2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007000 <_dtoa_r+0x640>
 8006d2e:	f1b8 0f00 	cmp.w	r8, #0
 8006d32:	d10a      	bne.n	8006d4a <_dtoa_r+0x38a>
 8006d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	f7f9 fd86 	bl	800084c <__aeabi_ddiv>
 8006d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d44:	e02b      	b.n	8006d9e <_dtoa_r+0x3de>
 8006d46:	2502      	movs	r5, #2
 8006d48:	e7ef      	b.n	8006d2a <_dtoa_r+0x36a>
 8006d4a:	f018 0f01 	tst.w	r8, #1
 8006d4e:	d008      	beq.n	8006d62 <_dtoa_r+0x3a2>
 8006d50:	4630      	mov	r0, r6
 8006d52:	4639      	mov	r1, r7
 8006d54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d58:	f7f9 fc4e 	bl	80005f8 <__aeabi_dmul>
 8006d5c:	3501      	adds	r5, #1
 8006d5e:	4606      	mov	r6, r0
 8006d60:	460f      	mov	r7, r1
 8006d62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006d66:	f109 0908 	add.w	r9, r9, #8
 8006d6a:	e7e0      	b.n	8006d2e <_dtoa_r+0x36e>
 8006d6c:	f000 809f 	beq.w	8006eae <_dtoa_r+0x4ee>
 8006d70:	f1cb 0600 	rsb	r6, fp, #0
 8006d74:	4ba1      	ldr	r3, [pc, #644]	; (8006ffc <_dtoa_r+0x63c>)
 8006d76:	4fa2      	ldr	r7, [pc, #648]	; (8007000 <_dtoa_r+0x640>)
 8006d78:	f006 020f 	and.w	r2, r6, #15
 8006d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	ec51 0b18 	vmov	r0, r1, d8
 8006d88:	f7f9 fc36 	bl	80005f8 <__aeabi_dmul>
 8006d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d90:	1136      	asrs	r6, r6, #4
 8006d92:	2300      	movs	r3, #0
 8006d94:	2502      	movs	r5, #2
 8006d96:	2e00      	cmp	r6, #0
 8006d98:	d17e      	bne.n	8006e98 <_dtoa_r+0x4d8>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1d0      	bne.n	8006d40 <_dtoa_r+0x380>
 8006d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006da0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8084 	beq.w	8006eb2 <_dtoa_r+0x4f2>
 8006daa:	4b96      	ldr	r3, [pc, #600]	; (8007004 <_dtoa_r+0x644>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 fe93 	bl	8000adc <__aeabi_dcmplt>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d07b      	beq.n	8006eb2 <_dtoa_r+0x4f2>
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d078      	beq.n	8006eb2 <_dtoa_r+0x4f2>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd39      	ble.n	8006e3a <_dtoa_r+0x47a>
 8006dc6:	4b90      	ldr	r3, [pc, #576]	; (8007008 <_dtoa_r+0x648>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	f7f9 fc13 	bl	80005f8 <__aeabi_dmul>
 8006dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd6:	9e01      	ldr	r6, [sp, #4]
 8006dd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006de2:	4628      	mov	r0, r5
 8006de4:	f7f9 fb9e 	bl	8000524 <__aeabi_i2d>
 8006de8:	4642      	mov	r2, r8
 8006dea:	464b      	mov	r3, r9
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	4b86      	ldr	r3, [pc, #536]	; (800700c <_dtoa_r+0x64c>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	f7f9 fa4a 	bl	800028c <__adddf3>
 8006df8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e00:	9303      	str	r3, [sp, #12]
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	d158      	bne.n	8006eb8 <_dtoa_r+0x4f8>
 8006e06:	4b82      	ldr	r3, [pc, #520]	; (8007010 <_dtoa_r+0x650>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fa3b 	bl	8000288 <__aeabi_dsub>
 8006e12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e16:	4680      	mov	r8, r0
 8006e18:	4689      	mov	r9, r1
 8006e1a:	f7f9 fe7d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f040 8296 	bne.w	8007350 <_dtoa_r+0x990>
 8006e24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e28:	4640      	mov	r0, r8
 8006e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e2e:	4649      	mov	r1, r9
 8006e30:	f7f9 fe54 	bl	8000adc <__aeabi_dcmplt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f040 8289 	bne.w	800734c <_dtoa_r+0x98c>
 8006e3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f2c0 814e 	blt.w	80070e2 <_dtoa_r+0x722>
 8006e46:	f1bb 0f0e 	cmp.w	fp, #14
 8006e4a:	f300 814a 	bgt.w	80070e2 <_dtoa_r+0x722>
 8006e4e:	4b6b      	ldr	r3, [pc, #428]	; (8006ffc <_dtoa_r+0x63c>)
 8006e50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f280 80dc 	bge.w	8007018 <_dtoa_r+0x658>
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f300 80d8 	bgt.w	8007018 <_dtoa_r+0x658>
 8006e68:	f040 826f 	bne.w	800734a <_dtoa_r+0x98a>
 8006e6c:	4b68      	ldr	r3, [pc, #416]	; (8007010 <_dtoa_r+0x650>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fbc0 	bl	80005f8 <__aeabi_dmul>
 8006e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e7c:	f7f9 fe42 	bl	8000b04 <__aeabi_dcmpge>
 8006e80:	9e04      	ldr	r6, [sp, #16]
 8006e82:	4637      	mov	r7, r6
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 8245 	bne.w	8007314 <_dtoa_r+0x954>
 8006e8a:	9d00      	ldr	r5, [sp, #0]
 8006e8c:	2331      	movs	r3, #49	; 0x31
 8006e8e:	f805 3b01 	strb.w	r3, [r5], #1
 8006e92:	f10b 0b01 	add.w	fp, fp, #1
 8006e96:	e241      	b.n	800731c <_dtoa_r+0x95c>
 8006e98:	07f2      	lsls	r2, r6, #31
 8006e9a:	d505      	bpl.n	8006ea8 <_dtoa_r+0x4e8>
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	1076      	asrs	r6, r6, #1
 8006eaa:	3708      	adds	r7, #8
 8006eac:	e773      	b.n	8006d96 <_dtoa_r+0x3d6>
 8006eae:	2502      	movs	r5, #2
 8006eb0:	e775      	b.n	8006d9e <_dtoa_r+0x3de>
 8006eb2:	9e04      	ldr	r6, [sp, #16]
 8006eb4:	465f      	mov	r7, fp
 8006eb6:	e792      	b.n	8006dde <_dtoa_r+0x41e>
 8006eb8:	9900      	ldr	r1, [sp, #0]
 8006eba:	4b50      	ldr	r3, [pc, #320]	; (8006ffc <_dtoa_r+0x63c>)
 8006ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ec0:	4431      	add	r1, r6
 8006ec2:	9102      	str	r1, [sp, #8]
 8006ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec6:	eeb0 9a47 	vmov.f32	s18, s14
 8006eca:	eef0 9a67 	vmov.f32	s19, s15
 8006ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d044      	beq.n	8006f64 <_dtoa_r+0x5a4>
 8006eda:	494e      	ldr	r1, [pc, #312]	; (8007014 <_dtoa_r+0x654>)
 8006edc:	2000      	movs	r0, #0
 8006ede:	f7f9 fcb5 	bl	800084c <__aeabi_ddiv>
 8006ee2:	ec53 2b19 	vmov	r2, r3, d9
 8006ee6:	f7f9 f9cf 	bl	8000288 <__aeabi_dsub>
 8006eea:	9d00      	ldr	r5, [sp, #0]
 8006eec:	ec41 0b19 	vmov	d9, r0, r1
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7f9 fe30 	bl	8000b58 <__aeabi_d2iz>
 8006ef8:	4606      	mov	r6, r0
 8006efa:	f7f9 fb13 	bl	8000524 <__aeabi_i2d>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 f9bf 	bl	8000288 <__aeabi_dsub>
 8006f0a:	3630      	adds	r6, #48	; 0x30
 8006f0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f10:	ec53 2b19 	vmov	r2, r3, d9
 8006f14:	4680      	mov	r8, r0
 8006f16:	4689      	mov	r9, r1
 8006f18:	f7f9 fde0 	bl	8000adc <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d164      	bne.n	8006fea <_dtoa_r+0x62a>
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4937      	ldr	r1, [pc, #220]	; (8007004 <_dtoa_r+0x644>)
 8006f26:	2000      	movs	r0, #0
 8006f28:	f7f9 f9ae 	bl	8000288 <__aeabi_dsub>
 8006f2c:	ec53 2b19 	vmov	r2, r3, d9
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f040 80b6 	bne.w	80070a6 <_dtoa_r+0x6e6>
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	f43f af7c 	beq.w	8006e3a <_dtoa_r+0x47a>
 8006f42:	4b31      	ldr	r3, [pc, #196]	; (8007008 <_dtoa_r+0x648>)
 8006f44:	ec51 0b19 	vmov	r0, r1, d9
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f7f9 fb55 	bl	80005f8 <__aeabi_dmul>
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <_dtoa_r+0x648>)
 8006f50:	ec41 0b19 	vmov	d9, r0, r1
 8006f54:	2200      	movs	r2, #0
 8006f56:	4640      	mov	r0, r8
 8006f58:	4649      	mov	r1, r9
 8006f5a:	f7f9 fb4d 	bl	80005f8 <__aeabi_dmul>
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4689      	mov	r9, r1
 8006f62:	e7c5      	b.n	8006ef0 <_dtoa_r+0x530>
 8006f64:	ec51 0b17 	vmov	r0, r1, d7
 8006f68:	f7f9 fb46 	bl	80005f8 <__aeabi_dmul>
 8006f6c:	9b02      	ldr	r3, [sp, #8]
 8006f6e:	9d00      	ldr	r5, [sp, #0]
 8006f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f72:	ec41 0b19 	vmov	d9, r0, r1
 8006f76:	4649      	mov	r1, r9
 8006f78:	4640      	mov	r0, r8
 8006f7a:	f7f9 fded 	bl	8000b58 <__aeabi_d2iz>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	f7f9 fad0 	bl	8000524 <__aeabi_i2d>
 8006f84:	3630      	adds	r6, #48	; 0x30
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 f97b 	bl	8000288 <__aeabi_dsub>
 8006f92:	f805 6b01 	strb.w	r6, [r5], #1
 8006f96:	9b02      	ldr	r3, [sp, #8]
 8006f98:	429d      	cmp	r5, r3
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	f04f 0200 	mov.w	r2, #0
 8006fa2:	d124      	bne.n	8006fee <_dtoa_r+0x62e>
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <_dtoa_r+0x654>)
 8006fa6:	ec51 0b19 	vmov	r0, r1, d9
 8006faa:	f7f9 f96f 	bl	800028c <__adddf3>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	f7f9 fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d173      	bne.n	80070a6 <_dtoa_r+0x6e6>
 8006fbe:	ec53 2b19 	vmov	r2, r3, d9
 8006fc2:	4914      	ldr	r1, [pc, #80]	; (8007014 <_dtoa_r+0x654>)
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f7f9 f95f 	bl	8000288 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 fd83 	bl	8000adc <__aeabi_dcmplt>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	f43f af2f 	beq.w	8006e3a <_dtoa_r+0x47a>
 8006fdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fde:	1e6b      	subs	r3, r5, #1
 8006fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fe6:	2b30      	cmp	r3, #48	; 0x30
 8006fe8:	d0f8      	beq.n	8006fdc <_dtoa_r+0x61c>
 8006fea:	46bb      	mov	fp, r7
 8006fec:	e04a      	b.n	8007084 <_dtoa_r+0x6c4>
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <_dtoa_r+0x648>)
 8006ff0:	f7f9 fb02 	bl	80005f8 <__aeabi_dmul>
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	4689      	mov	r9, r1
 8006ff8:	e7bd      	b.n	8006f76 <_dtoa_r+0x5b6>
 8006ffa:	bf00      	nop
 8006ffc:	0800a748 	.word	0x0800a748
 8007000:	0800a720 	.word	0x0800a720
 8007004:	3ff00000 	.word	0x3ff00000
 8007008:	40240000 	.word	0x40240000
 800700c:	401c0000 	.word	0x401c0000
 8007010:	40140000 	.word	0x40140000
 8007014:	3fe00000 	.word	0x3fe00000
 8007018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800701c:	9d00      	ldr	r5, [sp, #0]
 800701e:	4642      	mov	r2, r8
 8007020:	464b      	mov	r3, r9
 8007022:	4630      	mov	r0, r6
 8007024:	4639      	mov	r1, r7
 8007026:	f7f9 fc11 	bl	800084c <__aeabi_ddiv>
 800702a:	f7f9 fd95 	bl	8000b58 <__aeabi_d2iz>
 800702e:	9001      	str	r0, [sp, #4]
 8007030:	f7f9 fa78 	bl	8000524 <__aeabi_i2d>
 8007034:	4642      	mov	r2, r8
 8007036:	464b      	mov	r3, r9
 8007038:	f7f9 fade 	bl	80005f8 <__aeabi_dmul>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 f920 	bl	8000288 <__aeabi_dsub>
 8007048:	9e01      	ldr	r6, [sp, #4]
 800704a:	9f04      	ldr	r7, [sp, #16]
 800704c:	3630      	adds	r6, #48	; 0x30
 800704e:	f805 6b01 	strb.w	r6, [r5], #1
 8007052:	9e00      	ldr	r6, [sp, #0]
 8007054:	1bae      	subs	r6, r5, r6
 8007056:	42b7      	cmp	r7, r6
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	d134      	bne.n	80070c8 <_dtoa_r+0x708>
 800705e:	f7f9 f915 	bl	800028c <__adddf3>
 8007062:	4642      	mov	r2, r8
 8007064:	464b      	mov	r3, r9
 8007066:	4606      	mov	r6, r0
 8007068:	460f      	mov	r7, r1
 800706a:	f7f9 fd55 	bl	8000b18 <__aeabi_dcmpgt>
 800706e:	b9c8      	cbnz	r0, 80070a4 <_dtoa_r+0x6e4>
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	4630      	mov	r0, r6
 8007076:	4639      	mov	r1, r7
 8007078:	f7f9 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800707c:	b110      	cbz	r0, 8007084 <_dtoa_r+0x6c4>
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	07db      	lsls	r3, r3, #31
 8007082:	d40f      	bmi.n	80070a4 <_dtoa_r+0x6e4>
 8007084:	4651      	mov	r1, sl
 8007086:	4620      	mov	r0, r4
 8007088:	f000 fbcc 	bl	8007824 <_Bfree>
 800708c:	2300      	movs	r3, #0
 800708e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007090:	702b      	strb	r3, [r5, #0]
 8007092:	f10b 0301 	add.w	r3, fp, #1
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800709a:	2b00      	cmp	r3, #0
 800709c:	f43f ace2 	beq.w	8006a64 <_dtoa_r+0xa4>
 80070a0:	601d      	str	r5, [r3, #0]
 80070a2:	e4df      	b.n	8006a64 <_dtoa_r+0xa4>
 80070a4:	465f      	mov	r7, fp
 80070a6:	462b      	mov	r3, r5
 80070a8:	461d      	mov	r5, r3
 80070aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ae:	2a39      	cmp	r2, #57	; 0x39
 80070b0:	d106      	bne.n	80070c0 <_dtoa_r+0x700>
 80070b2:	9a00      	ldr	r2, [sp, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1f7      	bne.n	80070a8 <_dtoa_r+0x6e8>
 80070b8:	9900      	ldr	r1, [sp, #0]
 80070ba:	2230      	movs	r2, #48	; 0x30
 80070bc:	3701      	adds	r7, #1
 80070be:	700a      	strb	r2, [r1, #0]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	3201      	adds	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	e790      	b.n	8006fea <_dtoa_r+0x62a>
 80070c8:	4ba3      	ldr	r3, [pc, #652]	; (8007358 <_dtoa_r+0x998>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	f7f9 fa94 	bl	80005f8 <__aeabi_dmul>
 80070d0:	2200      	movs	r2, #0
 80070d2:	2300      	movs	r3, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	460f      	mov	r7, r1
 80070d8:	f7f9 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d09e      	beq.n	800701e <_dtoa_r+0x65e>
 80070e0:	e7d0      	b.n	8007084 <_dtoa_r+0x6c4>
 80070e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070e4:	2a00      	cmp	r2, #0
 80070e6:	f000 80ca 	beq.w	800727e <_dtoa_r+0x8be>
 80070ea:	9a07      	ldr	r2, [sp, #28]
 80070ec:	2a01      	cmp	r2, #1
 80070ee:	f300 80ad 	bgt.w	800724c <_dtoa_r+0x88c>
 80070f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	f000 80a5 	beq.w	8007244 <_dtoa_r+0x884>
 80070fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070fe:	9e08      	ldr	r6, [sp, #32]
 8007100:	9d05      	ldr	r5, [sp, #20]
 8007102:	9a05      	ldr	r2, [sp, #20]
 8007104:	441a      	add	r2, r3
 8007106:	9205      	str	r2, [sp, #20]
 8007108:	9a06      	ldr	r2, [sp, #24]
 800710a:	2101      	movs	r1, #1
 800710c:	441a      	add	r2, r3
 800710e:	4620      	mov	r0, r4
 8007110:	9206      	str	r2, [sp, #24]
 8007112:	f000 fc3d 	bl	8007990 <__i2b>
 8007116:	4607      	mov	r7, r0
 8007118:	b165      	cbz	r5, 8007134 <_dtoa_r+0x774>
 800711a:	9b06      	ldr	r3, [sp, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd09      	ble.n	8007134 <_dtoa_r+0x774>
 8007120:	42ab      	cmp	r3, r5
 8007122:	9a05      	ldr	r2, [sp, #20]
 8007124:	bfa8      	it	ge
 8007126:	462b      	movge	r3, r5
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	9205      	str	r2, [sp, #20]
 800712c:	9a06      	ldr	r2, [sp, #24]
 800712e:	1aed      	subs	r5, r5, r3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	9306      	str	r3, [sp, #24]
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	b1f3      	cbz	r3, 8007176 <_dtoa_r+0x7b6>
 8007138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80a3 	beq.w	8007286 <_dtoa_r+0x8c6>
 8007140:	2e00      	cmp	r6, #0
 8007142:	dd10      	ble.n	8007166 <_dtoa_r+0x7a6>
 8007144:	4639      	mov	r1, r7
 8007146:	4632      	mov	r2, r6
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fce1 	bl	8007b10 <__pow5mult>
 800714e:	4652      	mov	r2, sl
 8007150:	4601      	mov	r1, r0
 8007152:	4607      	mov	r7, r0
 8007154:	4620      	mov	r0, r4
 8007156:	f000 fc31 	bl	80079bc <__multiply>
 800715a:	4651      	mov	r1, sl
 800715c:	4680      	mov	r8, r0
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fb60 	bl	8007824 <_Bfree>
 8007164:	46c2      	mov	sl, r8
 8007166:	9b08      	ldr	r3, [sp, #32]
 8007168:	1b9a      	subs	r2, r3, r6
 800716a:	d004      	beq.n	8007176 <_dtoa_r+0x7b6>
 800716c:	4651      	mov	r1, sl
 800716e:	4620      	mov	r0, r4
 8007170:	f000 fcce 	bl	8007b10 <__pow5mult>
 8007174:	4682      	mov	sl, r0
 8007176:	2101      	movs	r1, #1
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fc09 	bl	8007990 <__i2b>
 800717e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007180:	2b00      	cmp	r3, #0
 8007182:	4606      	mov	r6, r0
 8007184:	f340 8081 	ble.w	800728a <_dtoa_r+0x8ca>
 8007188:	461a      	mov	r2, r3
 800718a:	4601      	mov	r1, r0
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fcbf 	bl	8007b10 <__pow5mult>
 8007192:	9b07      	ldr	r3, [sp, #28]
 8007194:	2b01      	cmp	r3, #1
 8007196:	4606      	mov	r6, r0
 8007198:	dd7a      	ble.n	8007290 <_dtoa_r+0x8d0>
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	6933      	ldr	r3, [r6, #16]
 80071a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071a4:	6918      	ldr	r0, [r3, #16]
 80071a6:	f000 fba5 	bl	80078f4 <__hi0bits>
 80071aa:	f1c0 0020 	rsb	r0, r0, #32
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	4418      	add	r0, r3
 80071b2:	f010 001f 	ands.w	r0, r0, #31
 80071b6:	f000 8094 	beq.w	80072e2 <_dtoa_r+0x922>
 80071ba:	f1c0 0320 	rsb	r3, r0, #32
 80071be:	2b04      	cmp	r3, #4
 80071c0:	f340 8085 	ble.w	80072ce <_dtoa_r+0x90e>
 80071c4:	9b05      	ldr	r3, [sp, #20]
 80071c6:	f1c0 001c 	rsb	r0, r0, #28
 80071ca:	4403      	add	r3, r0
 80071cc:	9305      	str	r3, [sp, #20]
 80071ce:	9b06      	ldr	r3, [sp, #24]
 80071d0:	4403      	add	r3, r0
 80071d2:	4405      	add	r5, r0
 80071d4:	9306      	str	r3, [sp, #24]
 80071d6:	9b05      	ldr	r3, [sp, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	dd05      	ble.n	80071e8 <_dtoa_r+0x828>
 80071dc:	4651      	mov	r1, sl
 80071de:	461a      	mov	r2, r3
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fcef 	bl	8007bc4 <__lshift>
 80071e6:	4682      	mov	sl, r0
 80071e8:	9b06      	ldr	r3, [sp, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dd05      	ble.n	80071fa <_dtoa_r+0x83a>
 80071ee:	4631      	mov	r1, r6
 80071f0:	461a      	mov	r2, r3
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fce6 	bl	8007bc4 <__lshift>
 80071f8:	4606      	mov	r6, r0
 80071fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d072      	beq.n	80072e6 <_dtoa_r+0x926>
 8007200:	4631      	mov	r1, r6
 8007202:	4650      	mov	r0, sl
 8007204:	f000 fd4a 	bl	8007c9c <__mcmp>
 8007208:	2800      	cmp	r0, #0
 800720a:	da6c      	bge.n	80072e6 <_dtoa_r+0x926>
 800720c:	2300      	movs	r3, #0
 800720e:	4651      	mov	r1, sl
 8007210:	220a      	movs	r2, #10
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fb28 	bl	8007868 <__multadd>
 8007218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800721e:	4682      	mov	sl, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 81b0 	beq.w	8007586 <_dtoa_r+0xbc6>
 8007226:	2300      	movs	r3, #0
 8007228:	4639      	mov	r1, r7
 800722a:	220a      	movs	r2, #10
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fb1b 	bl	8007868 <__multadd>
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	4607      	mov	r7, r0
 8007238:	f300 8096 	bgt.w	8007368 <_dtoa_r+0x9a8>
 800723c:	9b07      	ldr	r3, [sp, #28]
 800723e:	2b02      	cmp	r3, #2
 8007240:	dc59      	bgt.n	80072f6 <_dtoa_r+0x936>
 8007242:	e091      	b.n	8007368 <_dtoa_r+0x9a8>
 8007244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800724a:	e758      	b.n	80070fe <_dtoa_r+0x73e>
 800724c:	9b04      	ldr	r3, [sp, #16]
 800724e:	1e5e      	subs	r6, r3, #1
 8007250:	9b08      	ldr	r3, [sp, #32]
 8007252:	42b3      	cmp	r3, r6
 8007254:	bfbf      	itttt	lt
 8007256:	9b08      	ldrlt	r3, [sp, #32]
 8007258:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800725a:	9608      	strlt	r6, [sp, #32]
 800725c:	1af3      	sublt	r3, r6, r3
 800725e:	bfb4      	ite	lt
 8007260:	18d2      	addlt	r2, r2, r3
 8007262:	1b9e      	subge	r6, r3, r6
 8007264:	9b04      	ldr	r3, [sp, #16]
 8007266:	bfbc      	itt	lt
 8007268:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800726a:	2600      	movlt	r6, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfb7      	itett	lt
 8007270:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007274:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007278:	1a9d      	sublt	r5, r3, r2
 800727a:	2300      	movlt	r3, #0
 800727c:	e741      	b.n	8007102 <_dtoa_r+0x742>
 800727e:	9e08      	ldr	r6, [sp, #32]
 8007280:	9d05      	ldr	r5, [sp, #20]
 8007282:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007284:	e748      	b.n	8007118 <_dtoa_r+0x758>
 8007286:	9a08      	ldr	r2, [sp, #32]
 8007288:	e770      	b.n	800716c <_dtoa_r+0x7ac>
 800728a:	9b07      	ldr	r3, [sp, #28]
 800728c:	2b01      	cmp	r3, #1
 800728e:	dc19      	bgt.n	80072c4 <_dtoa_r+0x904>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	b9bb      	cbnz	r3, 80072c4 <_dtoa_r+0x904>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800729a:	b99b      	cbnz	r3, 80072c4 <_dtoa_r+0x904>
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072a2:	0d1b      	lsrs	r3, r3, #20
 80072a4:	051b      	lsls	r3, r3, #20
 80072a6:	b183      	cbz	r3, 80072ca <_dtoa_r+0x90a>
 80072a8:	9b05      	ldr	r3, [sp, #20]
 80072aa:	3301      	adds	r3, #1
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	9b06      	ldr	r3, [sp, #24]
 80072b0:	3301      	adds	r3, #1
 80072b2:	9306      	str	r3, [sp, #24]
 80072b4:	f04f 0801 	mov.w	r8, #1
 80072b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f47f af6f 	bne.w	800719e <_dtoa_r+0x7de>
 80072c0:	2001      	movs	r0, #1
 80072c2:	e774      	b.n	80071ae <_dtoa_r+0x7ee>
 80072c4:	f04f 0800 	mov.w	r8, #0
 80072c8:	e7f6      	b.n	80072b8 <_dtoa_r+0x8f8>
 80072ca:	4698      	mov	r8, r3
 80072cc:	e7f4      	b.n	80072b8 <_dtoa_r+0x8f8>
 80072ce:	d082      	beq.n	80071d6 <_dtoa_r+0x816>
 80072d0:	9a05      	ldr	r2, [sp, #20]
 80072d2:	331c      	adds	r3, #28
 80072d4:	441a      	add	r2, r3
 80072d6:	9205      	str	r2, [sp, #20]
 80072d8:	9a06      	ldr	r2, [sp, #24]
 80072da:	441a      	add	r2, r3
 80072dc:	441d      	add	r5, r3
 80072de:	9206      	str	r2, [sp, #24]
 80072e0:	e779      	b.n	80071d6 <_dtoa_r+0x816>
 80072e2:	4603      	mov	r3, r0
 80072e4:	e7f4      	b.n	80072d0 <_dtoa_r+0x910>
 80072e6:	9b04      	ldr	r3, [sp, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dc37      	bgt.n	800735c <_dtoa_r+0x99c>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	dd34      	ble.n	800735c <_dtoa_r+0x99c>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	9b01      	ldr	r3, [sp, #4]
 80072f8:	b963      	cbnz	r3, 8007314 <_dtoa_r+0x954>
 80072fa:	4631      	mov	r1, r6
 80072fc:	2205      	movs	r2, #5
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 fab2 	bl	8007868 <__multadd>
 8007304:	4601      	mov	r1, r0
 8007306:	4606      	mov	r6, r0
 8007308:	4650      	mov	r0, sl
 800730a:	f000 fcc7 	bl	8007c9c <__mcmp>
 800730e:	2800      	cmp	r0, #0
 8007310:	f73f adbb 	bgt.w	8006e8a <_dtoa_r+0x4ca>
 8007314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007316:	9d00      	ldr	r5, [sp, #0]
 8007318:	ea6f 0b03 	mvn.w	fp, r3
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	4631      	mov	r1, r6
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fa7e 	bl	8007824 <_Bfree>
 8007328:	2f00      	cmp	r7, #0
 800732a:	f43f aeab 	beq.w	8007084 <_dtoa_r+0x6c4>
 800732e:	f1b8 0f00 	cmp.w	r8, #0
 8007332:	d005      	beq.n	8007340 <_dtoa_r+0x980>
 8007334:	45b8      	cmp	r8, r7
 8007336:	d003      	beq.n	8007340 <_dtoa_r+0x980>
 8007338:	4641      	mov	r1, r8
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fa72 	bl	8007824 <_Bfree>
 8007340:	4639      	mov	r1, r7
 8007342:	4620      	mov	r0, r4
 8007344:	f000 fa6e 	bl	8007824 <_Bfree>
 8007348:	e69c      	b.n	8007084 <_dtoa_r+0x6c4>
 800734a:	2600      	movs	r6, #0
 800734c:	4637      	mov	r7, r6
 800734e:	e7e1      	b.n	8007314 <_dtoa_r+0x954>
 8007350:	46bb      	mov	fp, r7
 8007352:	4637      	mov	r7, r6
 8007354:	e599      	b.n	8006e8a <_dtoa_r+0x4ca>
 8007356:	bf00      	nop
 8007358:	40240000 	.word	0x40240000
 800735c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80c8 	beq.w	80074f4 <_dtoa_r+0xb34>
 8007364:	9b04      	ldr	r3, [sp, #16]
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	2d00      	cmp	r5, #0
 800736a:	dd05      	ble.n	8007378 <_dtoa_r+0x9b8>
 800736c:	4639      	mov	r1, r7
 800736e:	462a      	mov	r2, r5
 8007370:	4620      	mov	r0, r4
 8007372:	f000 fc27 	bl	8007bc4 <__lshift>
 8007376:	4607      	mov	r7, r0
 8007378:	f1b8 0f00 	cmp.w	r8, #0
 800737c:	d05b      	beq.n	8007436 <_dtoa_r+0xa76>
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fa0f 	bl	80077a4 <_Balloc>
 8007386:	4605      	mov	r5, r0
 8007388:	b928      	cbnz	r0, 8007396 <_dtoa_r+0x9d6>
 800738a:	4b83      	ldr	r3, [pc, #524]	; (8007598 <_dtoa_r+0xbd8>)
 800738c:	4602      	mov	r2, r0
 800738e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007392:	f7ff bb2e 	b.w	80069f2 <_dtoa_r+0x32>
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	3202      	adds	r2, #2
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	f107 010c 	add.w	r1, r7, #12
 80073a0:	300c      	adds	r0, #12
 80073a2:	f000 ffab 	bl	80082fc <memcpy>
 80073a6:	2201      	movs	r2, #1
 80073a8:	4629      	mov	r1, r5
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fc0a 	bl	8007bc4 <__lshift>
 80073b0:	9b00      	ldr	r3, [sp, #0]
 80073b2:	3301      	adds	r3, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ba:	4413      	add	r3, r2
 80073bc:	9308      	str	r3, [sp, #32]
 80073be:	9b02      	ldr	r3, [sp, #8]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	46b8      	mov	r8, r7
 80073c6:	9306      	str	r3, [sp, #24]
 80073c8:	4607      	mov	r7, r0
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	4631      	mov	r1, r6
 80073ce:	3b01      	subs	r3, #1
 80073d0:	4650      	mov	r0, sl
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	f7ff fa6b 	bl	80068ae <quorem>
 80073d8:	4641      	mov	r1, r8
 80073da:	9002      	str	r0, [sp, #8]
 80073dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073e0:	4650      	mov	r0, sl
 80073e2:	f000 fc5b 	bl	8007c9c <__mcmp>
 80073e6:	463a      	mov	r2, r7
 80073e8:	9005      	str	r0, [sp, #20]
 80073ea:	4631      	mov	r1, r6
 80073ec:	4620      	mov	r0, r4
 80073ee:	f000 fc71 	bl	8007cd4 <__mdiff>
 80073f2:	68c2      	ldr	r2, [r0, #12]
 80073f4:	4605      	mov	r5, r0
 80073f6:	bb02      	cbnz	r2, 800743a <_dtoa_r+0xa7a>
 80073f8:	4601      	mov	r1, r0
 80073fa:	4650      	mov	r0, sl
 80073fc:	f000 fc4e 	bl	8007c9c <__mcmp>
 8007400:	4602      	mov	r2, r0
 8007402:	4629      	mov	r1, r5
 8007404:	4620      	mov	r0, r4
 8007406:	9209      	str	r2, [sp, #36]	; 0x24
 8007408:	f000 fa0c 	bl	8007824 <_Bfree>
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007410:	9d04      	ldr	r5, [sp, #16]
 8007412:	ea43 0102 	orr.w	r1, r3, r2
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	4319      	orrs	r1, r3
 800741a:	d110      	bne.n	800743e <_dtoa_r+0xa7e>
 800741c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007420:	d029      	beq.n	8007476 <_dtoa_r+0xab6>
 8007422:	9b05      	ldr	r3, [sp, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dd02      	ble.n	800742e <_dtoa_r+0xa6e>
 8007428:	9b02      	ldr	r3, [sp, #8]
 800742a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	f883 9000 	strb.w	r9, [r3]
 8007434:	e774      	b.n	8007320 <_dtoa_r+0x960>
 8007436:	4638      	mov	r0, r7
 8007438:	e7ba      	b.n	80073b0 <_dtoa_r+0x9f0>
 800743a:	2201      	movs	r2, #1
 800743c:	e7e1      	b.n	8007402 <_dtoa_r+0xa42>
 800743e:	9b05      	ldr	r3, [sp, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	db04      	blt.n	800744e <_dtoa_r+0xa8e>
 8007444:	9907      	ldr	r1, [sp, #28]
 8007446:	430b      	orrs	r3, r1
 8007448:	9906      	ldr	r1, [sp, #24]
 800744a:	430b      	orrs	r3, r1
 800744c:	d120      	bne.n	8007490 <_dtoa_r+0xad0>
 800744e:	2a00      	cmp	r2, #0
 8007450:	dded      	ble.n	800742e <_dtoa_r+0xa6e>
 8007452:	4651      	mov	r1, sl
 8007454:	2201      	movs	r2, #1
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fbb4 	bl	8007bc4 <__lshift>
 800745c:	4631      	mov	r1, r6
 800745e:	4682      	mov	sl, r0
 8007460:	f000 fc1c 	bl	8007c9c <__mcmp>
 8007464:	2800      	cmp	r0, #0
 8007466:	dc03      	bgt.n	8007470 <_dtoa_r+0xab0>
 8007468:	d1e1      	bne.n	800742e <_dtoa_r+0xa6e>
 800746a:	f019 0f01 	tst.w	r9, #1
 800746e:	d0de      	beq.n	800742e <_dtoa_r+0xa6e>
 8007470:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007474:	d1d8      	bne.n	8007428 <_dtoa_r+0xa68>
 8007476:	9a01      	ldr	r2, [sp, #4]
 8007478:	2339      	movs	r3, #57	; 0x39
 800747a:	7013      	strb	r3, [r2, #0]
 800747c:	462b      	mov	r3, r5
 800747e:	461d      	mov	r5, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007486:	2a39      	cmp	r2, #57	; 0x39
 8007488:	d06c      	beq.n	8007564 <_dtoa_r+0xba4>
 800748a:	3201      	adds	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e747      	b.n	8007320 <_dtoa_r+0x960>
 8007490:	2a00      	cmp	r2, #0
 8007492:	dd07      	ble.n	80074a4 <_dtoa_r+0xae4>
 8007494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007498:	d0ed      	beq.n	8007476 <_dtoa_r+0xab6>
 800749a:	9a01      	ldr	r2, [sp, #4]
 800749c:	f109 0301 	add.w	r3, r9, #1
 80074a0:	7013      	strb	r3, [r2, #0]
 80074a2:	e73d      	b.n	8007320 <_dtoa_r+0x960>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	9a08      	ldr	r2, [sp, #32]
 80074a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d043      	beq.n	8007538 <_dtoa_r+0xb78>
 80074b0:	4651      	mov	r1, sl
 80074b2:	2300      	movs	r3, #0
 80074b4:	220a      	movs	r2, #10
 80074b6:	4620      	mov	r0, r4
 80074b8:	f000 f9d6 	bl	8007868 <__multadd>
 80074bc:	45b8      	cmp	r8, r7
 80074be:	4682      	mov	sl, r0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	f04f 020a 	mov.w	r2, #10
 80074c8:	4641      	mov	r1, r8
 80074ca:	4620      	mov	r0, r4
 80074cc:	d107      	bne.n	80074de <_dtoa_r+0xb1e>
 80074ce:	f000 f9cb 	bl	8007868 <__multadd>
 80074d2:	4680      	mov	r8, r0
 80074d4:	4607      	mov	r7, r0
 80074d6:	9b04      	ldr	r3, [sp, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	9304      	str	r3, [sp, #16]
 80074dc:	e775      	b.n	80073ca <_dtoa_r+0xa0a>
 80074de:	f000 f9c3 	bl	8007868 <__multadd>
 80074e2:	4639      	mov	r1, r7
 80074e4:	4680      	mov	r8, r0
 80074e6:	2300      	movs	r3, #0
 80074e8:	220a      	movs	r2, #10
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f9bc 	bl	8007868 <__multadd>
 80074f0:	4607      	mov	r7, r0
 80074f2:	e7f0      	b.n	80074d6 <_dtoa_r+0xb16>
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	9d00      	ldr	r5, [sp, #0]
 80074fa:	4631      	mov	r1, r6
 80074fc:	4650      	mov	r0, sl
 80074fe:	f7ff f9d6 	bl	80068ae <quorem>
 8007502:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007506:	9b00      	ldr	r3, [sp, #0]
 8007508:	f805 9b01 	strb.w	r9, [r5], #1
 800750c:	1aea      	subs	r2, r5, r3
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	4293      	cmp	r3, r2
 8007512:	dd07      	ble.n	8007524 <_dtoa_r+0xb64>
 8007514:	4651      	mov	r1, sl
 8007516:	2300      	movs	r3, #0
 8007518:	220a      	movs	r2, #10
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f9a4 	bl	8007868 <__multadd>
 8007520:	4682      	mov	sl, r0
 8007522:	e7ea      	b.n	80074fa <_dtoa_r+0xb3a>
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	bfc8      	it	gt
 800752a:	461d      	movgt	r5, r3
 800752c:	9b00      	ldr	r3, [sp, #0]
 800752e:	bfd8      	it	le
 8007530:	2501      	movle	r5, #1
 8007532:	441d      	add	r5, r3
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	4651      	mov	r1, sl
 800753a:	2201      	movs	r2, #1
 800753c:	4620      	mov	r0, r4
 800753e:	f000 fb41 	bl	8007bc4 <__lshift>
 8007542:	4631      	mov	r1, r6
 8007544:	4682      	mov	sl, r0
 8007546:	f000 fba9 	bl	8007c9c <__mcmp>
 800754a:	2800      	cmp	r0, #0
 800754c:	dc96      	bgt.n	800747c <_dtoa_r+0xabc>
 800754e:	d102      	bne.n	8007556 <_dtoa_r+0xb96>
 8007550:	f019 0f01 	tst.w	r9, #1
 8007554:	d192      	bne.n	800747c <_dtoa_r+0xabc>
 8007556:	462b      	mov	r3, r5
 8007558:	461d      	mov	r5, r3
 800755a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800755e:	2a30      	cmp	r2, #48	; 0x30
 8007560:	d0fa      	beq.n	8007558 <_dtoa_r+0xb98>
 8007562:	e6dd      	b.n	8007320 <_dtoa_r+0x960>
 8007564:	9a00      	ldr	r2, [sp, #0]
 8007566:	429a      	cmp	r2, r3
 8007568:	d189      	bne.n	800747e <_dtoa_r+0xabe>
 800756a:	f10b 0b01 	add.w	fp, fp, #1
 800756e:	2331      	movs	r3, #49	; 0x31
 8007570:	e796      	b.n	80074a0 <_dtoa_r+0xae0>
 8007572:	4b0a      	ldr	r3, [pc, #40]	; (800759c <_dtoa_r+0xbdc>)
 8007574:	f7ff ba99 	b.w	8006aaa <_dtoa_r+0xea>
 8007578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800757a:	2b00      	cmp	r3, #0
 800757c:	f47f aa6d 	bne.w	8006a5a <_dtoa_r+0x9a>
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <_dtoa_r+0xbe0>)
 8007582:	f7ff ba92 	b.w	8006aaa <_dtoa_r+0xea>
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	dcb5      	bgt.n	80074f8 <_dtoa_r+0xb38>
 800758c:	9b07      	ldr	r3, [sp, #28]
 800758e:	2b02      	cmp	r3, #2
 8007590:	f73f aeb1 	bgt.w	80072f6 <_dtoa_r+0x936>
 8007594:	e7b0      	b.n	80074f8 <_dtoa_r+0xb38>
 8007596:	bf00      	nop
 8007598:	0800a6b4 	.word	0x0800a6b4
 800759c:	0800a614 	.word	0x0800a614
 80075a0:	0800a638 	.word	0x0800a638

080075a4 <_free_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d044      	beq.n	8007634 <_free_r+0x90>
 80075aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ae:	9001      	str	r0, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f1a1 0404 	sub.w	r4, r1, #4
 80075b6:	bfb8      	it	lt
 80075b8:	18e4      	addlt	r4, r4, r3
 80075ba:	f000 f8e7 	bl	800778c <__malloc_lock>
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <_free_r+0x94>)
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x30>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	f000 b8e2 	b.w	8007798 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x46>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1949      	addeq	r1, r1, r5
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x22>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x50>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x46>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x70>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x26>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	440c      	add	r4, r1
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x26>
 8007614:	d902      	bls.n	800761c <_free_r+0x78>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x26>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x26>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	200008dc 	.word	0x200008dc

0800763c <malloc>:
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <malloc+0xc>)
 800763e:	4601      	mov	r1, r0
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	f000 b823 	b.w	800768c <_malloc_r>
 8007646:	bf00      	nop
 8007648:	2000006c 	.word	0x2000006c

0800764c <sbrk_aligned>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4e0e      	ldr	r6, [pc, #56]	; (8007688 <sbrk_aligned+0x3c>)
 8007650:	460c      	mov	r4, r1
 8007652:	6831      	ldr	r1, [r6, #0]
 8007654:	4605      	mov	r5, r0
 8007656:	b911      	cbnz	r1, 800765e <sbrk_aligned+0x12>
 8007658:	f000 fe40 	bl	80082dc <_sbrk_r>
 800765c:	6030      	str	r0, [r6, #0]
 800765e:	4621      	mov	r1, r4
 8007660:	4628      	mov	r0, r5
 8007662:	f000 fe3b 	bl	80082dc <_sbrk_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	d00a      	beq.n	8007680 <sbrk_aligned+0x34>
 800766a:	1cc4      	adds	r4, r0, #3
 800766c:	f024 0403 	bic.w	r4, r4, #3
 8007670:	42a0      	cmp	r0, r4
 8007672:	d007      	beq.n	8007684 <sbrk_aligned+0x38>
 8007674:	1a21      	subs	r1, r4, r0
 8007676:	4628      	mov	r0, r5
 8007678:	f000 fe30 	bl	80082dc <_sbrk_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d101      	bne.n	8007684 <sbrk_aligned+0x38>
 8007680:	f04f 34ff 	mov.w	r4, #4294967295
 8007684:	4620      	mov	r0, r4
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	200008e0 	.word	0x200008e0

0800768c <_malloc_r>:
 800768c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007690:	1ccd      	adds	r5, r1, #3
 8007692:	f025 0503 	bic.w	r5, r5, #3
 8007696:	3508      	adds	r5, #8
 8007698:	2d0c      	cmp	r5, #12
 800769a:	bf38      	it	cc
 800769c:	250c      	movcc	r5, #12
 800769e:	2d00      	cmp	r5, #0
 80076a0:	4607      	mov	r7, r0
 80076a2:	db01      	blt.n	80076a8 <_malloc_r+0x1c>
 80076a4:	42a9      	cmp	r1, r5
 80076a6:	d905      	bls.n	80076b4 <_malloc_r+0x28>
 80076a8:	230c      	movs	r3, #12
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	2600      	movs	r6, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007788 <_malloc_r+0xfc>
 80076b8:	f000 f868 	bl	800778c <__malloc_lock>
 80076bc:	f8d8 3000 	ldr.w	r3, [r8]
 80076c0:	461c      	mov	r4, r3
 80076c2:	bb5c      	cbnz	r4, 800771c <_malloc_r+0x90>
 80076c4:	4629      	mov	r1, r5
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ffc0 	bl	800764c <sbrk_aligned>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	4604      	mov	r4, r0
 80076d0:	d155      	bne.n	800777e <_malloc_r+0xf2>
 80076d2:	f8d8 4000 	ldr.w	r4, [r8]
 80076d6:	4626      	mov	r6, r4
 80076d8:	2e00      	cmp	r6, #0
 80076da:	d145      	bne.n	8007768 <_malloc_r+0xdc>
 80076dc:	2c00      	cmp	r4, #0
 80076de:	d048      	beq.n	8007772 <_malloc_r+0xe6>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	4631      	mov	r1, r6
 80076e4:	4638      	mov	r0, r7
 80076e6:	eb04 0903 	add.w	r9, r4, r3
 80076ea:	f000 fdf7 	bl	80082dc <_sbrk_r>
 80076ee:	4581      	cmp	r9, r0
 80076f0:	d13f      	bne.n	8007772 <_malloc_r+0xe6>
 80076f2:	6821      	ldr	r1, [r4, #0]
 80076f4:	1a6d      	subs	r5, r5, r1
 80076f6:	4629      	mov	r1, r5
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff ffa7 	bl	800764c <sbrk_aligned>
 80076fe:	3001      	adds	r0, #1
 8007700:	d037      	beq.n	8007772 <_malloc_r+0xe6>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	442b      	add	r3, r5
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	f8d8 3000 	ldr.w	r3, [r8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d038      	beq.n	8007782 <_malloc_r+0xf6>
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	42a2      	cmp	r2, r4
 8007714:	d12b      	bne.n	800776e <_malloc_r+0xe2>
 8007716:	2200      	movs	r2, #0
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	e00f      	b.n	800773c <_malloc_r+0xb0>
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	1b52      	subs	r2, r2, r5
 8007720:	d41f      	bmi.n	8007762 <_malloc_r+0xd6>
 8007722:	2a0b      	cmp	r2, #11
 8007724:	d917      	bls.n	8007756 <_malloc_r+0xca>
 8007726:	1961      	adds	r1, r4, r5
 8007728:	42a3      	cmp	r3, r4
 800772a:	6025      	str	r5, [r4, #0]
 800772c:	bf18      	it	ne
 800772e:	6059      	strne	r1, [r3, #4]
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	bf08      	it	eq
 8007734:	f8c8 1000 	streq.w	r1, [r8]
 8007738:	5162      	str	r2, [r4, r5]
 800773a:	604b      	str	r3, [r1, #4]
 800773c:	4638      	mov	r0, r7
 800773e:	f104 060b 	add.w	r6, r4, #11
 8007742:	f000 f829 	bl	8007798 <__malloc_unlock>
 8007746:	f026 0607 	bic.w	r6, r6, #7
 800774a:	1d23      	adds	r3, r4, #4
 800774c:	1af2      	subs	r2, r6, r3
 800774e:	d0ae      	beq.n	80076ae <_malloc_r+0x22>
 8007750:	1b9b      	subs	r3, r3, r6
 8007752:	50a3      	str	r3, [r4, r2]
 8007754:	e7ab      	b.n	80076ae <_malloc_r+0x22>
 8007756:	42a3      	cmp	r3, r4
 8007758:	6862      	ldr	r2, [r4, #4]
 800775a:	d1dd      	bne.n	8007718 <_malloc_r+0x8c>
 800775c:	f8c8 2000 	str.w	r2, [r8]
 8007760:	e7ec      	b.n	800773c <_malloc_r+0xb0>
 8007762:	4623      	mov	r3, r4
 8007764:	6864      	ldr	r4, [r4, #4]
 8007766:	e7ac      	b.n	80076c2 <_malloc_r+0x36>
 8007768:	4634      	mov	r4, r6
 800776a:	6876      	ldr	r6, [r6, #4]
 800776c:	e7b4      	b.n	80076d8 <_malloc_r+0x4c>
 800776e:	4613      	mov	r3, r2
 8007770:	e7cc      	b.n	800770c <_malloc_r+0x80>
 8007772:	230c      	movs	r3, #12
 8007774:	603b      	str	r3, [r7, #0]
 8007776:	4638      	mov	r0, r7
 8007778:	f000 f80e 	bl	8007798 <__malloc_unlock>
 800777c:	e797      	b.n	80076ae <_malloc_r+0x22>
 800777e:	6025      	str	r5, [r4, #0]
 8007780:	e7dc      	b.n	800773c <_malloc_r+0xb0>
 8007782:	605b      	str	r3, [r3, #4]
 8007784:	deff      	udf	#255	; 0xff
 8007786:	bf00      	nop
 8007788:	200008dc 	.word	0x200008dc

0800778c <__malloc_lock>:
 800778c:	4801      	ldr	r0, [pc, #4]	; (8007794 <__malloc_lock+0x8>)
 800778e:	f7ff b88c 	b.w	80068aa <__retarget_lock_acquire_recursive>
 8007792:	bf00      	nop
 8007794:	200008d8 	.word	0x200008d8

08007798 <__malloc_unlock>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__malloc_unlock+0x8>)
 800779a:	f7ff b887 	b.w	80068ac <__retarget_lock_release_recursive>
 800779e:	bf00      	nop
 80077a0:	200008d8 	.word	0x200008d8

080077a4 <_Balloc>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	69c6      	ldr	r6, [r0, #28]
 80077a8:	4604      	mov	r4, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	b976      	cbnz	r6, 80077cc <_Balloc+0x28>
 80077ae:	2010      	movs	r0, #16
 80077b0:	f7ff ff44 	bl	800763c <malloc>
 80077b4:	4602      	mov	r2, r0
 80077b6:	61e0      	str	r0, [r4, #28]
 80077b8:	b920      	cbnz	r0, 80077c4 <_Balloc+0x20>
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <_Balloc+0x78>)
 80077bc:	4818      	ldr	r0, [pc, #96]	; (8007820 <_Balloc+0x7c>)
 80077be:	216b      	movs	r1, #107	; 0x6b
 80077c0:	f000 fdaa 	bl	8008318 <__assert_func>
 80077c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077c8:	6006      	str	r6, [r0, #0]
 80077ca:	60c6      	str	r6, [r0, #12]
 80077cc:	69e6      	ldr	r6, [r4, #28]
 80077ce:	68f3      	ldr	r3, [r6, #12]
 80077d0:	b183      	cbz	r3, 80077f4 <_Balloc+0x50>
 80077d2:	69e3      	ldr	r3, [r4, #28]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077da:	b9b8      	cbnz	r0, 800780c <_Balloc+0x68>
 80077dc:	2101      	movs	r1, #1
 80077de:	fa01 f605 	lsl.w	r6, r1, r5
 80077e2:	1d72      	adds	r2, r6, #5
 80077e4:	0092      	lsls	r2, r2, #2
 80077e6:	4620      	mov	r0, r4
 80077e8:	f000 fdb4 	bl	8008354 <_calloc_r>
 80077ec:	b160      	cbz	r0, 8007808 <_Balloc+0x64>
 80077ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077f2:	e00e      	b.n	8007812 <_Balloc+0x6e>
 80077f4:	2221      	movs	r2, #33	; 0x21
 80077f6:	2104      	movs	r1, #4
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fdab 	bl	8008354 <_calloc_r>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	60f0      	str	r0, [r6, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e4      	bne.n	80077d2 <_Balloc+0x2e>
 8007808:	2000      	movs	r0, #0
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	6802      	ldr	r2, [r0, #0]
 800780e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007812:	2300      	movs	r3, #0
 8007814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007818:	e7f7      	b.n	800780a <_Balloc+0x66>
 800781a:	bf00      	nop
 800781c:	0800a645 	.word	0x0800a645
 8007820:	0800a6c5 	.word	0x0800a6c5

08007824 <_Bfree>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	69c6      	ldr	r6, [r0, #28]
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b976      	cbnz	r6, 800784c <_Bfree+0x28>
 800782e:	2010      	movs	r0, #16
 8007830:	f7ff ff04 	bl	800763c <malloc>
 8007834:	4602      	mov	r2, r0
 8007836:	61e8      	str	r0, [r5, #28]
 8007838:	b920      	cbnz	r0, 8007844 <_Bfree+0x20>
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <_Bfree+0x3c>)
 800783c:	4809      	ldr	r0, [pc, #36]	; (8007864 <_Bfree+0x40>)
 800783e:	218f      	movs	r1, #143	; 0x8f
 8007840:	f000 fd6a 	bl	8008318 <__assert_func>
 8007844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007848:	6006      	str	r6, [r0, #0]
 800784a:	60c6      	str	r6, [r0, #12]
 800784c:	b13c      	cbz	r4, 800785e <_Bfree+0x3a>
 800784e:	69eb      	ldr	r3, [r5, #28]
 8007850:	6862      	ldr	r2, [r4, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007858:	6021      	str	r1, [r4, #0]
 800785a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	0800a645 	.word	0x0800a645
 8007864:	0800a6c5 	.word	0x0800a6c5

08007868 <__multadd>:
 8007868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786c:	690d      	ldr	r5, [r1, #16]
 800786e:	4607      	mov	r7, r0
 8007870:	460c      	mov	r4, r1
 8007872:	461e      	mov	r6, r3
 8007874:	f101 0c14 	add.w	ip, r1, #20
 8007878:	2000      	movs	r0, #0
 800787a:	f8dc 3000 	ldr.w	r3, [ip]
 800787e:	b299      	uxth	r1, r3
 8007880:	fb02 6101 	mla	r1, r2, r1, r6
 8007884:	0c1e      	lsrs	r6, r3, #16
 8007886:	0c0b      	lsrs	r3, r1, #16
 8007888:	fb02 3306 	mla	r3, r2, r6, r3
 800788c:	b289      	uxth	r1, r1
 800788e:	3001      	adds	r0, #1
 8007890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007894:	4285      	cmp	r5, r0
 8007896:	f84c 1b04 	str.w	r1, [ip], #4
 800789a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800789e:	dcec      	bgt.n	800787a <__multadd+0x12>
 80078a0:	b30e      	cbz	r6, 80078e6 <__multadd+0x7e>
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc19      	bgt.n	80078dc <__multadd+0x74>
 80078a8:	6861      	ldr	r1, [r4, #4]
 80078aa:	4638      	mov	r0, r7
 80078ac:	3101      	adds	r1, #1
 80078ae:	f7ff ff79 	bl	80077a4 <_Balloc>
 80078b2:	4680      	mov	r8, r0
 80078b4:	b928      	cbnz	r0, 80078c2 <__multadd+0x5a>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <__multadd+0x84>)
 80078ba:	480d      	ldr	r0, [pc, #52]	; (80078f0 <__multadd+0x88>)
 80078bc:	21ba      	movs	r1, #186	; 0xba
 80078be:	f000 fd2b 	bl	8008318 <__assert_func>
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	3202      	adds	r2, #2
 80078c6:	f104 010c 	add.w	r1, r4, #12
 80078ca:	0092      	lsls	r2, r2, #2
 80078cc:	300c      	adds	r0, #12
 80078ce:	f000 fd15 	bl	80082fc <memcpy>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4638      	mov	r0, r7
 80078d6:	f7ff ffa5 	bl	8007824 <_Bfree>
 80078da:	4644      	mov	r4, r8
 80078dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078e0:	3501      	adds	r5, #1
 80078e2:	615e      	str	r6, [r3, #20]
 80078e4:	6125      	str	r5, [r4, #16]
 80078e6:	4620      	mov	r0, r4
 80078e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ec:	0800a6b4 	.word	0x0800a6b4
 80078f0:	0800a6c5 	.word	0x0800a6c5

080078f4 <__hi0bits>:
 80078f4:	0c03      	lsrs	r3, r0, #16
 80078f6:	041b      	lsls	r3, r3, #16
 80078f8:	b9d3      	cbnz	r3, 8007930 <__hi0bits+0x3c>
 80078fa:	0400      	lsls	r0, r0, #16
 80078fc:	2310      	movs	r3, #16
 80078fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007902:	bf04      	itt	eq
 8007904:	0200      	lsleq	r0, r0, #8
 8007906:	3308      	addeq	r3, #8
 8007908:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800790c:	bf04      	itt	eq
 800790e:	0100      	lsleq	r0, r0, #4
 8007910:	3304      	addeq	r3, #4
 8007912:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007916:	bf04      	itt	eq
 8007918:	0080      	lsleq	r0, r0, #2
 800791a:	3302      	addeq	r3, #2
 800791c:	2800      	cmp	r0, #0
 800791e:	db05      	blt.n	800792c <__hi0bits+0x38>
 8007920:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007924:	f103 0301 	add.w	r3, r3, #1
 8007928:	bf08      	it	eq
 800792a:	2320      	moveq	r3, #32
 800792c:	4618      	mov	r0, r3
 800792e:	4770      	bx	lr
 8007930:	2300      	movs	r3, #0
 8007932:	e7e4      	b.n	80078fe <__hi0bits+0xa>

08007934 <__lo0bits>:
 8007934:	6803      	ldr	r3, [r0, #0]
 8007936:	f013 0207 	ands.w	r2, r3, #7
 800793a:	d00c      	beq.n	8007956 <__lo0bits+0x22>
 800793c:	07d9      	lsls	r1, r3, #31
 800793e:	d422      	bmi.n	8007986 <__lo0bits+0x52>
 8007940:	079a      	lsls	r2, r3, #30
 8007942:	bf49      	itett	mi
 8007944:	085b      	lsrmi	r3, r3, #1
 8007946:	089b      	lsrpl	r3, r3, #2
 8007948:	6003      	strmi	r3, [r0, #0]
 800794a:	2201      	movmi	r2, #1
 800794c:	bf5c      	itt	pl
 800794e:	6003      	strpl	r3, [r0, #0]
 8007950:	2202      	movpl	r2, #2
 8007952:	4610      	mov	r0, r2
 8007954:	4770      	bx	lr
 8007956:	b299      	uxth	r1, r3
 8007958:	b909      	cbnz	r1, 800795e <__lo0bits+0x2a>
 800795a:	0c1b      	lsrs	r3, r3, #16
 800795c:	2210      	movs	r2, #16
 800795e:	b2d9      	uxtb	r1, r3
 8007960:	b909      	cbnz	r1, 8007966 <__lo0bits+0x32>
 8007962:	3208      	adds	r2, #8
 8007964:	0a1b      	lsrs	r3, r3, #8
 8007966:	0719      	lsls	r1, r3, #28
 8007968:	bf04      	itt	eq
 800796a:	091b      	lsreq	r3, r3, #4
 800796c:	3204      	addeq	r2, #4
 800796e:	0799      	lsls	r1, r3, #30
 8007970:	bf04      	itt	eq
 8007972:	089b      	lsreq	r3, r3, #2
 8007974:	3202      	addeq	r2, #2
 8007976:	07d9      	lsls	r1, r3, #31
 8007978:	d403      	bmi.n	8007982 <__lo0bits+0x4e>
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	f102 0201 	add.w	r2, r2, #1
 8007980:	d003      	beq.n	800798a <__lo0bits+0x56>
 8007982:	6003      	str	r3, [r0, #0]
 8007984:	e7e5      	b.n	8007952 <__lo0bits+0x1e>
 8007986:	2200      	movs	r2, #0
 8007988:	e7e3      	b.n	8007952 <__lo0bits+0x1e>
 800798a:	2220      	movs	r2, #32
 800798c:	e7e1      	b.n	8007952 <__lo0bits+0x1e>
	...

08007990 <__i2b>:
 8007990:	b510      	push	{r4, lr}
 8007992:	460c      	mov	r4, r1
 8007994:	2101      	movs	r1, #1
 8007996:	f7ff ff05 	bl	80077a4 <_Balloc>
 800799a:	4602      	mov	r2, r0
 800799c:	b928      	cbnz	r0, 80079aa <__i2b+0x1a>
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <__i2b+0x24>)
 80079a0:	4805      	ldr	r0, [pc, #20]	; (80079b8 <__i2b+0x28>)
 80079a2:	f240 1145 	movw	r1, #325	; 0x145
 80079a6:	f000 fcb7 	bl	8008318 <__assert_func>
 80079aa:	2301      	movs	r3, #1
 80079ac:	6144      	str	r4, [r0, #20]
 80079ae:	6103      	str	r3, [r0, #16]
 80079b0:	bd10      	pop	{r4, pc}
 80079b2:	bf00      	nop
 80079b4:	0800a6b4 	.word	0x0800a6b4
 80079b8:	0800a6c5 	.word	0x0800a6c5

080079bc <__multiply>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	4691      	mov	r9, r2
 80079c2:	690a      	ldr	r2, [r1, #16]
 80079c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bfb8      	it	lt
 80079cc:	460b      	movlt	r3, r1
 80079ce:	460c      	mov	r4, r1
 80079d0:	bfbc      	itt	lt
 80079d2:	464c      	movlt	r4, r9
 80079d4:	4699      	movlt	r9, r3
 80079d6:	6927      	ldr	r7, [r4, #16]
 80079d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079dc:	68a3      	ldr	r3, [r4, #8]
 80079de:	6861      	ldr	r1, [r4, #4]
 80079e0:	eb07 060a 	add.w	r6, r7, sl
 80079e4:	42b3      	cmp	r3, r6
 80079e6:	b085      	sub	sp, #20
 80079e8:	bfb8      	it	lt
 80079ea:	3101      	addlt	r1, #1
 80079ec:	f7ff feda 	bl	80077a4 <_Balloc>
 80079f0:	b930      	cbnz	r0, 8007a00 <__multiply+0x44>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4b44      	ldr	r3, [pc, #272]	; (8007b08 <__multiply+0x14c>)
 80079f6:	4845      	ldr	r0, [pc, #276]	; (8007b0c <__multiply+0x150>)
 80079f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079fc:	f000 fc8c 	bl	8008318 <__assert_func>
 8007a00:	f100 0514 	add.w	r5, r0, #20
 8007a04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a08:	462b      	mov	r3, r5
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	4543      	cmp	r3, r8
 8007a0e:	d321      	bcc.n	8007a54 <__multiply+0x98>
 8007a10:	f104 0314 	add.w	r3, r4, #20
 8007a14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a18:	f109 0314 	add.w	r3, r9, #20
 8007a1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a20:	9202      	str	r2, [sp, #8]
 8007a22:	1b3a      	subs	r2, r7, r4
 8007a24:	3a15      	subs	r2, #21
 8007a26:	f022 0203 	bic.w	r2, r2, #3
 8007a2a:	3204      	adds	r2, #4
 8007a2c:	f104 0115 	add.w	r1, r4, #21
 8007a30:	428f      	cmp	r7, r1
 8007a32:	bf38      	it	cc
 8007a34:	2204      	movcc	r2, #4
 8007a36:	9201      	str	r2, [sp, #4]
 8007a38:	9a02      	ldr	r2, [sp, #8]
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d80c      	bhi.n	8007a5a <__multiply+0x9e>
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	dd03      	ble.n	8007a4c <__multiply+0x90>
 8007a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05b      	beq.n	8007b04 <__multiply+0x148>
 8007a4c:	6106      	str	r6, [r0, #16]
 8007a4e:	b005      	add	sp, #20
 8007a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a54:	f843 2b04 	str.w	r2, [r3], #4
 8007a58:	e7d8      	b.n	8007a0c <__multiply+0x50>
 8007a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a5e:	f1ba 0f00 	cmp.w	sl, #0
 8007a62:	d024      	beq.n	8007aae <__multiply+0xf2>
 8007a64:	f104 0e14 	add.w	lr, r4, #20
 8007a68:	46a9      	mov	r9, r5
 8007a6a:	f04f 0c00 	mov.w	ip, #0
 8007a6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a72:	f8d9 1000 	ldr.w	r1, [r9]
 8007a76:	fa1f fb82 	uxth.w	fp, r2
 8007a7a:	b289      	uxth	r1, r1
 8007a7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a84:	f8d9 2000 	ldr.w	r2, [r9]
 8007a88:	4461      	add	r1, ip
 8007a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a96:	b289      	uxth	r1, r1
 8007a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a9c:	4577      	cmp	r7, lr
 8007a9e:	f849 1b04 	str.w	r1, [r9], #4
 8007aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007aa6:	d8e2      	bhi.n	8007a6e <__multiply+0xb2>
 8007aa8:	9a01      	ldr	r2, [sp, #4]
 8007aaa:	f845 c002 	str.w	ip, [r5, r2]
 8007aae:	9a03      	ldr	r2, [sp, #12]
 8007ab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	f1b9 0f00 	cmp.w	r9, #0
 8007aba:	d021      	beq.n	8007b00 <__multiply+0x144>
 8007abc:	6829      	ldr	r1, [r5, #0]
 8007abe:	f104 0c14 	add.w	ip, r4, #20
 8007ac2:	46ae      	mov	lr, r5
 8007ac4:	f04f 0a00 	mov.w	sl, #0
 8007ac8:	f8bc b000 	ldrh.w	fp, [ip]
 8007acc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8007ad4:	4452      	add	r2, sl
 8007ad6:	b289      	uxth	r1, r1
 8007ad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007adc:	f84e 1b04 	str.w	r1, [lr], #4
 8007ae0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ae8:	f8be 1000 	ldrh.w	r1, [lr]
 8007aec:	fb09 110a 	mla	r1, r9, sl, r1
 8007af0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007af4:	4567      	cmp	r7, ip
 8007af6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007afa:	d8e5      	bhi.n	8007ac8 <__multiply+0x10c>
 8007afc:	9a01      	ldr	r2, [sp, #4]
 8007afe:	50a9      	str	r1, [r5, r2]
 8007b00:	3504      	adds	r5, #4
 8007b02:	e799      	b.n	8007a38 <__multiply+0x7c>
 8007b04:	3e01      	subs	r6, #1
 8007b06:	e79b      	b.n	8007a40 <__multiply+0x84>
 8007b08:	0800a6b4 	.word	0x0800a6b4
 8007b0c:	0800a6c5 	.word	0x0800a6c5

08007b10 <__pow5mult>:
 8007b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b14:	4615      	mov	r5, r2
 8007b16:	f012 0203 	ands.w	r2, r2, #3
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	d007      	beq.n	8007b30 <__pow5mult+0x20>
 8007b20:	4c25      	ldr	r4, [pc, #148]	; (8007bb8 <__pow5mult+0xa8>)
 8007b22:	3a01      	subs	r2, #1
 8007b24:	2300      	movs	r3, #0
 8007b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b2a:	f7ff fe9d 	bl	8007868 <__multadd>
 8007b2e:	4607      	mov	r7, r0
 8007b30:	10ad      	asrs	r5, r5, #2
 8007b32:	d03d      	beq.n	8007bb0 <__pow5mult+0xa0>
 8007b34:	69f4      	ldr	r4, [r6, #28]
 8007b36:	b97c      	cbnz	r4, 8007b58 <__pow5mult+0x48>
 8007b38:	2010      	movs	r0, #16
 8007b3a:	f7ff fd7f 	bl	800763c <malloc>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	61f0      	str	r0, [r6, #28]
 8007b42:	b928      	cbnz	r0, 8007b50 <__pow5mult+0x40>
 8007b44:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <__pow5mult+0xac>)
 8007b46:	481e      	ldr	r0, [pc, #120]	; (8007bc0 <__pow5mult+0xb0>)
 8007b48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b4c:	f000 fbe4 	bl	8008318 <__assert_func>
 8007b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b54:	6004      	str	r4, [r0, #0]
 8007b56:	60c4      	str	r4, [r0, #12]
 8007b58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b60:	b94c      	cbnz	r4, 8007b76 <__pow5mult+0x66>
 8007b62:	f240 2171 	movw	r1, #625	; 0x271
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7ff ff12 	bl	8007990 <__i2b>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b72:	4604      	mov	r4, r0
 8007b74:	6003      	str	r3, [r0, #0]
 8007b76:	f04f 0900 	mov.w	r9, #0
 8007b7a:	07eb      	lsls	r3, r5, #31
 8007b7c:	d50a      	bpl.n	8007b94 <__pow5mult+0x84>
 8007b7e:	4639      	mov	r1, r7
 8007b80:	4622      	mov	r2, r4
 8007b82:	4630      	mov	r0, r6
 8007b84:	f7ff ff1a 	bl	80079bc <__multiply>
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	f7ff fe49 	bl	8007824 <_Bfree>
 8007b92:	4647      	mov	r7, r8
 8007b94:	106d      	asrs	r5, r5, #1
 8007b96:	d00b      	beq.n	8007bb0 <__pow5mult+0xa0>
 8007b98:	6820      	ldr	r0, [r4, #0]
 8007b9a:	b938      	cbnz	r0, 8007bac <__pow5mult+0x9c>
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f7ff ff0b 	bl	80079bc <__multiply>
 8007ba6:	6020      	str	r0, [r4, #0]
 8007ba8:	f8c0 9000 	str.w	r9, [r0]
 8007bac:	4604      	mov	r4, r0
 8007bae:	e7e4      	b.n	8007b7a <__pow5mult+0x6a>
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bb6:	bf00      	nop
 8007bb8:	0800a810 	.word	0x0800a810
 8007bbc:	0800a645 	.word	0x0800a645
 8007bc0:	0800a6c5 	.word	0x0800a6c5

08007bc4 <__lshift>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	460c      	mov	r4, r1
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bdc:	f108 0601 	add.w	r6, r8, #1
 8007be0:	42b3      	cmp	r3, r6
 8007be2:	db0b      	blt.n	8007bfc <__lshift+0x38>
 8007be4:	4638      	mov	r0, r7
 8007be6:	f7ff fddd 	bl	80077a4 <_Balloc>
 8007bea:	4605      	mov	r5, r0
 8007bec:	b948      	cbnz	r0, 8007c02 <__lshift+0x3e>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	4b28      	ldr	r3, [pc, #160]	; (8007c94 <__lshift+0xd0>)
 8007bf2:	4829      	ldr	r0, [pc, #164]	; (8007c98 <__lshift+0xd4>)
 8007bf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bf8:	f000 fb8e 	bl	8008318 <__assert_func>
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	e7ee      	b.n	8007be0 <__lshift+0x1c>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f100 0114 	add.w	r1, r0, #20
 8007c08:	f100 0210 	add.w	r2, r0, #16
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	4553      	cmp	r3, sl
 8007c10:	db33      	blt.n	8007c7a <__lshift+0xb6>
 8007c12:	6920      	ldr	r0, [r4, #16]
 8007c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c18:	f104 0314 	add.w	r3, r4, #20
 8007c1c:	f019 091f 	ands.w	r9, r9, #31
 8007c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c28:	d02b      	beq.n	8007c82 <__lshift+0xbe>
 8007c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8007c2e:	468a      	mov	sl, r1
 8007c30:	2200      	movs	r2, #0
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	fa00 f009 	lsl.w	r0, r0, r9
 8007c38:	4310      	orrs	r0, r2
 8007c3a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c42:	459c      	cmp	ip, r3
 8007c44:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c48:	d8f3      	bhi.n	8007c32 <__lshift+0x6e>
 8007c4a:	ebac 0304 	sub.w	r3, ip, r4
 8007c4e:	3b15      	subs	r3, #21
 8007c50:	f023 0303 	bic.w	r3, r3, #3
 8007c54:	3304      	adds	r3, #4
 8007c56:	f104 0015 	add.w	r0, r4, #21
 8007c5a:	4584      	cmp	ip, r0
 8007c5c:	bf38      	it	cc
 8007c5e:	2304      	movcc	r3, #4
 8007c60:	50ca      	str	r2, [r1, r3]
 8007c62:	b10a      	cbz	r2, 8007c68 <__lshift+0xa4>
 8007c64:	f108 0602 	add.w	r6, r8, #2
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	612e      	str	r6, [r5, #16]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	f7ff fdd8 	bl	8007824 <_Bfree>
 8007c74:	4628      	mov	r0, r5
 8007c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7c5      	b.n	8007c0e <__lshift+0x4a>
 8007c82:	3904      	subs	r1, #4
 8007c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c8c:	459c      	cmp	ip, r3
 8007c8e:	d8f9      	bhi.n	8007c84 <__lshift+0xc0>
 8007c90:	e7ea      	b.n	8007c68 <__lshift+0xa4>
 8007c92:	bf00      	nop
 8007c94:	0800a6b4 	.word	0x0800a6b4
 8007c98:	0800a6c5 	.word	0x0800a6c5

08007c9c <__mcmp>:
 8007c9c:	b530      	push	{r4, r5, lr}
 8007c9e:	6902      	ldr	r2, [r0, #16]
 8007ca0:	690c      	ldr	r4, [r1, #16]
 8007ca2:	1b12      	subs	r2, r2, r4
 8007ca4:	d10e      	bne.n	8007cc4 <__mcmp+0x28>
 8007ca6:	f100 0314 	add.w	r3, r0, #20
 8007caa:	3114      	adds	r1, #20
 8007cac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007cb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007cb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007cb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007cbc:	42a5      	cmp	r5, r4
 8007cbe:	d003      	beq.n	8007cc8 <__mcmp+0x2c>
 8007cc0:	d305      	bcc.n	8007cce <__mcmp+0x32>
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	bd30      	pop	{r4, r5, pc}
 8007cc8:	4283      	cmp	r3, r0
 8007cca:	d3f3      	bcc.n	8007cb4 <__mcmp+0x18>
 8007ccc:	e7fa      	b.n	8007cc4 <__mcmp+0x28>
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e7f7      	b.n	8007cc4 <__mcmp+0x28>

08007cd4 <__mdiff>:
 8007cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	460c      	mov	r4, r1
 8007cda:	4606      	mov	r6, r0
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4690      	mov	r8, r2
 8007ce2:	f7ff ffdb 	bl	8007c9c <__mcmp>
 8007ce6:	1e05      	subs	r5, r0, #0
 8007ce8:	d110      	bne.n	8007d0c <__mdiff+0x38>
 8007cea:	4629      	mov	r1, r5
 8007cec:	4630      	mov	r0, r6
 8007cee:	f7ff fd59 	bl	80077a4 <_Balloc>
 8007cf2:	b930      	cbnz	r0, 8007d02 <__mdiff+0x2e>
 8007cf4:	4b3a      	ldr	r3, [pc, #232]	; (8007de0 <__mdiff+0x10c>)
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f240 2137 	movw	r1, #567	; 0x237
 8007cfc:	4839      	ldr	r0, [pc, #228]	; (8007de4 <__mdiff+0x110>)
 8007cfe:	f000 fb0b 	bl	8008318 <__assert_func>
 8007d02:	2301      	movs	r3, #1
 8007d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	bfa4      	itt	ge
 8007d0e:	4643      	movge	r3, r8
 8007d10:	46a0      	movge	r8, r4
 8007d12:	4630      	mov	r0, r6
 8007d14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d18:	bfa6      	itte	ge
 8007d1a:	461c      	movge	r4, r3
 8007d1c:	2500      	movge	r5, #0
 8007d1e:	2501      	movlt	r5, #1
 8007d20:	f7ff fd40 	bl	80077a4 <_Balloc>
 8007d24:	b920      	cbnz	r0, 8007d30 <__mdiff+0x5c>
 8007d26:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <__mdiff+0x10c>)
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f240 2145 	movw	r1, #581	; 0x245
 8007d2e:	e7e5      	b.n	8007cfc <__mdiff+0x28>
 8007d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d34:	6926      	ldr	r6, [r4, #16]
 8007d36:	60c5      	str	r5, [r0, #12]
 8007d38:	f104 0914 	add.w	r9, r4, #20
 8007d3c:	f108 0514 	add.w	r5, r8, #20
 8007d40:	f100 0e14 	add.w	lr, r0, #20
 8007d44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d4c:	f108 0210 	add.w	r2, r8, #16
 8007d50:	46f2      	mov	sl, lr
 8007d52:	2100      	movs	r1, #0
 8007d54:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d5c:	fa11 f88b 	uxtah	r8, r1, fp
 8007d60:	b299      	uxth	r1, r3
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	eba8 0801 	sub.w	r8, r8, r1
 8007d68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d70:	fa1f f888 	uxth.w	r8, r8
 8007d74:	1419      	asrs	r1, r3, #16
 8007d76:	454e      	cmp	r6, r9
 8007d78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d7c:	f84a 3b04 	str.w	r3, [sl], #4
 8007d80:	d8e8      	bhi.n	8007d54 <__mdiff+0x80>
 8007d82:	1b33      	subs	r3, r6, r4
 8007d84:	3b15      	subs	r3, #21
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	3415      	adds	r4, #21
 8007d8e:	42a6      	cmp	r6, r4
 8007d90:	bf38      	it	cc
 8007d92:	2304      	movcc	r3, #4
 8007d94:	441d      	add	r5, r3
 8007d96:	4473      	add	r3, lr
 8007d98:	469e      	mov	lr, r3
 8007d9a:	462e      	mov	r6, r5
 8007d9c:	4566      	cmp	r6, ip
 8007d9e:	d30e      	bcc.n	8007dbe <__mdiff+0xea>
 8007da0:	f10c 0203 	add.w	r2, ip, #3
 8007da4:	1b52      	subs	r2, r2, r5
 8007da6:	f022 0203 	bic.w	r2, r2, #3
 8007daa:	3d03      	subs	r5, #3
 8007dac:	45ac      	cmp	ip, r5
 8007dae:	bf38      	it	cc
 8007db0:	2200      	movcc	r2, #0
 8007db2:	4413      	add	r3, r2
 8007db4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007db8:	b17a      	cbz	r2, 8007dda <__mdiff+0x106>
 8007dba:	6107      	str	r7, [r0, #16]
 8007dbc:	e7a4      	b.n	8007d08 <__mdiff+0x34>
 8007dbe:	f856 8b04 	ldr.w	r8, [r6], #4
 8007dc2:	fa11 f288 	uxtah	r2, r1, r8
 8007dc6:	1414      	asrs	r4, r2, #16
 8007dc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007dd2:	f84e 2b04 	str.w	r2, [lr], #4
 8007dd6:	1421      	asrs	r1, r4, #16
 8007dd8:	e7e0      	b.n	8007d9c <__mdiff+0xc8>
 8007dda:	3f01      	subs	r7, #1
 8007ddc:	e7ea      	b.n	8007db4 <__mdiff+0xe0>
 8007dde:	bf00      	nop
 8007de0:	0800a6b4 	.word	0x0800a6b4
 8007de4:	0800a6c5 	.word	0x0800a6c5

08007de8 <__d2b>:
 8007de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dec:	460f      	mov	r7, r1
 8007dee:	2101      	movs	r1, #1
 8007df0:	ec59 8b10 	vmov	r8, r9, d0
 8007df4:	4616      	mov	r6, r2
 8007df6:	f7ff fcd5 	bl	80077a4 <_Balloc>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	b930      	cbnz	r0, 8007e0c <__d2b+0x24>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	4b24      	ldr	r3, [pc, #144]	; (8007e94 <__d2b+0xac>)
 8007e02:	4825      	ldr	r0, [pc, #148]	; (8007e98 <__d2b+0xb0>)
 8007e04:	f240 310f 	movw	r1, #783	; 0x30f
 8007e08:	f000 fa86 	bl	8008318 <__assert_func>
 8007e0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e14:	bb2d      	cbnz	r5, 8007e62 <__d2b+0x7a>
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	f1b8 0300 	subs.w	r3, r8, #0
 8007e1c:	d026      	beq.n	8007e6c <__d2b+0x84>
 8007e1e:	4668      	mov	r0, sp
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	f7ff fd87 	bl	8007934 <__lo0bits>
 8007e26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e2a:	b1e8      	cbz	r0, 8007e68 <__d2b+0x80>
 8007e2c:	f1c0 0320 	rsb	r3, r0, #32
 8007e30:	fa02 f303 	lsl.w	r3, r2, r3
 8007e34:	430b      	orrs	r3, r1
 8007e36:	40c2      	lsrs	r2, r0
 8007e38:	6163      	str	r3, [r4, #20]
 8007e3a:	9201      	str	r2, [sp, #4]
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	61a3      	str	r3, [r4, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bf14      	ite	ne
 8007e44:	2202      	movne	r2, #2
 8007e46:	2201      	moveq	r2, #1
 8007e48:	6122      	str	r2, [r4, #16]
 8007e4a:	b1bd      	cbz	r5, 8007e7c <__d2b+0x94>
 8007e4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e50:	4405      	add	r5, r0
 8007e52:	603d      	str	r5, [r7, #0]
 8007e54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e58:	6030      	str	r0, [r6, #0]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	b003      	add	sp, #12
 8007e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e66:	e7d6      	b.n	8007e16 <__d2b+0x2e>
 8007e68:	6161      	str	r1, [r4, #20]
 8007e6a:	e7e7      	b.n	8007e3c <__d2b+0x54>
 8007e6c:	a801      	add	r0, sp, #4
 8007e6e:	f7ff fd61 	bl	8007934 <__lo0bits>
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	6163      	str	r3, [r4, #20]
 8007e76:	3020      	adds	r0, #32
 8007e78:	2201      	movs	r2, #1
 8007e7a:	e7e5      	b.n	8007e48 <__d2b+0x60>
 8007e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e84:	6038      	str	r0, [r7, #0]
 8007e86:	6918      	ldr	r0, [r3, #16]
 8007e88:	f7ff fd34 	bl	80078f4 <__hi0bits>
 8007e8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e90:	e7e2      	b.n	8007e58 <__d2b+0x70>
 8007e92:	bf00      	nop
 8007e94:	0800a6b4 	.word	0x0800a6b4
 8007e98:	0800a6c5 	.word	0x0800a6c5

08007e9c <__ssputs_r>:
 8007e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea0:	688e      	ldr	r6, [r1, #8]
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	42be      	cmp	r6, r7
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4690      	mov	r8, r2
 8007eae:	d82c      	bhi.n	8007f0a <__ssputs_r+0x6e>
 8007eb0:	898a      	ldrh	r2, [r1, #12]
 8007eb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007eb6:	d026      	beq.n	8007f06 <__ssputs_r+0x6a>
 8007eb8:	6965      	ldr	r5, [r4, #20]
 8007eba:	6909      	ldr	r1, [r1, #16]
 8007ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ec0:	eba3 0901 	sub.w	r9, r3, r1
 8007ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ec8:	1c7b      	adds	r3, r7, #1
 8007eca:	444b      	add	r3, r9
 8007ecc:	106d      	asrs	r5, r5, #1
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	bf38      	it	cc
 8007ed2:	461d      	movcc	r5, r3
 8007ed4:	0553      	lsls	r3, r2, #21
 8007ed6:	d527      	bpl.n	8007f28 <__ssputs_r+0x8c>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	f7ff fbd7 	bl	800768c <_malloc_r>
 8007ede:	4606      	mov	r6, r0
 8007ee0:	b360      	cbz	r0, 8007f3c <__ssputs_r+0xa0>
 8007ee2:	6921      	ldr	r1, [r4, #16]
 8007ee4:	464a      	mov	r2, r9
 8007ee6:	f000 fa09 	bl	80082fc <memcpy>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	6126      	str	r6, [r4, #16]
 8007ef8:	6165      	str	r5, [r4, #20]
 8007efa:	444e      	add	r6, r9
 8007efc:	eba5 0509 	sub.w	r5, r5, r9
 8007f00:	6026      	str	r6, [r4, #0]
 8007f02:	60a5      	str	r5, [r4, #8]
 8007f04:	463e      	mov	r6, r7
 8007f06:	42be      	cmp	r6, r7
 8007f08:	d900      	bls.n	8007f0c <__ssputs_r+0x70>
 8007f0a:	463e      	mov	r6, r7
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	4632      	mov	r2, r6
 8007f10:	4641      	mov	r1, r8
 8007f12:	f000 f9c9 	bl	80082a8 <memmove>
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	1b9b      	subs	r3, r3, r6
 8007f1a:	60a3      	str	r3, [r4, #8]
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	4433      	add	r3, r6
 8007f20:	6023      	str	r3, [r4, #0]
 8007f22:	2000      	movs	r0, #0
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	462a      	mov	r2, r5
 8007f2a:	f000 fa3b 	bl	80083a4 <_realloc_r>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d1e0      	bne.n	8007ef6 <__ssputs_r+0x5a>
 8007f34:	6921      	ldr	r1, [r4, #16]
 8007f36:	4650      	mov	r0, sl
 8007f38:	f7ff fb34 	bl	80075a4 <_free_r>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	f8ca 3000 	str.w	r3, [sl]
 8007f42:	89a3      	ldrh	r3, [r4, #12]
 8007f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4e:	e7e9      	b.n	8007f24 <__ssputs_r+0x88>

08007f50 <_svfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	4698      	mov	r8, r3
 8007f56:	898b      	ldrh	r3, [r1, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	b09d      	sub	sp, #116	; 0x74
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	460d      	mov	r5, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	d50e      	bpl.n	8007f82 <_svfiprintf_r+0x32>
 8007f64:	690b      	ldr	r3, [r1, #16]
 8007f66:	b963      	cbnz	r3, 8007f82 <_svfiprintf_r+0x32>
 8007f68:	2140      	movs	r1, #64	; 0x40
 8007f6a:	f7ff fb8f 	bl	800768c <_malloc_r>
 8007f6e:	6028      	str	r0, [r5, #0]
 8007f70:	6128      	str	r0, [r5, #16]
 8007f72:	b920      	cbnz	r0, 8007f7e <_svfiprintf_r+0x2e>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	e0d0      	b.n	8008120 <_svfiprintf_r+0x1d0>
 8007f7e:	2340      	movs	r3, #64	; 0x40
 8007f80:	616b      	str	r3, [r5, #20]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9309      	str	r3, [sp, #36]	; 0x24
 8007f86:	2320      	movs	r3, #32
 8007f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f90:	2330      	movs	r3, #48	; 0x30
 8007f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008138 <_svfiprintf_r+0x1e8>
 8007f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f9a:	f04f 0901 	mov.w	r9, #1
 8007f9e:	4623      	mov	r3, r4
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa6:	b10a      	cbz	r2, 8007fac <_svfiprintf_r+0x5c>
 8007fa8:	2a25      	cmp	r2, #37	; 0x25
 8007faa:	d1f9      	bne.n	8007fa0 <_svfiprintf_r+0x50>
 8007fac:	ebba 0b04 	subs.w	fp, sl, r4
 8007fb0:	d00b      	beq.n	8007fca <_svfiprintf_r+0x7a>
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff ff6f 	bl	8007e9c <__ssputs_r>
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f000 80a9 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc6:	445a      	add	r2, fp
 8007fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80a1 	beq.w	8008116 <_svfiprintf_r+0x1c6>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fde:	f10a 0a01 	add.w	sl, sl, #1
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	9307      	str	r3, [sp, #28]
 8007fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fea:	931a      	str	r3, [sp, #104]	; 0x68
 8007fec:	4654      	mov	r4, sl
 8007fee:	2205      	movs	r2, #5
 8007ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff4:	4850      	ldr	r0, [pc, #320]	; (8008138 <_svfiprintf_r+0x1e8>)
 8007ff6:	f7f8 f8eb 	bl	80001d0 <memchr>
 8007ffa:	9a04      	ldr	r2, [sp, #16]
 8007ffc:	b9d8      	cbnz	r0, 8008036 <_svfiprintf_r+0xe6>
 8007ffe:	06d0      	lsls	r0, r2, #27
 8008000:	bf44      	itt	mi
 8008002:	2320      	movmi	r3, #32
 8008004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008008:	0711      	lsls	r1, r2, #28
 800800a:	bf44      	itt	mi
 800800c:	232b      	movmi	r3, #43	; 0x2b
 800800e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008012:	f89a 3000 	ldrb.w	r3, [sl]
 8008016:	2b2a      	cmp	r3, #42	; 0x2a
 8008018:	d015      	beq.n	8008046 <_svfiprintf_r+0xf6>
 800801a:	9a07      	ldr	r2, [sp, #28]
 800801c:	4654      	mov	r4, sl
 800801e:	2000      	movs	r0, #0
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4621      	mov	r1, r4
 8008026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800802a:	3b30      	subs	r3, #48	; 0x30
 800802c:	2b09      	cmp	r3, #9
 800802e:	d94d      	bls.n	80080cc <_svfiprintf_r+0x17c>
 8008030:	b1b0      	cbz	r0, 8008060 <_svfiprintf_r+0x110>
 8008032:	9207      	str	r2, [sp, #28]
 8008034:	e014      	b.n	8008060 <_svfiprintf_r+0x110>
 8008036:	eba0 0308 	sub.w	r3, r0, r8
 800803a:	fa09 f303 	lsl.w	r3, r9, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	46a2      	mov	sl, r4
 8008044:	e7d2      	b.n	8007fec <_svfiprintf_r+0x9c>
 8008046:	9b03      	ldr	r3, [sp, #12]
 8008048:	1d19      	adds	r1, r3, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	9103      	str	r1, [sp, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfbb      	ittet	lt
 8008052:	425b      	neglt	r3, r3
 8008054:	f042 0202 	orrlt.w	r2, r2, #2
 8008058:	9307      	strge	r3, [sp, #28]
 800805a:	9307      	strlt	r3, [sp, #28]
 800805c:	bfb8      	it	lt
 800805e:	9204      	strlt	r2, [sp, #16]
 8008060:	7823      	ldrb	r3, [r4, #0]
 8008062:	2b2e      	cmp	r3, #46	; 0x2e
 8008064:	d10c      	bne.n	8008080 <_svfiprintf_r+0x130>
 8008066:	7863      	ldrb	r3, [r4, #1]
 8008068:	2b2a      	cmp	r3, #42	; 0x2a
 800806a:	d134      	bne.n	80080d6 <_svfiprintf_r+0x186>
 800806c:	9b03      	ldr	r3, [sp, #12]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	9203      	str	r2, [sp, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bfb8      	it	lt
 8008078:	f04f 33ff 	movlt.w	r3, #4294967295
 800807c:	3402      	adds	r4, #2
 800807e:	9305      	str	r3, [sp, #20]
 8008080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008148 <_svfiprintf_r+0x1f8>
 8008084:	7821      	ldrb	r1, [r4, #0]
 8008086:	2203      	movs	r2, #3
 8008088:	4650      	mov	r0, sl
 800808a:	f7f8 f8a1 	bl	80001d0 <memchr>
 800808e:	b138      	cbz	r0, 80080a0 <_svfiprintf_r+0x150>
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	eba0 000a 	sub.w	r0, r0, sl
 8008096:	2240      	movs	r2, #64	; 0x40
 8008098:	4082      	lsls	r2, r0
 800809a:	4313      	orrs	r3, r2
 800809c:	3401      	adds	r4, #1
 800809e:	9304      	str	r3, [sp, #16]
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	4825      	ldr	r0, [pc, #148]	; (800813c <_svfiprintf_r+0x1ec>)
 80080a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080aa:	2206      	movs	r2, #6
 80080ac:	f7f8 f890 	bl	80001d0 <memchr>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d038      	beq.n	8008126 <_svfiprintf_r+0x1d6>
 80080b4:	4b22      	ldr	r3, [pc, #136]	; (8008140 <_svfiprintf_r+0x1f0>)
 80080b6:	bb1b      	cbnz	r3, 8008100 <_svfiprintf_r+0x1b0>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	3307      	adds	r3, #7
 80080bc:	f023 0307 	bic.w	r3, r3, #7
 80080c0:	3308      	adds	r3, #8
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	4433      	add	r3, r6
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	e768      	b.n	8007f9e <_svfiprintf_r+0x4e>
 80080cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d0:	460c      	mov	r4, r1
 80080d2:	2001      	movs	r0, #1
 80080d4:	e7a6      	b.n	8008024 <_svfiprintf_r+0xd4>
 80080d6:	2300      	movs	r3, #0
 80080d8:	3401      	adds	r4, #1
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	4619      	mov	r1, r3
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4620      	mov	r0, r4
 80080e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e8:	3a30      	subs	r2, #48	; 0x30
 80080ea:	2a09      	cmp	r2, #9
 80080ec:	d903      	bls.n	80080f6 <_svfiprintf_r+0x1a6>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0c6      	beq.n	8008080 <_svfiprintf_r+0x130>
 80080f2:	9105      	str	r1, [sp, #20]
 80080f4:	e7c4      	b.n	8008080 <_svfiprintf_r+0x130>
 80080f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fa:	4604      	mov	r4, r0
 80080fc:	2301      	movs	r3, #1
 80080fe:	e7f0      	b.n	80080e2 <_svfiprintf_r+0x192>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <_svfiprintf_r+0x1f4>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	4638      	mov	r0, r7
 800810c:	f7fd fe64 	bl	8005dd8 <_printf_float>
 8008110:	1c42      	adds	r2, r0, #1
 8008112:	4606      	mov	r6, r0
 8008114:	d1d6      	bne.n	80080c4 <_svfiprintf_r+0x174>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	065b      	lsls	r3, r3, #25
 800811a:	f53f af2d 	bmi.w	8007f78 <_svfiprintf_r+0x28>
 800811e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008120:	b01d      	add	sp, #116	; 0x74
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <_svfiprintf_r+0x1f4>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	4638      	mov	r0, r7
 8008132:	f7fe f8f5 	bl	8006320 <_printf_i>
 8008136:	e7eb      	b.n	8008110 <_svfiprintf_r+0x1c0>
 8008138:	0800a81c 	.word	0x0800a81c
 800813c:	0800a826 	.word	0x0800a826
 8008140:	08005dd9 	.word	0x08005dd9
 8008144:	08007e9d 	.word	0x08007e9d
 8008148:	0800a822 	.word	0x0800a822

0800814c <__sflush_r>:
 800814c:	898a      	ldrh	r2, [r1, #12]
 800814e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008152:	4605      	mov	r5, r0
 8008154:	0710      	lsls	r0, r2, #28
 8008156:	460c      	mov	r4, r1
 8008158:	d458      	bmi.n	800820c <__sflush_r+0xc0>
 800815a:	684b      	ldr	r3, [r1, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dc05      	bgt.n	800816c <__sflush_r+0x20>
 8008160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	dc02      	bgt.n	800816c <__sflush_r+0x20>
 8008166:	2000      	movs	r0, #0
 8008168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800816c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800816e:	2e00      	cmp	r6, #0
 8008170:	d0f9      	beq.n	8008166 <__sflush_r+0x1a>
 8008172:	2300      	movs	r3, #0
 8008174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008178:	682f      	ldr	r7, [r5, #0]
 800817a:	6a21      	ldr	r1, [r4, #32]
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	d032      	beq.n	80081e6 <__sflush_r+0x9a>
 8008180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	075a      	lsls	r2, r3, #29
 8008186:	d505      	bpl.n	8008194 <__sflush_r+0x48>
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	1ac0      	subs	r0, r0, r3
 800818c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800818e:	b10b      	cbz	r3, 8008194 <__sflush_r+0x48>
 8008190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008192:	1ac0      	subs	r0, r0, r3
 8008194:	2300      	movs	r3, #0
 8008196:	4602      	mov	r2, r0
 8008198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800819a:	6a21      	ldr	r1, [r4, #32]
 800819c:	4628      	mov	r0, r5
 800819e:	47b0      	blx	r6
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	89a3      	ldrh	r3, [r4, #12]
 80081a4:	d106      	bne.n	80081b4 <__sflush_r+0x68>
 80081a6:	6829      	ldr	r1, [r5, #0]
 80081a8:	291d      	cmp	r1, #29
 80081aa:	d82b      	bhi.n	8008204 <__sflush_r+0xb8>
 80081ac:	4a29      	ldr	r2, [pc, #164]	; (8008254 <__sflush_r+0x108>)
 80081ae:	410a      	asrs	r2, r1
 80081b0:	07d6      	lsls	r6, r2, #31
 80081b2:	d427      	bmi.n	8008204 <__sflush_r+0xb8>
 80081b4:	2200      	movs	r2, #0
 80081b6:	6062      	str	r2, [r4, #4]
 80081b8:	04d9      	lsls	r1, r3, #19
 80081ba:	6922      	ldr	r2, [r4, #16]
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	d504      	bpl.n	80081ca <__sflush_r+0x7e>
 80081c0:	1c42      	adds	r2, r0, #1
 80081c2:	d101      	bne.n	80081c8 <__sflush_r+0x7c>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b903      	cbnz	r3, 80081ca <__sflush_r+0x7e>
 80081c8:	6560      	str	r0, [r4, #84]	; 0x54
 80081ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081cc:	602f      	str	r7, [r5, #0]
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d0c9      	beq.n	8008166 <__sflush_r+0x1a>
 80081d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081d6:	4299      	cmp	r1, r3
 80081d8:	d002      	beq.n	80081e0 <__sflush_r+0x94>
 80081da:	4628      	mov	r0, r5
 80081dc:	f7ff f9e2 	bl	80075a4 <_free_r>
 80081e0:	2000      	movs	r0, #0
 80081e2:	6360      	str	r0, [r4, #52]	; 0x34
 80081e4:	e7c0      	b.n	8008168 <__sflush_r+0x1c>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b0      	blx	r6
 80081ec:	1c41      	adds	r1, r0, #1
 80081ee:	d1c8      	bne.n	8008182 <__sflush_r+0x36>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0c5      	beq.n	8008182 <__sflush_r+0x36>
 80081f6:	2b1d      	cmp	r3, #29
 80081f8:	d001      	beq.n	80081fe <__sflush_r+0xb2>
 80081fa:	2b16      	cmp	r3, #22
 80081fc:	d101      	bne.n	8008202 <__sflush_r+0xb6>
 80081fe:	602f      	str	r7, [r5, #0]
 8008200:	e7b1      	b.n	8008166 <__sflush_r+0x1a>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008208:	81a3      	strh	r3, [r4, #12]
 800820a:	e7ad      	b.n	8008168 <__sflush_r+0x1c>
 800820c:	690f      	ldr	r7, [r1, #16]
 800820e:	2f00      	cmp	r7, #0
 8008210:	d0a9      	beq.n	8008166 <__sflush_r+0x1a>
 8008212:	0793      	lsls	r3, r2, #30
 8008214:	680e      	ldr	r6, [r1, #0]
 8008216:	bf08      	it	eq
 8008218:	694b      	ldreq	r3, [r1, #20]
 800821a:	600f      	str	r7, [r1, #0]
 800821c:	bf18      	it	ne
 800821e:	2300      	movne	r3, #0
 8008220:	eba6 0807 	sub.w	r8, r6, r7
 8008224:	608b      	str	r3, [r1, #8]
 8008226:	f1b8 0f00 	cmp.w	r8, #0
 800822a:	dd9c      	ble.n	8008166 <__sflush_r+0x1a>
 800822c:	6a21      	ldr	r1, [r4, #32]
 800822e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008230:	4643      	mov	r3, r8
 8008232:	463a      	mov	r2, r7
 8008234:	4628      	mov	r0, r5
 8008236:	47b0      	blx	r6
 8008238:	2800      	cmp	r0, #0
 800823a:	dc06      	bgt.n	800824a <__sflush_r+0xfe>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	e78e      	b.n	8008168 <__sflush_r+0x1c>
 800824a:	4407      	add	r7, r0
 800824c:	eba8 0800 	sub.w	r8, r8, r0
 8008250:	e7e9      	b.n	8008226 <__sflush_r+0xda>
 8008252:	bf00      	nop
 8008254:	dfbffffe 	.word	0xdfbffffe

08008258 <_fflush_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	690b      	ldr	r3, [r1, #16]
 800825c:	4605      	mov	r5, r0
 800825e:	460c      	mov	r4, r1
 8008260:	b913      	cbnz	r3, 8008268 <_fflush_r+0x10>
 8008262:	2500      	movs	r5, #0
 8008264:	4628      	mov	r0, r5
 8008266:	bd38      	pop	{r3, r4, r5, pc}
 8008268:	b118      	cbz	r0, 8008272 <_fflush_r+0x1a>
 800826a:	6a03      	ldr	r3, [r0, #32]
 800826c:	b90b      	cbnz	r3, 8008272 <_fflush_r+0x1a>
 800826e:	f7fe fa05 	bl	800667c <__sinit>
 8008272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f3      	beq.n	8008262 <_fflush_r+0xa>
 800827a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800827c:	07d0      	lsls	r0, r2, #31
 800827e:	d404      	bmi.n	800828a <_fflush_r+0x32>
 8008280:	0599      	lsls	r1, r3, #22
 8008282:	d402      	bmi.n	800828a <_fflush_r+0x32>
 8008284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008286:	f7fe fb10 	bl	80068aa <__retarget_lock_acquire_recursive>
 800828a:	4628      	mov	r0, r5
 800828c:	4621      	mov	r1, r4
 800828e:	f7ff ff5d 	bl	800814c <__sflush_r>
 8008292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008294:	07da      	lsls	r2, r3, #31
 8008296:	4605      	mov	r5, r0
 8008298:	d4e4      	bmi.n	8008264 <_fflush_r+0xc>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	059b      	lsls	r3, r3, #22
 800829e:	d4e1      	bmi.n	8008264 <_fflush_r+0xc>
 80082a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082a2:	f7fe fb03 	bl	80068ac <__retarget_lock_release_recursive>
 80082a6:	e7dd      	b.n	8008264 <_fflush_r+0xc>

080082a8 <memmove>:
 80082a8:	4288      	cmp	r0, r1
 80082aa:	b510      	push	{r4, lr}
 80082ac:	eb01 0402 	add.w	r4, r1, r2
 80082b0:	d902      	bls.n	80082b8 <memmove+0x10>
 80082b2:	4284      	cmp	r4, r0
 80082b4:	4623      	mov	r3, r4
 80082b6:	d807      	bhi.n	80082c8 <memmove+0x20>
 80082b8:	1e43      	subs	r3, r0, #1
 80082ba:	42a1      	cmp	r1, r4
 80082bc:	d008      	beq.n	80082d0 <memmove+0x28>
 80082be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082c6:	e7f8      	b.n	80082ba <memmove+0x12>
 80082c8:	4402      	add	r2, r0
 80082ca:	4601      	mov	r1, r0
 80082cc:	428a      	cmp	r2, r1
 80082ce:	d100      	bne.n	80082d2 <memmove+0x2a>
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082da:	e7f7      	b.n	80082cc <memmove+0x24>

080082dc <_sbrk_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d06      	ldr	r5, [pc, #24]	; (80082f8 <_sbrk_r+0x1c>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7fa fc14 	bl	8002b14 <_sbrk>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_sbrk_r+0x1a>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_sbrk_r+0x1a>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	200008d4 	.word	0x200008d4

080082fc <memcpy>:
 80082fc:	440a      	add	r2, r1
 80082fe:	4291      	cmp	r1, r2
 8008300:	f100 33ff 	add.w	r3, r0, #4294967295
 8008304:	d100      	bne.n	8008308 <memcpy+0xc>
 8008306:	4770      	bx	lr
 8008308:	b510      	push	{r4, lr}
 800830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800830e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008312:	4291      	cmp	r1, r2
 8008314:	d1f9      	bne.n	800830a <memcpy+0xe>
 8008316:	bd10      	pop	{r4, pc}

08008318 <__assert_func>:
 8008318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800831a:	4614      	mov	r4, r2
 800831c:	461a      	mov	r2, r3
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <__assert_func+0x2c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4605      	mov	r5, r0
 8008324:	68d8      	ldr	r0, [r3, #12]
 8008326:	b14c      	cbz	r4, 800833c <__assert_func+0x24>
 8008328:	4b07      	ldr	r3, [pc, #28]	; (8008348 <__assert_func+0x30>)
 800832a:	9100      	str	r1, [sp, #0]
 800832c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008330:	4906      	ldr	r1, [pc, #24]	; (800834c <__assert_func+0x34>)
 8008332:	462b      	mov	r3, r5
 8008334:	f000 f872 	bl	800841c <fiprintf>
 8008338:	f000 f882 	bl	8008440 <abort>
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <__assert_func+0x38>)
 800833e:	461c      	mov	r4, r3
 8008340:	e7f3      	b.n	800832a <__assert_func+0x12>
 8008342:	bf00      	nop
 8008344:	2000006c 	.word	0x2000006c
 8008348:	0800a837 	.word	0x0800a837
 800834c:	0800a844 	.word	0x0800a844
 8008350:	0800a872 	.word	0x0800a872

08008354 <_calloc_r>:
 8008354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008356:	fba1 2402 	umull	r2, r4, r1, r2
 800835a:	b94c      	cbnz	r4, 8008370 <_calloc_r+0x1c>
 800835c:	4611      	mov	r1, r2
 800835e:	9201      	str	r2, [sp, #4]
 8008360:	f7ff f994 	bl	800768c <_malloc_r>
 8008364:	9a01      	ldr	r2, [sp, #4]
 8008366:	4605      	mov	r5, r0
 8008368:	b930      	cbnz	r0, 8008378 <_calloc_r+0x24>
 800836a:	4628      	mov	r0, r5
 800836c:	b003      	add	sp, #12
 800836e:	bd30      	pop	{r4, r5, pc}
 8008370:	220c      	movs	r2, #12
 8008372:	6002      	str	r2, [r0, #0]
 8008374:	2500      	movs	r5, #0
 8008376:	e7f8      	b.n	800836a <_calloc_r+0x16>
 8008378:	4621      	mov	r1, r4
 800837a:	f7fe fa18 	bl	80067ae <memset>
 800837e:	e7f4      	b.n	800836a <_calloc_r+0x16>

08008380 <__ascii_mbtowc>:
 8008380:	b082      	sub	sp, #8
 8008382:	b901      	cbnz	r1, 8008386 <__ascii_mbtowc+0x6>
 8008384:	a901      	add	r1, sp, #4
 8008386:	b142      	cbz	r2, 800839a <__ascii_mbtowc+0x1a>
 8008388:	b14b      	cbz	r3, 800839e <__ascii_mbtowc+0x1e>
 800838a:	7813      	ldrb	r3, [r2, #0]
 800838c:	600b      	str	r3, [r1, #0]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	1e10      	subs	r0, r2, #0
 8008392:	bf18      	it	ne
 8008394:	2001      	movne	r0, #1
 8008396:	b002      	add	sp, #8
 8008398:	4770      	bx	lr
 800839a:	4610      	mov	r0, r2
 800839c:	e7fb      	b.n	8008396 <__ascii_mbtowc+0x16>
 800839e:	f06f 0001 	mvn.w	r0, #1
 80083a2:	e7f8      	b.n	8008396 <__ascii_mbtowc+0x16>

080083a4 <_realloc_r>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	4680      	mov	r8, r0
 80083aa:	4614      	mov	r4, r2
 80083ac:	460e      	mov	r6, r1
 80083ae:	b921      	cbnz	r1, 80083ba <_realloc_r+0x16>
 80083b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	4611      	mov	r1, r2
 80083b6:	f7ff b969 	b.w	800768c <_malloc_r>
 80083ba:	b92a      	cbnz	r2, 80083c8 <_realloc_r+0x24>
 80083bc:	f7ff f8f2 	bl	80075a4 <_free_r>
 80083c0:	4625      	mov	r5, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	f000 f841 	bl	800844e <_malloc_usable_size_r>
 80083cc:	4284      	cmp	r4, r0
 80083ce:	4607      	mov	r7, r0
 80083d0:	d802      	bhi.n	80083d8 <_realloc_r+0x34>
 80083d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083d6:	d812      	bhi.n	80083fe <_realloc_r+0x5a>
 80083d8:	4621      	mov	r1, r4
 80083da:	4640      	mov	r0, r8
 80083dc:	f7ff f956 	bl	800768c <_malloc_r>
 80083e0:	4605      	mov	r5, r0
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d0ed      	beq.n	80083c2 <_realloc_r+0x1e>
 80083e6:	42bc      	cmp	r4, r7
 80083e8:	4622      	mov	r2, r4
 80083ea:	4631      	mov	r1, r6
 80083ec:	bf28      	it	cs
 80083ee:	463a      	movcs	r2, r7
 80083f0:	f7ff ff84 	bl	80082fc <memcpy>
 80083f4:	4631      	mov	r1, r6
 80083f6:	4640      	mov	r0, r8
 80083f8:	f7ff f8d4 	bl	80075a4 <_free_r>
 80083fc:	e7e1      	b.n	80083c2 <_realloc_r+0x1e>
 80083fe:	4635      	mov	r5, r6
 8008400:	e7df      	b.n	80083c2 <_realloc_r+0x1e>

08008402 <__ascii_wctomb>:
 8008402:	b149      	cbz	r1, 8008418 <__ascii_wctomb+0x16>
 8008404:	2aff      	cmp	r2, #255	; 0xff
 8008406:	bf85      	ittet	hi
 8008408:	238a      	movhi	r3, #138	; 0x8a
 800840a:	6003      	strhi	r3, [r0, #0]
 800840c:	700a      	strbls	r2, [r1, #0]
 800840e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008412:	bf98      	it	ls
 8008414:	2001      	movls	r0, #1
 8008416:	4770      	bx	lr
 8008418:	4608      	mov	r0, r1
 800841a:	4770      	bx	lr

0800841c <fiprintf>:
 800841c:	b40e      	push	{r1, r2, r3}
 800841e:	b503      	push	{r0, r1, lr}
 8008420:	4601      	mov	r1, r0
 8008422:	ab03      	add	r3, sp, #12
 8008424:	4805      	ldr	r0, [pc, #20]	; (800843c <fiprintf+0x20>)
 8008426:	f853 2b04 	ldr.w	r2, [r3], #4
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	f000 f83f 	bl	80084b0 <_vfiprintf_r>
 8008432:	b002      	add	sp, #8
 8008434:	f85d eb04 	ldr.w	lr, [sp], #4
 8008438:	b003      	add	sp, #12
 800843a:	4770      	bx	lr
 800843c:	2000006c 	.word	0x2000006c

08008440 <abort>:
 8008440:	b508      	push	{r3, lr}
 8008442:	2006      	movs	r0, #6
 8008444:	f000 fa0c 	bl	8008860 <raise>
 8008448:	2001      	movs	r0, #1
 800844a:	f7fa faeb 	bl	8002a24 <_exit>

0800844e <_malloc_usable_size_r>:
 800844e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008452:	1f18      	subs	r0, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfbc      	itt	lt
 8008458:	580b      	ldrlt	r3, [r1, r0]
 800845a:	18c0      	addlt	r0, r0, r3
 800845c:	4770      	bx	lr

0800845e <__sfputc_r>:
 800845e:	6893      	ldr	r3, [r2, #8]
 8008460:	3b01      	subs	r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	b410      	push	{r4}
 8008466:	6093      	str	r3, [r2, #8]
 8008468:	da08      	bge.n	800847c <__sfputc_r+0x1e>
 800846a:	6994      	ldr	r4, [r2, #24]
 800846c:	42a3      	cmp	r3, r4
 800846e:	db01      	blt.n	8008474 <__sfputc_r+0x16>
 8008470:	290a      	cmp	r1, #10
 8008472:	d103      	bne.n	800847c <__sfputc_r+0x1e>
 8008474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008478:	f000 b934 	b.w	80086e4 <__swbuf_r>
 800847c:	6813      	ldr	r3, [r2, #0]
 800847e:	1c58      	adds	r0, r3, #1
 8008480:	6010      	str	r0, [r2, #0]
 8008482:	7019      	strb	r1, [r3, #0]
 8008484:	4608      	mov	r0, r1
 8008486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800848a:	4770      	bx	lr

0800848c <__sfputs_r>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	4614      	mov	r4, r2
 8008494:	18d5      	adds	r5, r2, r3
 8008496:	42ac      	cmp	r4, r5
 8008498:	d101      	bne.n	800849e <__sfputs_r+0x12>
 800849a:	2000      	movs	r0, #0
 800849c:	e007      	b.n	80084ae <__sfputs_r+0x22>
 800849e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a2:	463a      	mov	r2, r7
 80084a4:	4630      	mov	r0, r6
 80084a6:	f7ff ffda 	bl	800845e <__sfputc_r>
 80084aa:	1c43      	adds	r3, r0, #1
 80084ac:	d1f3      	bne.n	8008496 <__sfputs_r+0xa>
 80084ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084b0 <_vfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	460d      	mov	r5, r1
 80084b6:	b09d      	sub	sp, #116	; 0x74
 80084b8:	4614      	mov	r4, r2
 80084ba:	4698      	mov	r8, r3
 80084bc:	4606      	mov	r6, r0
 80084be:	b118      	cbz	r0, 80084c8 <_vfiprintf_r+0x18>
 80084c0:	6a03      	ldr	r3, [r0, #32]
 80084c2:	b90b      	cbnz	r3, 80084c8 <_vfiprintf_r+0x18>
 80084c4:	f7fe f8da 	bl	800667c <__sinit>
 80084c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ca:	07d9      	lsls	r1, r3, #31
 80084cc:	d405      	bmi.n	80084da <_vfiprintf_r+0x2a>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d402      	bmi.n	80084da <_vfiprintf_r+0x2a>
 80084d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d6:	f7fe f9e8 	bl	80068aa <__retarget_lock_acquire_recursive>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	071b      	lsls	r3, r3, #28
 80084de:	d501      	bpl.n	80084e4 <_vfiprintf_r+0x34>
 80084e0:	692b      	ldr	r3, [r5, #16]
 80084e2:	b99b      	cbnz	r3, 800850c <_vfiprintf_r+0x5c>
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 f93a 	bl	8008760 <__swsetup_r>
 80084ec:	b170      	cbz	r0, 800850c <_vfiprintf_r+0x5c>
 80084ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f0:	07dc      	lsls	r4, r3, #31
 80084f2:	d504      	bpl.n	80084fe <_vfiprintf_r+0x4e>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b01d      	add	sp, #116	; 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	0598      	lsls	r0, r3, #22
 8008502:	d4f7      	bmi.n	80084f4 <_vfiprintf_r+0x44>
 8008504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008506:	f7fe f9d1 	bl	80068ac <__retarget_lock_release_recursive>
 800850a:	e7f3      	b.n	80084f4 <_vfiprintf_r+0x44>
 800850c:	2300      	movs	r3, #0
 800850e:	9309      	str	r3, [sp, #36]	; 0x24
 8008510:	2320      	movs	r3, #32
 8008512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008516:	f8cd 800c 	str.w	r8, [sp, #12]
 800851a:	2330      	movs	r3, #48	; 0x30
 800851c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086d0 <_vfiprintf_r+0x220>
 8008520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008524:	f04f 0901 	mov.w	r9, #1
 8008528:	4623      	mov	r3, r4
 800852a:	469a      	mov	sl, r3
 800852c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008530:	b10a      	cbz	r2, 8008536 <_vfiprintf_r+0x86>
 8008532:	2a25      	cmp	r2, #37	; 0x25
 8008534:	d1f9      	bne.n	800852a <_vfiprintf_r+0x7a>
 8008536:	ebba 0b04 	subs.w	fp, sl, r4
 800853a:	d00b      	beq.n	8008554 <_vfiprintf_r+0xa4>
 800853c:	465b      	mov	r3, fp
 800853e:	4622      	mov	r2, r4
 8008540:	4629      	mov	r1, r5
 8008542:	4630      	mov	r0, r6
 8008544:	f7ff ffa2 	bl	800848c <__sfputs_r>
 8008548:	3001      	adds	r0, #1
 800854a:	f000 80a9 	beq.w	80086a0 <_vfiprintf_r+0x1f0>
 800854e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008550:	445a      	add	r2, fp
 8008552:	9209      	str	r2, [sp, #36]	; 0x24
 8008554:	f89a 3000 	ldrb.w	r3, [sl]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 80a1 	beq.w	80086a0 <_vfiprintf_r+0x1f0>
 800855e:	2300      	movs	r3, #0
 8008560:	f04f 32ff 	mov.w	r2, #4294967295
 8008564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008568:	f10a 0a01 	add.w	sl, sl, #1
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	9307      	str	r3, [sp, #28]
 8008570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008574:	931a      	str	r3, [sp, #104]	; 0x68
 8008576:	4654      	mov	r4, sl
 8008578:	2205      	movs	r2, #5
 800857a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857e:	4854      	ldr	r0, [pc, #336]	; (80086d0 <_vfiprintf_r+0x220>)
 8008580:	f7f7 fe26 	bl	80001d0 <memchr>
 8008584:	9a04      	ldr	r2, [sp, #16]
 8008586:	b9d8      	cbnz	r0, 80085c0 <_vfiprintf_r+0x110>
 8008588:	06d1      	lsls	r1, r2, #27
 800858a:	bf44      	itt	mi
 800858c:	2320      	movmi	r3, #32
 800858e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008592:	0713      	lsls	r3, r2, #28
 8008594:	bf44      	itt	mi
 8008596:	232b      	movmi	r3, #43	; 0x2b
 8008598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800859c:	f89a 3000 	ldrb.w	r3, [sl]
 80085a0:	2b2a      	cmp	r3, #42	; 0x2a
 80085a2:	d015      	beq.n	80085d0 <_vfiprintf_r+0x120>
 80085a4:	9a07      	ldr	r2, [sp, #28]
 80085a6:	4654      	mov	r4, sl
 80085a8:	2000      	movs	r0, #0
 80085aa:	f04f 0c0a 	mov.w	ip, #10
 80085ae:	4621      	mov	r1, r4
 80085b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b4:	3b30      	subs	r3, #48	; 0x30
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d94d      	bls.n	8008656 <_vfiprintf_r+0x1a6>
 80085ba:	b1b0      	cbz	r0, 80085ea <_vfiprintf_r+0x13a>
 80085bc:	9207      	str	r2, [sp, #28]
 80085be:	e014      	b.n	80085ea <_vfiprintf_r+0x13a>
 80085c0:	eba0 0308 	sub.w	r3, r0, r8
 80085c4:	fa09 f303 	lsl.w	r3, r9, r3
 80085c8:	4313      	orrs	r3, r2
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	46a2      	mov	sl, r4
 80085ce:	e7d2      	b.n	8008576 <_vfiprintf_r+0xc6>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	1d19      	adds	r1, r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	9103      	str	r1, [sp, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfbb      	ittet	lt
 80085dc:	425b      	neglt	r3, r3
 80085de:	f042 0202 	orrlt.w	r2, r2, #2
 80085e2:	9307      	strge	r3, [sp, #28]
 80085e4:	9307      	strlt	r3, [sp, #28]
 80085e6:	bfb8      	it	lt
 80085e8:	9204      	strlt	r2, [sp, #16]
 80085ea:	7823      	ldrb	r3, [r4, #0]
 80085ec:	2b2e      	cmp	r3, #46	; 0x2e
 80085ee:	d10c      	bne.n	800860a <_vfiprintf_r+0x15a>
 80085f0:	7863      	ldrb	r3, [r4, #1]
 80085f2:	2b2a      	cmp	r3, #42	; 0x2a
 80085f4:	d134      	bne.n	8008660 <_vfiprintf_r+0x1b0>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9203      	str	r2, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	f04f 33ff 	movlt.w	r3, #4294967295
 8008606:	3402      	adds	r4, #2
 8008608:	9305      	str	r3, [sp, #20]
 800860a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80086e0 <_vfiprintf_r+0x230>
 800860e:	7821      	ldrb	r1, [r4, #0]
 8008610:	2203      	movs	r2, #3
 8008612:	4650      	mov	r0, sl
 8008614:	f7f7 fddc 	bl	80001d0 <memchr>
 8008618:	b138      	cbz	r0, 800862a <_vfiprintf_r+0x17a>
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	eba0 000a 	sub.w	r0, r0, sl
 8008620:	2240      	movs	r2, #64	; 0x40
 8008622:	4082      	lsls	r2, r0
 8008624:	4313      	orrs	r3, r2
 8008626:	3401      	adds	r4, #1
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	4829      	ldr	r0, [pc, #164]	; (80086d4 <_vfiprintf_r+0x224>)
 8008630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008634:	2206      	movs	r2, #6
 8008636:	f7f7 fdcb 	bl	80001d0 <memchr>
 800863a:	2800      	cmp	r0, #0
 800863c:	d03f      	beq.n	80086be <_vfiprintf_r+0x20e>
 800863e:	4b26      	ldr	r3, [pc, #152]	; (80086d8 <_vfiprintf_r+0x228>)
 8008640:	bb1b      	cbnz	r3, 800868a <_vfiprintf_r+0x1da>
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	3307      	adds	r3, #7
 8008646:	f023 0307 	bic.w	r3, r3, #7
 800864a:	3308      	adds	r3, #8
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	443b      	add	r3, r7
 8008652:	9309      	str	r3, [sp, #36]	; 0x24
 8008654:	e768      	b.n	8008528 <_vfiprintf_r+0x78>
 8008656:	fb0c 3202 	mla	r2, ip, r2, r3
 800865a:	460c      	mov	r4, r1
 800865c:	2001      	movs	r0, #1
 800865e:	e7a6      	b.n	80085ae <_vfiprintf_r+0xfe>
 8008660:	2300      	movs	r3, #0
 8008662:	3401      	adds	r4, #1
 8008664:	9305      	str	r3, [sp, #20]
 8008666:	4619      	mov	r1, r3
 8008668:	f04f 0c0a 	mov.w	ip, #10
 800866c:	4620      	mov	r0, r4
 800866e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008672:	3a30      	subs	r2, #48	; 0x30
 8008674:	2a09      	cmp	r2, #9
 8008676:	d903      	bls.n	8008680 <_vfiprintf_r+0x1d0>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0c6      	beq.n	800860a <_vfiprintf_r+0x15a>
 800867c:	9105      	str	r1, [sp, #20]
 800867e:	e7c4      	b.n	800860a <_vfiprintf_r+0x15a>
 8008680:	fb0c 2101 	mla	r1, ip, r1, r2
 8008684:	4604      	mov	r4, r0
 8008686:	2301      	movs	r3, #1
 8008688:	e7f0      	b.n	800866c <_vfiprintf_r+0x1bc>
 800868a:	ab03      	add	r3, sp, #12
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	462a      	mov	r2, r5
 8008690:	4b12      	ldr	r3, [pc, #72]	; (80086dc <_vfiprintf_r+0x22c>)
 8008692:	a904      	add	r1, sp, #16
 8008694:	4630      	mov	r0, r6
 8008696:	f7fd fb9f 	bl	8005dd8 <_printf_float>
 800869a:	4607      	mov	r7, r0
 800869c:	1c78      	adds	r0, r7, #1
 800869e:	d1d6      	bne.n	800864e <_vfiprintf_r+0x19e>
 80086a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	d405      	bmi.n	80086b2 <_vfiprintf_r+0x202>
 80086a6:	89ab      	ldrh	r3, [r5, #12]
 80086a8:	059a      	lsls	r2, r3, #22
 80086aa:	d402      	bmi.n	80086b2 <_vfiprintf_r+0x202>
 80086ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086ae:	f7fe f8fd 	bl	80068ac <__retarget_lock_release_recursive>
 80086b2:	89ab      	ldrh	r3, [r5, #12]
 80086b4:	065b      	lsls	r3, r3, #25
 80086b6:	f53f af1d 	bmi.w	80084f4 <_vfiprintf_r+0x44>
 80086ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086bc:	e71c      	b.n	80084f8 <_vfiprintf_r+0x48>
 80086be:	ab03      	add	r3, sp, #12
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	462a      	mov	r2, r5
 80086c4:	4b05      	ldr	r3, [pc, #20]	; (80086dc <_vfiprintf_r+0x22c>)
 80086c6:	a904      	add	r1, sp, #16
 80086c8:	4630      	mov	r0, r6
 80086ca:	f7fd fe29 	bl	8006320 <_printf_i>
 80086ce:	e7e4      	b.n	800869a <_vfiprintf_r+0x1ea>
 80086d0:	0800a81c 	.word	0x0800a81c
 80086d4:	0800a826 	.word	0x0800a826
 80086d8:	08005dd9 	.word	0x08005dd9
 80086dc:	0800848d 	.word	0x0800848d
 80086e0:	0800a822 	.word	0x0800a822

080086e4 <__swbuf_r>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	460e      	mov	r6, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	4605      	mov	r5, r0
 80086ec:	b118      	cbz	r0, 80086f6 <__swbuf_r+0x12>
 80086ee:	6a03      	ldr	r3, [r0, #32]
 80086f0:	b90b      	cbnz	r3, 80086f6 <__swbuf_r+0x12>
 80086f2:	f7fd ffc3 	bl	800667c <__sinit>
 80086f6:	69a3      	ldr	r3, [r4, #24]
 80086f8:	60a3      	str	r3, [r4, #8]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	071a      	lsls	r2, r3, #28
 80086fe:	d525      	bpl.n	800874c <__swbuf_r+0x68>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	b31b      	cbz	r3, 800874c <__swbuf_r+0x68>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	6922      	ldr	r2, [r4, #16]
 8008708:	1a98      	subs	r0, r3, r2
 800870a:	6963      	ldr	r3, [r4, #20]
 800870c:	b2f6      	uxtb	r6, r6
 800870e:	4283      	cmp	r3, r0
 8008710:	4637      	mov	r7, r6
 8008712:	dc04      	bgt.n	800871e <__swbuf_r+0x3a>
 8008714:	4621      	mov	r1, r4
 8008716:	4628      	mov	r0, r5
 8008718:	f7ff fd9e 	bl	8008258 <_fflush_r>
 800871c:	b9e0      	cbnz	r0, 8008758 <__swbuf_r+0x74>
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	3b01      	subs	r3, #1
 8008722:	60a3      	str	r3, [r4, #8]
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	6022      	str	r2, [r4, #0]
 800872a:	701e      	strb	r6, [r3, #0]
 800872c:	6962      	ldr	r2, [r4, #20]
 800872e:	1c43      	adds	r3, r0, #1
 8008730:	429a      	cmp	r2, r3
 8008732:	d004      	beq.n	800873e <__swbuf_r+0x5a>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	07db      	lsls	r3, r3, #31
 8008738:	d506      	bpl.n	8008748 <__swbuf_r+0x64>
 800873a:	2e0a      	cmp	r6, #10
 800873c:	d104      	bne.n	8008748 <__swbuf_r+0x64>
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f7ff fd89 	bl	8008258 <_fflush_r>
 8008746:	b938      	cbnz	r0, 8008758 <__swbuf_r+0x74>
 8008748:	4638      	mov	r0, r7
 800874a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800874c:	4621      	mov	r1, r4
 800874e:	4628      	mov	r0, r5
 8008750:	f000 f806 	bl	8008760 <__swsetup_r>
 8008754:	2800      	cmp	r0, #0
 8008756:	d0d5      	beq.n	8008704 <__swbuf_r+0x20>
 8008758:	f04f 37ff 	mov.w	r7, #4294967295
 800875c:	e7f4      	b.n	8008748 <__swbuf_r+0x64>
	...

08008760 <__swsetup_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4b2a      	ldr	r3, [pc, #168]	; (800880c <__swsetup_r+0xac>)
 8008764:	4605      	mov	r5, r0
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	460c      	mov	r4, r1
 800876a:	b118      	cbz	r0, 8008774 <__swsetup_r+0x14>
 800876c:	6a03      	ldr	r3, [r0, #32]
 800876e:	b90b      	cbnz	r3, 8008774 <__swsetup_r+0x14>
 8008770:	f7fd ff84 	bl	800667c <__sinit>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800877a:	0718      	lsls	r0, r3, #28
 800877c:	d422      	bmi.n	80087c4 <__swsetup_r+0x64>
 800877e:	06d9      	lsls	r1, r3, #27
 8008780:	d407      	bmi.n	8008792 <__swsetup_r+0x32>
 8008782:	2309      	movs	r3, #9
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	e034      	b.n	80087fc <__swsetup_r+0x9c>
 8008792:	0758      	lsls	r0, r3, #29
 8008794:	d512      	bpl.n	80087bc <__swsetup_r+0x5c>
 8008796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008798:	b141      	cbz	r1, 80087ac <__swsetup_r+0x4c>
 800879a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800879e:	4299      	cmp	r1, r3
 80087a0:	d002      	beq.n	80087a8 <__swsetup_r+0x48>
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7fe fefe 	bl	80075a4 <_free_r>
 80087a8:	2300      	movs	r3, #0
 80087aa:	6363      	str	r3, [r4, #52]	; 0x34
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087b2:	81a3      	strh	r3, [r4, #12]
 80087b4:	2300      	movs	r3, #0
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	6923      	ldr	r3, [r4, #16]
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	f043 0308 	orr.w	r3, r3, #8
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	b94b      	cbnz	r3, 80087dc <__swsetup_r+0x7c>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d2:	d003      	beq.n	80087dc <__swsetup_r+0x7c>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4628      	mov	r0, r5
 80087d8:	f000 f884 	bl	80088e4 <__smakebuf_r>
 80087dc:	89a0      	ldrh	r0, [r4, #12]
 80087de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087e2:	f010 0301 	ands.w	r3, r0, #1
 80087e6:	d00a      	beq.n	80087fe <__swsetup_r+0x9e>
 80087e8:	2300      	movs	r3, #0
 80087ea:	60a3      	str	r3, [r4, #8]
 80087ec:	6963      	ldr	r3, [r4, #20]
 80087ee:	425b      	negs	r3, r3
 80087f0:	61a3      	str	r3, [r4, #24]
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b943      	cbnz	r3, 8008808 <__swsetup_r+0xa8>
 80087f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80087fa:	d1c4      	bne.n	8008786 <__swsetup_r+0x26>
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	0781      	lsls	r1, r0, #30
 8008800:	bf58      	it	pl
 8008802:	6963      	ldrpl	r3, [r4, #20]
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	e7f4      	b.n	80087f2 <__swsetup_r+0x92>
 8008808:	2000      	movs	r0, #0
 800880a:	e7f7      	b.n	80087fc <__swsetup_r+0x9c>
 800880c:	2000006c 	.word	0x2000006c

08008810 <_raise_r>:
 8008810:	291f      	cmp	r1, #31
 8008812:	b538      	push	{r3, r4, r5, lr}
 8008814:	4604      	mov	r4, r0
 8008816:	460d      	mov	r5, r1
 8008818:	d904      	bls.n	8008824 <_raise_r+0x14>
 800881a:	2316      	movs	r3, #22
 800881c:	6003      	str	r3, [r0, #0]
 800881e:	f04f 30ff 	mov.w	r0, #4294967295
 8008822:	bd38      	pop	{r3, r4, r5, pc}
 8008824:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008826:	b112      	cbz	r2, 800882e <_raise_r+0x1e>
 8008828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800882c:	b94b      	cbnz	r3, 8008842 <_raise_r+0x32>
 800882e:	4620      	mov	r0, r4
 8008830:	f000 f830 	bl	8008894 <_getpid_r>
 8008834:	462a      	mov	r2, r5
 8008836:	4601      	mov	r1, r0
 8008838:	4620      	mov	r0, r4
 800883a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883e:	f000 b817 	b.w	8008870 <_kill_r>
 8008842:	2b01      	cmp	r3, #1
 8008844:	d00a      	beq.n	800885c <_raise_r+0x4c>
 8008846:	1c59      	adds	r1, r3, #1
 8008848:	d103      	bne.n	8008852 <_raise_r+0x42>
 800884a:	2316      	movs	r3, #22
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	2001      	movs	r0, #1
 8008850:	e7e7      	b.n	8008822 <_raise_r+0x12>
 8008852:	2400      	movs	r4, #0
 8008854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008858:	4628      	mov	r0, r5
 800885a:	4798      	blx	r3
 800885c:	2000      	movs	r0, #0
 800885e:	e7e0      	b.n	8008822 <_raise_r+0x12>

08008860 <raise>:
 8008860:	4b02      	ldr	r3, [pc, #8]	; (800886c <raise+0xc>)
 8008862:	4601      	mov	r1, r0
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f7ff bfd3 	b.w	8008810 <_raise_r>
 800886a:	bf00      	nop
 800886c:	2000006c 	.word	0x2000006c

08008870 <_kill_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	; (8008890 <_kill_r+0x20>)
 8008874:	2300      	movs	r3, #0
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f7fa f8c1 	bl	8002a04 <_kill>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d102      	bne.n	800888c <_kill_r+0x1c>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b103      	cbz	r3, 800888c <_kill_r+0x1c>
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	200008d4 	.word	0x200008d4

08008894 <_getpid_r>:
 8008894:	f7fa b8ae 	b.w	80029f4 <_getpid>

08008898 <__swhatbuf_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	b096      	sub	sp, #88	; 0x58
 80088a4:	4615      	mov	r5, r2
 80088a6:	461e      	mov	r6, r3
 80088a8:	da0d      	bge.n	80088c6 <__swhatbuf_r+0x2e>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088b0:	f04f 0100 	mov.w	r1, #0
 80088b4:	bf0c      	ite	eq
 80088b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088ba:	2340      	movne	r3, #64	; 0x40
 80088bc:	2000      	movs	r0, #0
 80088be:	6031      	str	r1, [r6, #0]
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	b016      	add	sp, #88	; 0x58
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	466a      	mov	r2, sp
 80088c8:	f000 f848 	bl	800895c <_fstat_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	dbec      	blt.n	80088aa <__swhatbuf_r+0x12>
 80088d0:	9901      	ldr	r1, [sp, #4]
 80088d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088da:	4259      	negs	r1, r3
 80088dc:	4159      	adcs	r1, r3
 80088de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e2:	e7eb      	b.n	80088bc <__swhatbuf_r+0x24>

080088e4 <__smakebuf_r>:
 80088e4:	898b      	ldrh	r3, [r1, #12]
 80088e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088e8:	079d      	lsls	r5, r3, #30
 80088ea:	4606      	mov	r6, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	d507      	bpl.n	8008900 <__smakebuf_r+0x1c>
 80088f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	2301      	movs	r3, #1
 80088fa:	6163      	str	r3, [r4, #20]
 80088fc:	b002      	add	sp, #8
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	ab01      	add	r3, sp, #4
 8008902:	466a      	mov	r2, sp
 8008904:	f7ff ffc8 	bl	8008898 <__swhatbuf_r>
 8008908:	9900      	ldr	r1, [sp, #0]
 800890a:	4605      	mov	r5, r0
 800890c:	4630      	mov	r0, r6
 800890e:	f7fe febd 	bl	800768c <_malloc_r>
 8008912:	b948      	cbnz	r0, 8008928 <__smakebuf_r+0x44>
 8008914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008918:	059a      	lsls	r2, r3, #22
 800891a:	d4ef      	bmi.n	80088fc <__smakebuf_r+0x18>
 800891c:	f023 0303 	bic.w	r3, r3, #3
 8008920:	f043 0302 	orr.w	r3, r3, #2
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	e7e3      	b.n	80088f0 <__smakebuf_r+0xc>
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	6020      	str	r0, [r4, #0]
 800892c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008930:	81a3      	strh	r3, [r4, #12]
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	6163      	str	r3, [r4, #20]
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	6120      	str	r0, [r4, #16]
 800893a:	b15b      	cbz	r3, 8008954 <__smakebuf_r+0x70>
 800893c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f81d 	bl	8008980 <_isatty_r>
 8008946:	b128      	cbz	r0, 8008954 <__smakebuf_r+0x70>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	431d      	orrs	r5, r3
 8008958:	81a5      	strh	r5, [r4, #12]
 800895a:	e7cf      	b.n	80088fc <__smakebuf_r+0x18>

0800895c <_fstat_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	; (800897c <_fstat_r+0x20>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f7fa f8aa 	bl	8002ac2 <_fstat>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d102      	bne.n	8008978 <_fstat_r+0x1c>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	b103      	cbz	r3, 8008978 <_fstat_r+0x1c>
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop
 800897c:	200008d4 	.word	0x200008d4

08008980 <_isatty_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d06      	ldr	r5, [pc, #24]	; (800899c <_isatty_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7fa f8a9 	bl	8002ae2 <_isatty>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_isatty_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_isatty_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	200008d4 	.word	0x200008d4

080089a0 <pow>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	ed2d 8b02 	vpush	{d8}
 80089a6:	eeb0 8a40 	vmov.f32	s16, s0
 80089aa:	eef0 8a60 	vmov.f32	s17, s1
 80089ae:	ec55 4b11 	vmov	r4, r5, d1
 80089b2:	f000 f871 	bl	8008a98 <__ieee754_pow>
 80089b6:	4622      	mov	r2, r4
 80089b8:	462b      	mov	r3, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	ec57 6b10 	vmov	r6, r7, d0
 80089c2:	f7f8 f8b3 	bl	8000b2c <__aeabi_dcmpun>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d13b      	bne.n	8008a42 <pow+0xa2>
 80089ca:	ec51 0b18 	vmov	r0, r1, d8
 80089ce:	2200      	movs	r2, #0
 80089d0:	2300      	movs	r3, #0
 80089d2:	f7f8 f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80089d6:	b1b8      	cbz	r0, 8008a08 <pow+0x68>
 80089d8:	2200      	movs	r2, #0
 80089da:	2300      	movs	r3, #0
 80089dc:	4620      	mov	r0, r4
 80089de:	4629      	mov	r1, r5
 80089e0:	f7f8 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d146      	bne.n	8008a76 <pow+0xd6>
 80089e8:	ec45 4b10 	vmov	d0, r4, r5
 80089ec:	f000 f848 	bl	8008a80 <finite>
 80089f0:	b338      	cbz	r0, 8008a42 <pow+0xa2>
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	4620      	mov	r0, r4
 80089f8:	4629      	mov	r1, r5
 80089fa:	f7f8 f86f 	bl	8000adc <__aeabi_dcmplt>
 80089fe:	b300      	cbz	r0, 8008a42 <pow+0xa2>
 8008a00:	f7fd ff28 	bl	8006854 <__errno>
 8008a04:	2322      	movs	r3, #34	; 0x22
 8008a06:	e01b      	b.n	8008a40 <pow+0xa0>
 8008a08:	ec47 6b10 	vmov	d0, r6, r7
 8008a0c:	f000 f838 	bl	8008a80 <finite>
 8008a10:	b9e0      	cbnz	r0, 8008a4c <pow+0xac>
 8008a12:	eeb0 0a48 	vmov.f32	s0, s16
 8008a16:	eef0 0a68 	vmov.f32	s1, s17
 8008a1a:	f000 f831 	bl	8008a80 <finite>
 8008a1e:	b1a8      	cbz	r0, 8008a4c <pow+0xac>
 8008a20:	ec45 4b10 	vmov	d0, r4, r5
 8008a24:	f000 f82c 	bl	8008a80 <finite>
 8008a28:	b180      	cbz	r0, 8008a4c <pow+0xac>
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	f7f8 f87b 	bl	8000b2c <__aeabi_dcmpun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d0e2      	beq.n	8008a00 <pow+0x60>
 8008a3a:	f7fd ff0b 	bl	8006854 <__errno>
 8008a3e:	2321      	movs	r3, #33	; 0x21
 8008a40:	6003      	str	r3, [r0, #0]
 8008a42:	ecbd 8b02 	vpop	{d8}
 8008a46:	ec47 6b10 	vmov	d0, r6, r7
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4630      	mov	r0, r6
 8008a52:	4639      	mov	r1, r7
 8008a54:	f7f8 f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d0f2      	beq.n	8008a42 <pow+0xa2>
 8008a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a60:	eef0 0a68 	vmov.f32	s1, s17
 8008a64:	f000 f80c 	bl	8008a80 <finite>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d0ea      	beq.n	8008a42 <pow+0xa2>
 8008a6c:	ec45 4b10 	vmov	d0, r4, r5
 8008a70:	f000 f806 	bl	8008a80 <finite>
 8008a74:	e7c3      	b.n	80089fe <pow+0x5e>
 8008a76:	4f01      	ldr	r7, [pc, #4]	; (8008a7c <pow+0xdc>)
 8008a78:	2600      	movs	r6, #0
 8008a7a:	e7e2      	b.n	8008a42 <pow+0xa2>
 8008a7c:	3ff00000 	.word	0x3ff00000

08008a80 <finite>:
 8008a80:	b082      	sub	sp, #8
 8008a82:	ed8d 0b00 	vstr	d0, [sp]
 8008a86:	9801      	ldr	r0, [sp, #4]
 8008a88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008a8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008a90:	0fc0      	lsrs	r0, r0, #31
 8008a92:	b002      	add	sp, #8
 8008a94:	4770      	bx	lr
	...

08008a98 <__ieee754_pow>:
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	ed2d 8b06 	vpush	{d8-d10}
 8008aa0:	b089      	sub	sp, #36	; 0x24
 8008aa2:	ed8d 1b00 	vstr	d1, [sp]
 8008aa6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008aaa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008aae:	ea58 0102 	orrs.w	r1, r8, r2
 8008ab2:	ec57 6b10 	vmov	r6, r7, d0
 8008ab6:	d115      	bne.n	8008ae4 <__ieee754_pow+0x4c>
 8008ab8:	19b3      	adds	r3, r6, r6
 8008aba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008abe:	4152      	adcs	r2, r2
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	4b89      	ldr	r3, [pc, #548]	; (8008ce8 <__ieee754_pow+0x250>)
 8008ac4:	4193      	sbcs	r3, r2
 8008ac6:	f080 84d1 	bcs.w	800946c <__ieee754_pow+0x9d4>
 8008aca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 fbdb 	bl	800028c <__adddf3>
 8008ad6:	ec41 0b10 	vmov	d0, r0, r1
 8008ada:	b009      	add	sp, #36	; 0x24
 8008adc:	ecbd 8b06 	vpop	{d8-d10}
 8008ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae4:	4b81      	ldr	r3, [pc, #516]	; (8008cec <__ieee754_pow+0x254>)
 8008ae6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008aea:	429c      	cmp	r4, r3
 8008aec:	ee10 aa10 	vmov	sl, s0
 8008af0:	463d      	mov	r5, r7
 8008af2:	dc06      	bgt.n	8008b02 <__ieee754_pow+0x6a>
 8008af4:	d101      	bne.n	8008afa <__ieee754_pow+0x62>
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	d1e7      	bne.n	8008aca <__ieee754_pow+0x32>
 8008afa:	4598      	cmp	r8, r3
 8008afc:	dc01      	bgt.n	8008b02 <__ieee754_pow+0x6a>
 8008afe:	d10f      	bne.n	8008b20 <__ieee754_pow+0x88>
 8008b00:	b172      	cbz	r2, 8008b20 <__ieee754_pow+0x88>
 8008b02:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008b06:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008b0a:	ea55 050a 	orrs.w	r5, r5, sl
 8008b0e:	d1dc      	bne.n	8008aca <__ieee754_pow+0x32>
 8008b10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b14:	18db      	adds	r3, r3, r3
 8008b16:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008b1a:	4152      	adcs	r2, r2
 8008b1c:	429d      	cmp	r5, r3
 8008b1e:	e7d0      	b.n	8008ac2 <__ieee754_pow+0x2a>
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	da3b      	bge.n	8008b9c <__ieee754_pow+0x104>
 8008b24:	4b72      	ldr	r3, [pc, #456]	; (8008cf0 <__ieee754_pow+0x258>)
 8008b26:	4598      	cmp	r8, r3
 8008b28:	dc51      	bgt.n	8008bce <__ieee754_pow+0x136>
 8008b2a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008b2e:	4598      	cmp	r8, r3
 8008b30:	f340 84ab 	ble.w	800948a <__ieee754_pow+0x9f2>
 8008b34:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b3c:	2b14      	cmp	r3, #20
 8008b3e:	dd0f      	ble.n	8008b60 <__ieee754_pow+0xc8>
 8008b40:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b44:	fa22 f103 	lsr.w	r1, r2, r3
 8008b48:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f040 849c 	bne.w	800948a <__ieee754_pow+0x9f2>
 8008b52:	f001 0101 	and.w	r1, r1, #1
 8008b56:	f1c1 0302 	rsb	r3, r1, #2
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	b182      	cbz	r2, 8008b80 <__ieee754_pow+0xe8>
 8008b5e:	e05f      	b.n	8008c20 <__ieee754_pow+0x188>
 8008b60:	2a00      	cmp	r2, #0
 8008b62:	d15b      	bne.n	8008c1c <__ieee754_pow+0x184>
 8008b64:	f1c3 0314 	rsb	r3, r3, #20
 8008b68:	fa48 f103 	asr.w	r1, r8, r3
 8008b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b70:	4543      	cmp	r3, r8
 8008b72:	f040 8487 	bne.w	8009484 <__ieee754_pow+0x9ec>
 8008b76:	f001 0101 	and.w	r1, r1, #1
 8008b7a:	f1c1 0302 	rsb	r3, r1, #2
 8008b7e:	9304      	str	r3, [sp, #16]
 8008b80:	4b5c      	ldr	r3, [pc, #368]	; (8008cf4 <__ieee754_pow+0x25c>)
 8008b82:	4598      	cmp	r8, r3
 8008b84:	d132      	bne.n	8008bec <__ieee754_pow+0x154>
 8008b86:	f1b9 0f00 	cmp.w	r9, #0
 8008b8a:	f280 8477 	bge.w	800947c <__ieee754_pow+0x9e4>
 8008b8e:	4959      	ldr	r1, [pc, #356]	; (8008cf4 <__ieee754_pow+0x25c>)
 8008b90:	4632      	mov	r2, r6
 8008b92:	463b      	mov	r3, r7
 8008b94:	2000      	movs	r0, #0
 8008b96:	f7f7 fe59 	bl	800084c <__aeabi_ddiv>
 8008b9a:	e79c      	b.n	8008ad6 <__ieee754_pow+0x3e>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	d13d      	bne.n	8008c20 <__ieee754_pow+0x188>
 8008ba4:	4b51      	ldr	r3, [pc, #324]	; (8008cec <__ieee754_pow+0x254>)
 8008ba6:	4598      	cmp	r8, r3
 8008ba8:	d1ea      	bne.n	8008b80 <__ieee754_pow+0xe8>
 8008baa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008bae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8008bb6:	f000 8459 	beq.w	800946c <__ieee754_pow+0x9d4>
 8008bba:	4b4f      	ldr	r3, [pc, #316]	; (8008cf8 <__ieee754_pow+0x260>)
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	dd08      	ble.n	8008bd2 <__ieee754_pow+0x13a>
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	f2c0 8456 	blt.w	8009474 <__ieee754_pow+0x9dc>
 8008bc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bcc:	e783      	b.n	8008ad6 <__ieee754_pow+0x3e>
 8008bce:	2302      	movs	r3, #2
 8008bd0:	e7e5      	b.n	8008b9e <__ieee754_pow+0x106>
 8008bd2:	f1b9 0f00 	cmp.w	r9, #0
 8008bd6:	f04f 0000 	mov.w	r0, #0
 8008bda:	f04f 0100 	mov.w	r1, #0
 8008bde:	f6bf af7a 	bge.w	8008ad6 <__ieee754_pow+0x3e>
 8008be2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008be6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008bea:	e774      	b.n	8008ad6 <__ieee754_pow+0x3e>
 8008bec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008bf0:	d106      	bne.n	8008c00 <__ieee754_pow+0x168>
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fcfd 	bl	80005f8 <__aeabi_dmul>
 8008bfe:	e76a      	b.n	8008ad6 <__ieee754_pow+0x3e>
 8008c00:	4b3e      	ldr	r3, [pc, #248]	; (8008cfc <__ieee754_pow+0x264>)
 8008c02:	4599      	cmp	r9, r3
 8008c04:	d10c      	bne.n	8008c20 <__ieee754_pow+0x188>
 8008c06:	2d00      	cmp	r5, #0
 8008c08:	db0a      	blt.n	8008c20 <__ieee754_pow+0x188>
 8008c0a:	ec47 6b10 	vmov	d0, r6, r7
 8008c0e:	b009      	add	sp, #36	; 0x24
 8008c10:	ecbd 8b06 	vpop	{d8-d10}
 8008c14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	f000 bd20 	b.w	800965c <__ieee754_sqrt>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	ec47 6b10 	vmov	d0, r6, r7
 8008c24:	f000 fc62 	bl	80094ec <fabs>
 8008c28:	ec51 0b10 	vmov	r0, r1, d0
 8008c2c:	f1ba 0f00 	cmp.w	sl, #0
 8008c30:	d129      	bne.n	8008c86 <__ieee754_pow+0x1ee>
 8008c32:	b124      	cbz	r4, 8008c3e <__ieee754_pow+0x1a6>
 8008c34:	4b2f      	ldr	r3, [pc, #188]	; (8008cf4 <__ieee754_pow+0x25c>)
 8008c36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d123      	bne.n	8008c86 <__ieee754_pow+0x1ee>
 8008c3e:	f1b9 0f00 	cmp.w	r9, #0
 8008c42:	da05      	bge.n	8008c50 <__ieee754_pow+0x1b8>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	2000      	movs	r0, #0
 8008c4a:	492a      	ldr	r1, [pc, #168]	; (8008cf4 <__ieee754_pow+0x25c>)
 8008c4c:	f7f7 fdfe 	bl	800084c <__aeabi_ddiv>
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	f6bf af40 	bge.w	8008ad6 <__ieee754_pow+0x3e>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008c5c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008c60:	431c      	orrs	r4, r3
 8008c62:	d108      	bne.n	8008c76 <__ieee754_pow+0x1de>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4610      	mov	r0, r2
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	f7f7 fb0c 	bl	8000288 <__aeabi_dsub>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	e78f      	b.n	8008b96 <__ieee754_pow+0xfe>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	f47f af2c 	bne.w	8008ad6 <__ieee754_pow+0x3e>
 8008c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c82:	4619      	mov	r1, r3
 8008c84:	e727      	b.n	8008ad6 <__ieee754_pow+0x3e>
 8008c86:	0feb      	lsrs	r3, r5, #31
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	9a06      	ldr	r2, [sp, #24]
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d102      	bne.n	8008c9a <__ieee754_pow+0x202>
 8008c94:	4632      	mov	r2, r6
 8008c96:	463b      	mov	r3, r7
 8008c98:	e7e6      	b.n	8008c68 <__ieee754_pow+0x1d0>
 8008c9a:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <__ieee754_pow+0x268>)
 8008c9c:	4598      	cmp	r8, r3
 8008c9e:	f340 80fb 	ble.w	8008e98 <__ieee754_pow+0x400>
 8008ca2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008ca6:	4598      	cmp	r8, r3
 8008ca8:	4b13      	ldr	r3, [pc, #76]	; (8008cf8 <__ieee754_pow+0x260>)
 8008caa:	dd0c      	ble.n	8008cc6 <__ieee754_pow+0x22e>
 8008cac:	429c      	cmp	r4, r3
 8008cae:	dc0f      	bgt.n	8008cd0 <__ieee754_pow+0x238>
 8008cb0:	f1b9 0f00 	cmp.w	r9, #0
 8008cb4:	da0f      	bge.n	8008cd6 <__ieee754_pow+0x23e>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	b009      	add	sp, #36	; 0x24
 8008cba:	ecbd 8b06 	vpop	{d8-d10}
 8008cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc2:	f000 bcc2 	b.w	800964a <__math_oflow>
 8008cc6:	429c      	cmp	r4, r3
 8008cc8:	dbf2      	blt.n	8008cb0 <__ieee754_pow+0x218>
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <__ieee754_pow+0x25c>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	dd19      	ble.n	8008d04 <__ieee754_pow+0x26c>
 8008cd0:	f1b9 0f00 	cmp.w	r9, #0
 8008cd4:	dcef      	bgt.n	8008cb6 <__ieee754_pow+0x21e>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	b009      	add	sp, #36	; 0x24
 8008cda:	ecbd 8b06 	vpop	{d8-d10}
 8008cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce2:	f000 bca9 	b.w	8009638 <__math_uflow>
 8008ce6:	bf00      	nop
 8008ce8:	fff00000 	.word	0xfff00000
 8008cec:	7ff00000 	.word	0x7ff00000
 8008cf0:	433fffff 	.word	0x433fffff
 8008cf4:	3ff00000 	.word	0x3ff00000
 8008cf8:	3fefffff 	.word	0x3fefffff
 8008cfc:	3fe00000 	.word	0x3fe00000
 8008d00:	41e00000 	.word	0x41e00000
 8008d04:	4b60      	ldr	r3, [pc, #384]	; (8008e88 <__ieee754_pow+0x3f0>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	f7f7 fabe 	bl	8000288 <__aeabi_dsub>
 8008d0c:	a354      	add	r3, pc, #336	; (adr r3, 8008e60 <__ieee754_pow+0x3c8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	4604      	mov	r4, r0
 8008d14:	460d      	mov	r5, r1
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	a353      	add	r3, pc, #332	; (adr r3, 8008e68 <__ieee754_pow+0x3d0>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	4620      	mov	r0, r4
 8008d26:	4629      	mov	r1, r5
 8008d28:	f7f7 fc66 	bl	80005f8 <__aeabi_dmul>
 8008d2c:	4b57      	ldr	r3, [pc, #348]	; (8008e8c <__ieee754_pow+0x3f4>)
 8008d2e:	4682      	mov	sl, r0
 8008d30:	468b      	mov	fp, r1
 8008d32:	2200      	movs	r2, #0
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fc5e 	bl	80005f8 <__aeabi_dmul>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	a14b      	add	r1, pc, #300	; (adr r1, 8008e70 <__ieee754_pow+0x3d8>)
 8008d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	2000      	movs	r0, #0
 8008d58:	494d      	ldr	r1, [pc, #308]	; (8008e90 <__ieee754_pow+0x3f8>)
 8008d5a:	f7f7 fa95 	bl	8000288 <__aeabi_dsub>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4680      	mov	r8, r0
 8008d62:	4689      	mov	r9, r1
 8008d64:	462b      	mov	r3, r5
 8008d66:	4620      	mov	r0, r4
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fc45 	bl	80005f8 <__aeabi_dmul>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	a33f      	add	r3, pc, #252	; (adr r3, 8008e78 <__ieee754_pow+0x3e0>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fc3a 	bl	80005f8 <__aeabi_dmul>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4650      	mov	r0, sl
 8008d8a:	4659      	mov	r1, fp
 8008d8c:	f7f7 fa7c 	bl	8000288 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4680      	mov	r8, r0
 8008d96:	4689      	mov	r9, r1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fa76 	bl	800028c <__adddf3>
 8008da0:	2000      	movs	r0, #0
 8008da2:	4632      	mov	r2, r6
 8008da4:	463b      	mov	r3, r7
 8008da6:	4604      	mov	r4, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	f7f7 fa6d 	bl	8000288 <__aeabi_dsub>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fa67 	bl	8000288 <__aeabi_dsub>
 8008dba:	9b04      	ldr	r3, [sp, #16]
 8008dbc:	9a06      	ldr	r2, [sp, #24]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	f040 81e7 	bne.w	8009198 <__ieee754_pow+0x700>
 8008dca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008e80 <__ieee754_pow+0x3e8>
 8008dce:	eeb0 8a47 	vmov.f32	s16, s14
 8008dd2:	eef0 8a67 	vmov.f32	s17, s15
 8008dd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008dda:	2600      	movs	r6, #0
 8008ddc:	4632      	mov	r2, r6
 8008dde:	463b      	mov	r3, r7
 8008de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008de4:	f7f7 fa50 	bl	8000288 <__aeabi_dsub>
 8008de8:	4622      	mov	r2, r4
 8008dea:	462b      	mov	r3, r5
 8008dec:	f7f7 fc04 	bl	80005f8 <__aeabi_dmul>
 8008df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	4602      	mov	r2, r0
 8008e02:	460b      	mov	r3, r1
 8008e04:	4640      	mov	r0, r8
 8008e06:	4649      	mov	r1, r9
 8008e08:	f7f7 fa40 	bl	800028c <__adddf3>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4604      	mov	r4, r0
 8008e20:	460d      	mov	r5, r1
 8008e22:	4602      	mov	r2, r0
 8008e24:	4649      	mov	r1, r9
 8008e26:	4640      	mov	r0, r8
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <__ieee754_pow+0x3fc>)
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	ec45 4b19 	vmov	d9, r4, r5
 8008e34:	4606      	mov	r6, r0
 8008e36:	460f      	mov	r7, r1
 8008e38:	468b      	mov	fp, r1
 8008e3a:	f340 82f0 	ble.w	800941e <__ieee754_pow+0x986>
 8008e3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008e46:	4303      	orrs	r3, r0
 8008e48:	f000 81e4 	beq.w	8009214 <__ieee754_pow+0x77c>
 8008e4c:	ec51 0b18 	vmov	r0, r1, d8
 8008e50:	2200      	movs	r2, #0
 8008e52:	2300      	movs	r3, #0
 8008e54:	f7f7 fe42 	bl	8000adc <__aeabi_dcmplt>
 8008e58:	3800      	subs	r0, #0
 8008e5a:	bf18      	it	ne
 8008e5c:	2001      	movne	r0, #1
 8008e5e:	e72b      	b.n	8008cb8 <__ieee754_pow+0x220>
 8008e60:	60000000 	.word	0x60000000
 8008e64:	3ff71547 	.word	0x3ff71547
 8008e68:	f85ddf44 	.word	0xf85ddf44
 8008e6c:	3e54ae0b 	.word	0x3e54ae0b
 8008e70:	55555555 	.word	0x55555555
 8008e74:	3fd55555 	.word	0x3fd55555
 8008e78:	652b82fe 	.word	0x652b82fe
 8008e7c:	3ff71547 	.word	0x3ff71547
 8008e80:	00000000 	.word	0x00000000
 8008e84:	bff00000 	.word	0xbff00000
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	3fd00000 	.word	0x3fd00000
 8008e90:	3fe00000 	.word	0x3fe00000
 8008e94:	408fffff 	.word	0x408fffff
 8008e98:	4bd5      	ldr	r3, [pc, #852]	; (80091f0 <__ieee754_pow+0x758>)
 8008e9a:	402b      	ands	r3, r5
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	b92b      	cbnz	r3, 8008eac <__ieee754_pow+0x414>
 8008ea0:	4bd4      	ldr	r3, [pc, #848]	; (80091f4 <__ieee754_pow+0x75c>)
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008eaa:	460c      	mov	r4, r1
 8008eac:	1523      	asrs	r3, r4, #20
 8008eae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008eb2:	4413      	add	r3, r2
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	4bd0      	ldr	r3, [pc, #832]	; (80091f8 <__ieee754_pow+0x760>)
 8008eb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008ebc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008ec0:	429c      	cmp	r4, r3
 8008ec2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008ec6:	dd08      	ble.n	8008eda <__ieee754_pow+0x442>
 8008ec8:	4bcc      	ldr	r3, [pc, #816]	; (80091fc <__ieee754_pow+0x764>)
 8008eca:	429c      	cmp	r4, r3
 8008ecc:	f340 8162 	ble.w	8009194 <__ieee754_pow+0x6fc>
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	9305      	str	r3, [sp, #20]
 8008ed6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008eda:	2400      	movs	r4, #0
 8008edc:	00e3      	lsls	r3, r4, #3
 8008ede:	9307      	str	r3, [sp, #28]
 8008ee0:	4bc7      	ldr	r3, [pc, #796]	; (8009200 <__ieee754_pow+0x768>)
 8008ee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ee6:	ed93 7b00 	vldr	d7, [r3]
 8008eea:	4629      	mov	r1, r5
 8008eec:	ec53 2b17 	vmov	r2, r3, d7
 8008ef0:	eeb0 9a47 	vmov.f32	s18, s14
 8008ef4:	eef0 9a67 	vmov.f32	s19, s15
 8008ef8:	4682      	mov	sl, r0
 8008efa:	f7f7 f9c5 	bl	8000288 <__aeabi_dsub>
 8008efe:	4652      	mov	r2, sl
 8008f00:	4606      	mov	r6, r0
 8008f02:	460f      	mov	r7, r1
 8008f04:	462b      	mov	r3, r5
 8008f06:	ec51 0b19 	vmov	r0, r1, d9
 8008f0a:	f7f7 f9bf 	bl	800028c <__adddf3>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	2000      	movs	r0, #0
 8008f14:	49bb      	ldr	r1, [pc, #748]	; (8009204 <__ieee754_pow+0x76c>)
 8008f16:	f7f7 fc99 	bl	800084c <__aeabi_ddiv>
 8008f1a:	ec41 0b1a 	vmov	d10, r0, r1
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f30:	9302      	str	r3, [sp, #8]
 8008f32:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f36:	46ab      	mov	fp, r5
 8008f38:	106d      	asrs	r5, r5, #1
 8008f3a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008f3e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008f42:	ec41 0b18 	vmov	d8, r0, r1
 8008f46:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4649      	mov	r1, r9
 8008f50:	4614      	mov	r4, r2
 8008f52:	461d      	mov	r5, r3
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 f992 	bl	8000288 <__aeabi_dsub>
 8008f64:	ec53 2b19 	vmov	r2, r3, d9
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 f98a 	bl	8000288 <__aeabi_dsub>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4650      	mov	r0, sl
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	f7f7 f984 	bl	8000288 <__aeabi_dsub>
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	f7f7 fb38 	bl	80005f8 <__aeabi_dmul>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 f97a 	bl	8000288 <__aeabi_dsub>
 8008f94:	ec53 2b1a 	vmov	r2, r3, d10
 8008f98:	f7f7 fb2e 	bl	80005f8 <__aeabi_dmul>
 8008f9c:	ec53 2b18 	vmov	r2, r3, d8
 8008fa0:	ec41 0b19 	vmov	d9, r0, r1
 8008fa4:	ec51 0b18 	vmov	r0, r1, d8
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	a37c      	add	r3, pc, #496	; (adr r3, 80091a0 <__ieee754_pow+0x708>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	f7f7 fb1f 	bl	80005f8 <__aeabi_dmul>
 8008fba:	a37b      	add	r3, pc, #492	; (adr r3, 80091a8 <__ieee754_pow+0x710>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 f964 	bl	800028c <__adddf3>
 8008fc4:	4622      	mov	r2, r4
 8008fc6:	462b      	mov	r3, r5
 8008fc8:	f7f7 fb16 	bl	80005f8 <__aeabi_dmul>
 8008fcc:	a378      	add	r3, pc, #480	; (adr r3, 80091b0 <__ieee754_pow+0x718>)
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	f7f7 f95b 	bl	800028c <__adddf3>
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	462b      	mov	r3, r5
 8008fda:	f7f7 fb0d 	bl	80005f8 <__aeabi_dmul>
 8008fde:	a376      	add	r3, pc, #472	; (adr r3, 80091b8 <__ieee754_pow+0x720>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 f952 	bl	800028c <__adddf3>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	462b      	mov	r3, r5
 8008fec:	f7f7 fb04 	bl	80005f8 <__aeabi_dmul>
 8008ff0:	a373      	add	r3, pc, #460	; (adr r3, 80091c0 <__ieee754_pow+0x728>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f949 	bl	800028c <__adddf3>
 8008ffa:	4622      	mov	r2, r4
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	f7f7 fafb 	bl	80005f8 <__aeabi_dmul>
 8009002:	a371      	add	r3, pc, #452	; (adr r3, 80091c8 <__ieee754_pow+0x730>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 f940 	bl	800028c <__adddf3>
 800900c:	4622      	mov	r2, r4
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	462b      	mov	r3, r5
 8009014:	4620      	mov	r0, r4
 8009016:	4629      	mov	r1, r5
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 fae8 	bl	80005f8 <__aeabi_dmul>
 8009028:	4642      	mov	r2, r8
 800902a:	4604      	mov	r4, r0
 800902c:	460d      	mov	r5, r1
 800902e:	464b      	mov	r3, r9
 8009030:	ec51 0b18 	vmov	r0, r1, d8
 8009034:	f7f7 f92a 	bl	800028c <__adddf3>
 8009038:	ec53 2b19 	vmov	r2, r3, d9
 800903c:	f7f7 fadc 	bl	80005f8 <__aeabi_dmul>
 8009040:	4622      	mov	r2, r4
 8009042:	462b      	mov	r3, r5
 8009044:	f7f7 f922 	bl	800028c <__adddf3>
 8009048:	4642      	mov	r2, r8
 800904a:	4682      	mov	sl, r0
 800904c:	468b      	mov	fp, r1
 800904e:	464b      	mov	r3, r9
 8009050:	4640      	mov	r0, r8
 8009052:	4649      	mov	r1, r9
 8009054:	f7f7 fad0 	bl	80005f8 <__aeabi_dmul>
 8009058:	4b6b      	ldr	r3, [pc, #428]	; (8009208 <__ieee754_pow+0x770>)
 800905a:	2200      	movs	r2, #0
 800905c:	4606      	mov	r6, r0
 800905e:	460f      	mov	r7, r1
 8009060:	f7f7 f914 	bl	800028c <__adddf3>
 8009064:	4652      	mov	r2, sl
 8009066:	465b      	mov	r3, fp
 8009068:	f7f7 f910 	bl	800028c <__adddf3>
 800906c:	2000      	movs	r0, #0
 800906e:	4604      	mov	r4, r0
 8009070:	460d      	mov	r5, r1
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4640      	mov	r0, r8
 8009078:	4649      	mov	r1, r9
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4b62      	ldr	r3, [pc, #392]	; (8009208 <__ieee754_pow+0x770>)
 8009080:	4680      	mov	r8, r0
 8009082:	4689      	mov	r9, r1
 8009084:	2200      	movs	r2, #0
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 f8fd 	bl	8000288 <__aeabi_dsub>
 800908e:	4632      	mov	r2, r6
 8009090:	463b      	mov	r3, r7
 8009092:	f7f7 f8f9 	bl	8000288 <__aeabi_dsub>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 f8f3 	bl	8000288 <__aeabi_dsub>
 80090a2:	ec53 2b18 	vmov	r2, r3, d8
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	4622      	mov	r2, r4
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	462b      	mov	r3, r5
 80090b2:	ec51 0b19 	vmov	r0, r1, d9
 80090b6:	f7f7 fa9f 	bl	80005f8 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4630      	mov	r0, r6
 80090c0:	4639      	mov	r1, r7
 80090c2:	f7f7 f8e3 	bl	800028c <__adddf3>
 80090c6:	4606      	mov	r6, r0
 80090c8:	460f      	mov	r7, r1
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4640      	mov	r0, r8
 80090d0:	4649      	mov	r1, r9
 80090d2:	f7f7 f8db 	bl	800028c <__adddf3>
 80090d6:	a33e      	add	r3, pc, #248	; (adr r3, 80091d0 <__ieee754_pow+0x738>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	2000      	movs	r0, #0
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	4642      	mov	r2, r8
 80090e8:	ec41 0b18 	vmov	d8, r0, r1
 80090ec:	464b      	mov	r3, r9
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 f8c9 	bl	8000288 <__aeabi_dsub>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	4630      	mov	r0, r6
 80090fc:	4639      	mov	r1, r7
 80090fe:	f7f7 f8c3 	bl	8000288 <__aeabi_dsub>
 8009102:	a335      	add	r3, pc, #212	; (adr r3, 80091d8 <__ieee754_pow+0x740>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fa76 	bl	80005f8 <__aeabi_dmul>
 800910c:	a334      	add	r3, pc, #208	; (adr r3, 80091e0 <__ieee754_pow+0x748>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	4606      	mov	r6, r0
 8009114:	460f      	mov	r7, r1
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fa6d 	bl	80005f8 <__aeabi_dmul>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 f8b1 	bl	800028c <__adddf3>
 800912a:	9a07      	ldr	r2, [sp, #28]
 800912c:	4b37      	ldr	r3, [pc, #220]	; (800920c <__ieee754_pow+0x774>)
 800912e:	4413      	add	r3, r2
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 f8aa 	bl	800028c <__adddf3>
 8009138:	4682      	mov	sl, r0
 800913a:	9805      	ldr	r0, [sp, #20]
 800913c:	468b      	mov	fp, r1
 800913e:	f7f7 f9f1 	bl	8000524 <__aeabi_i2d>
 8009142:	9a07      	ldr	r2, [sp, #28]
 8009144:	4b32      	ldr	r3, [pc, #200]	; (8009210 <__ieee754_pow+0x778>)
 8009146:	4413      	add	r3, r2
 8009148:	e9d3 8900 	ldrd	r8, r9, [r3]
 800914c:	4606      	mov	r6, r0
 800914e:	460f      	mov	r7, r1
 8009150:	4652      	mov	r2, sl
 8009152:	465b      	mov	r3, fp
 8009154:	ec51 0b18 	vmov	r0, r1, d8
 8009158:	f7f7 f898 	bl	800028c <__adddf3>
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	f7f7 f894 	bl	800028c <__adddf3>
 8009164:	4632      	mov	r2, r6
 8009166:	463b      	mov	r3, r7
 8009168:	f7f7 f890 	bl	800028c <__adddf3>
 800916c:	2000      	movs	r0, #0
 800916e:	4632      	mov	r2, r6
 8009170:	463b      	mov	r3, r7
 8009172:	4604      	mov	r4, r0
 8009174:	460d      	mov	r5, r1
 8009176:	f7f7 f887 	bl	8000288 <__aeabi_dsub>
 800917a:	4642      	mov	r2, r8
 800917c:	464b      	mov	r3, r9
 800917e:	f7f7 f883 	bl	8000288 <__aeabi_dsub>
 8009182:	ec53 2b18 	vmov	r2, r3, d8
 8009186:	f7f7 f87f 	bl	8000288 <__aeabi_dsub>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4650      	mov	r0, sl
 8009190:	4659      	mov	r1, fp
 8009192:	e610      	b.n	8008db6 <__ieee754_pow+0x31e>
 8009194:	2401      	movs	r4, #1
 8009196:	e6a1      	b.n	8008edc <__ieee754_pow+0x444>
 8009198:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80091e8 <__ieee754_pow+0x750>
 800919c:	e617      	b.n	8008dce <__ieee754_pow+0x336>
 800919e:	bf00      	nop
 80091a0:	4a454eef 	.word	0x4a454eef
 80091a4:	3fca7e28 	.word	0x3fca7e28
 80091a8:	93c9db65 	.word	0x93c9db65
 80091ac:	3fcd864a 	.word	0x3fcd864a
 80091b0:	a91d4101 	.word	0xa91d4101
 80091b4:	3fd17460 	.word	0x3fd17460
 80091b8:	518f264d 	.word	0x518f264d
 80091bc:	3fd55555 	.word	0x3fd55555
 80091c0:	db6fabff 	.word	0xdb6fabff
 80091c4:	3fdb6db6 	.word	0x3fdb6db6
 80091c8:	33333303 	.word	0x33333303
 80091cc:	3fe33333 	.word	0x3fe33333
 80091d0:	e0000000 	.word	0xe0000000
 80091d4:	3feec709 	.word	0x3feec709
 80091d8:	dc3a03fd 	.word	0xdc3a03fd
 80091dc:	3feec709 	.word	0x3feec709
 80091e0:	145b01f5 	.word	0x145b01f5
 80091e4:	be3e2fe0 	.word	0xbe3e2fe0
 80091e8:	00000000 	.word	0x00000000
 80091ec:	3ff00000 	.word	0x3ff00000
 80091f0:	7ff00000 	.word	0x7ff00000
 80091f4:	43400000 	.word	0x43400000
 80091f8:	0003988e 	.word	0x0003988e
 80091fc:	000bb679 	.word	0x000bb679
 8009200:	0800a978 	.word	0x0800a978
 8009204:	3ff00000 	.word	0x3ff00000
 8009208:	40080000 	.word	0x40080000
 800920c:	0800a998 	.word	0x0800a998
 8009210:	0800a988 	.word	0x0800a988
 8009214:	a3b3      	add	r3, pc, #716	; (adr r3, 80094e4 <__ieee754_pow+0xa4c>)
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 f835 	bl	800028c <__adddf3>
 8009222:	4622      	mov	r2, r4
 8009224:	ec41 0b1a 	vmov	d10, r0, r1
 8009228:	462b      	mov	r3, r5
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 f82b 	bl	8000288 <__aeabi_dsub>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	ec51 0b1a 	vmov	r0, r1, d10
 800923a:	f7f7 fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 800923e:	2800      	cmp	r0, #0
 8009240:	f47f ae04 	bne.w	8008e4c <__ieee754_pow+0x3b4>
 8009244:	4aa2      	ldr	r2, [pc, #648]	; (80094d0 <__ieee754_pow+0xa38>)
 8009246:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800924a:	4293      	cmp	r3, r2
 800924c:	f340 8107 	ble.w	800945e <__ieee754_pow+0x9c6>
 8009250:	151b      	asrs	r3, r3, #20
 8009252:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009256:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800925a:	fa4a fa03 	asr.w	sl, sl, r3
 800925e:	44da      	add	sl, fp
 8009260:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009264:	489b      	ldr	r0, [pc, #620]	; (80094d4 <__ieee754_pow+0xa3c>)
 8009266:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800926a:	4108      	asrs	r0, r1
 800926c:	ea00 030a 	and.w	r3, r0, sl
 8009270:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009274:	f1c1 0114 	rsb	r1, r1, #20
 8009278:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800927c:	fa4a fa01 	asr.w	sl, sl, r1
 8009280:	f1bb 0f00 	cmp.w	fp, #0
 8009284:	f04f 0200 	mov.w	r2, #0
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	bfb8      	it	lt
 800928e:	f1ca 0a00 	rsblt	sl, sl, #0
 8009292:	f7f6 fff9 	bl	8000288 <__aeabi_dsub>
 8009296:	ec41 0b19 	vmov	d9, r0, r1
 800929a:	4642      	mov	r2, r8
 800929c:	464b      	mov	r3, r9
 800929e:	ec51 0b19 	vmov	r0, r1, d9
 80092a2:	f7f6 fff3 	bl	800028c <__adddf3>
 80092a6:	a37a      	add	r3, pc, #488	; (adr r3, 8009490 <__ieee754_pow+0x9f8>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	2000      	movs	r0, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	460d      	mov	r5, r1
 80092b2:	f7f7 f9a1 	bl	80005f8 <__aeabi_dmul>
 80092b6:	ec53 2b19 	vmov	r2, r3, d9
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f6 ffe1 	bl	8000288 <__aeabi_dsub>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4640      	mov	r0, r8
 80092cc:	4649      	mov	r1, r9
 80092ce:	f7f6 ffdb 	bl	8000288 <__aeabi_dsub>
 80092d2:	a371      	add	r3, pc, #452	; (adr r3, 8009498 <__ieee754_pow+0xa00>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	a370      	add	r3, pc, #448	; (adr r3, 80094a0 <__ieee754_pow+0xa08>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	4680      	mov	r8, r0
 80092e4:	4689      	mov	r9, r1
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4640      	mov	r0, r8
 80092f4:	4649      	mov	r1, r9
 80092f6:	f7f6 ffc9 	bl	800028c <__adddf3>
 80092fa:	4604      	mov	r4, r0
 80092fc:	460d      	mov	r5, r1
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4630      	mov	r0, r6
 8009304:	4639      	mov	r1, r7
 8009306:	f7f6 ffc1 	bl	800028c <__adddf3>
 800930a:	4632      	mov	r2, r6
 800930c:	463b      	mov	r3, r7
 800930e:	4680      	mov	r8, r0
 8009310:	4689      	mov	r9, r1
 8009312:	f7f6 ffb9 	bl	8000288 <__aeabi_dsub>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4620      	mov	r0, r4
 800931c:	4629      	mov	r1, r5
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	4642      	mov	r2, r8
 8009324:	4606      	mov	r6, r0
 8009326:	460f      	mov	r7, r1
 8009328:	464b      	mov	r3, r9
 800932a:	4640      	mov	r0, r8
 800932c:	4649      	mov	r1, r9
 800932e:	f7f7 f963 	bl	80005f8 <__aeabi_dmul>
 8009332:	a35d      	add	r3, pc, #372	; (adr r3, 80094a8 <__ieee754_pow+0xa10>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	4604      	mov	r4, r0
 800933a:	460d      	mov	r5, r1
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	a35b      	add	r3, pc, #364	; (adr r3, 80094b0 <__ieee754_pow+0xa18>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	f7f6 ff9f 	bl	8000288 <__aeabi_dsub>
 800934a:	4622      	mov	r2, r4
 800934c:	462b      	mov	r3, r5
 800934e:	f7f7 f953 	bl	80005f8 <__aeabi_dmul>
 8009352:	a359      	add	r3, pc, #356	; (adr r3, 80094b8 <__ieee754_pow+0xa20>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ff98 	bl	800028c <__adddf3>
 800935c:	4622      	mov	r2, r4
 800935e:	462b      	mov	r3, r5
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	a356      	add	r3, pc, #344	; (adr r3, 80094c0 <__ieee754_pow+0xa28>)
 8009366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936a:	f7f6 ff8d 	bl	8000288 <__aeabi_dsub>
 800936e:	4622      	mov	r2, r4
 8009370:	462b      	mov	r3, r5
 8009372:	f7f7 f941 	bl	80005f8 <__aeabi_dmul>
 8009376:	a354      	add	r3, pc, #336	; (adr r3, 80094c8 <__ieee754_pow+0xa30>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f7f6 ff86 	bl	800028c <__adddf3>
 8009380:	4622      	mov	r2, r4
 8009382:	462b      	mov	r3, r5
 8009384:	f7f7 f938 	bl	80005f8 <__aeabi_dmul>
 8009388:	4602      	mov	r2, r0
 800938a:	460b      	mov	r3, r1
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f6 ff7a 	bl	8000288 <__aeabi_dsub>
 8009394:	4604      	mov	r4, r0
 8009396:	460d      	mov	r5, r1
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 f92a 	bl	80005f8 <__aeabi_dmul>
 80093a4:	2200      	movs	r2, #0
 80093a6:	ec41 0b19 	vmov	d9, r0, r1
 80093aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80093ae:	4620      	mov	r0, r4
 80093b0:	4629      	mov	r1, r5
 80093b2:	f7f6 ff69 	bl	8000288 <__aeabi_dsub>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	ec51 0b19 	vmov	r0, r1, d9
 80093be:	f7f7 fa45 	bl	800084c <__aeabi_ddiv>
 80093c2:	4632      	mov	r2, r6
 80093c4:	4604      	mov	r4, r0
 80093c6:	460d      	mov	r5, r1
 80093c8:	463b      	mov	r3, r7
 80093ca:	4640      	mov	r0, r8
 80093cc:	4649      	mov	r1, r9
 80093ce:	f7f7 f913 	bl	80005f8 <__aeabi_dmul>
 80093d2:	4632      	mov	r2, r6
 80093d4:	463b      	mov	r3, r7
 80093d6:	f7f6 ff59 	bl	800028c <__adddf3>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f6 ff51 	bl	8000288 <__aeabi_dsub>
 80093e6:	4642      	mov	r2, r8
 80093e8:	464b      	mov	r3, r9
 80093ea:	f7f6 ff4d 	bl	8000288 <__aeabi_dsub>
 80093ee:	460b      	mov	r3, r1
 80093f0:	4602      	mov	r2, r0
 80093f2:	4939      	ldr	r1, [pc, #228]	; (80094d8 <__ieee754_pow+0xa40>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	ec41 0b10 	vmov	d0, r0, r1
 80093fe:	ee10 3a90 	vmov	r3, s1
 8009402:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800940a:	da2b      	bge.n	8009464 <__ieee754_pow+0x9cc>
 800940c:	4650      	mov	r0, sl
 800940e:	f000 f877 	bl	8009500 <scalbn>
 8009412:	ec51 0b10 	vmov	r0, r1, d0
 8009416:	ec53 2b18 	vmov	r2, r3, d8
 800941a:	f7ff bbee 	b.w	8008bfa <__ieee754_pow+0x162>
 800941e:	4b2f      	ldr	r3, [pc, #188]	; (80094dc <__ieee754_pow+0xa44>)
 8009420:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009424:	429e      	cmp	r6, r3
 8009426:	f77f af0d 	ble.w	8009244 <__ieee754_pow+0x7ac>
 800942a:	4b2d      	ldr	r3, [pc, #180]	; (80094e0 <__ieee754_pow+0xa48>)
 800942c:	440b      	add	r3, r1
 800942e:	4303      	orrs	r3, r0
 8009430:	d009      	beq.n	8009446 <__ieee754_pow+0x9ae>
 8009432:	ec51 0b18 	vmov	r0, r1, d8
 8009436:	2200      	movs	r2, #0
 8009438:	2300      	movs	r3, #0
 800943a:	f7f7 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800943e:	3800      	subs	r0, #0
 8009440:	bf18      	it	ne
 8009442:	2001      	movne	r0, #1
 8009444:	e448      	b.n	8008cd8 <__ieee754_pow+0x240>
 8009446:	4622      	mov	r2, r4
 8009448:	462b      	mov	r3, r5
 800944a:	f7f6 ff1d 	bl	8000288 <__aeabi_dsub>
 800944e:	4642      	mov	r2, r8
 8009450:	464b      	mov	r3, r9
 8009452:	f7f7 fb57 	bl	8000b04 <__aeabi_dcmpge>
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f aef4 	beq.w	8009244 <__ieee754_pow+0x7ac>
 800945c:	e7e9      	b.n	8009432 <__ieee754_pow+0x99a>
 800945e:	f04f 0a00 	mov.w	sl, #0
 8009462:	e71a      	b.n	800929a <__ieee754_pow+0x802>
 8009464:	ec51 0b10 	vmov	r0, r1, d0
 8009468:	4619      	mov	r1, r3
 800946a:	e7d4      	b.n	8009416 <__ieee754_pow+0x97e>
 800946c:	491a      	ldr	r1, [pc, #104]	; (80094d8 <__ieee754_pow+0xa40>)
 800946e:	2000      	movs	r0, #0
 8009470:	f7ff bb31 	b.w	8008ad6 <__ieee754_pow+0x3e>
 8009474:	2000      	movs	r0, #0
 8009476:	2100      	movs	r1, #0
 8009478:	f7ff bb2d 	b.w	8008ad6 <__ieee754_pow+0x3e>
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7ff bb29 	b.w	8008ad6 <__ieee754_pow+0x3e>
 8009484:	9204      	str	r2, [sp, #16]
 8009486:	f7ff bb7b 	b.w	8008b80 <__ieee754_pow+0xe8>
 800948a:	2300      	movs	r3, #0
 800948c:	f7ff bb65 	b.w	8008b5a <__ieee754_pow+0xc2>
 8009490:	00000000 	.word	0x00000000
 8009494:	3fe62e43 	.word	0x3fe62e43
 8009498:	fefa39ef 	.word	0xfefa39ef
 800949c:	3fe62e42 	.word	0x3fe62e42
 80094a0:	0ca86c39 	.word	0x0ca86c39
 80094a4:	be205c61 	.word	0xbe205c61
 80094a8:	72bea4d0 	.word	0x72bea4d0
 80094ac:	3e663769 	.word	0x3e663769
 80094b0:	c5d26bf1 	.word	0xc5d26bf1
 80094b4:	3ebbbd41 	.word	0x3ebbbd41
 80094b8:	af25de2c 	.word	0xaf25de2c
 80094bc:	3f11566a 	.word	0x3f11566a
 80094c0:	16bebd93 	.word	0x16bebd93
 80094c4:	3f66c16c 	.word	0x3f66c16c
 80094c8:	5555553e 	.word	0x5555553e
 80094cc:	3fc55555 	.word	0x3fc55555
 80094d0:	3fe00000 	.word	0x3fe00000
 80094d4:	fff00000 	.word	0xfff00000
 80094d8:	3ff00000 	.word	0x3ff00000
 80094dc:	4090cbff 	.word	0x4090cbff
 80094e0:	3f6f3400 	.word	0x3f6f3400
 80094e4:	652b82fe 	.word	0x652b82fe
 80094e8:	3c971547 	.word	0x3c971547

080094ec <fabs>:
 80094ec:	ec51 0b10 	vmov	r0, r1, d0
 80094f0:	ee10 2a10 	vmov	r2, s0
 80094f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094f8:	ec43 2b10 	vmov	d0, r2, r3
 80094fc:	4770      	bx	lr
	...

08009500 <scalbn>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	ec55 4b10 	vmov	r4, r5, d0
 8009506:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800950a:	4606      	mov	r6, r0
 800950c:	462b      	mov	r3, r5
 800950e:	b999      	cbnz	r1, 8009538 <scalbn+0x38>
 8009510:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009514:	4323      	orrs	r3, r4
 8009516:	d03f      	beq.n	8009598 <scalbn+0x98>
 8009518:	4b35      	ldr	r3, [pc, #212]	; (80095f0 <scalbn+0xf0>)
 800951a:	4629      	mov	r1, r5
 800951c:	ee10 0a10 	vmov	r0, s0
 8009520:	2200      	movs	r2, #0
 8009522:	f7f7 f869 	bl	80005f8 <__aeabi_dmul>
 8009526:	4b33      	ldr	r3, [pc, #204]	; (80095f4 <scalbn+0xf4>)
 8009528:	429e      	cmp	r6, r3
 800952a:	4604      	mov	r4, r0
 800952c:	460d      	mov	r5, r1
 800952e:	da10      	bge.n	8009552 <scalbn+0x52>
 8009530:	a327      	add	r3, pc, #156	; (adr r3, 80095d0 <scalbn+0xd0>)
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	e01f      	b.n	8009578 <scalbn+0x78>
 8009538:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800953c:	4291      	cmp	r1, r2
 800953e:	d10c      	bne.n	800955a <scalbn+0x5a>
 8009540:	ee10 2a10 	vmov	r2, s0
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f6 fea0 	bl	800028c <__adddf3>
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	e022      	b.n	8009598 <scalbn+0x98>
 8009552:	460b      	mov	r3, r1
 8009554:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009558:	3936      	subs	r1, #54	; 0x36
 800955a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800955e:	4296      	cmp	r6, r2
 8009560:	dd0d      	ble.n	800957e <scalbn+0x7e>
 8009562:	2d00      	cmp	r5, #0
 8009564:	a11c      	add	r1, pc, #112	; (adr r1, 80095d8 <scalbn+0xd8>)
 8009566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956a:	da02      	bge.n	8009572 <scalbn+0x72>
 800956c:	a11c      	add	r1, pc, #112	; (adr r1, 80095e0 <scalbn+0xe0>)
 800956e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009572:	a319      	add	r3, pc, #100	; (adr r3, 80095d8 <scalbn+0xd8>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	e7e6      	b.n	800954c <scalbn+0x4c>
 800957e:	1872      	adds	r2, r6, r1
 8009580:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009584:	428a      	cmp	r2, r1
 8009586:	dcec      	bgt.n	8009562 <scalbn+0x62>
 8009588:	2a00      	cmp	r2, #0
 800958a:	dd08      	ble.n	800959e <scalbn+0x9e>
 800958c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009590:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009598:	ec45 4b10 	vmov	d0, r4, r5
 800959c:	bd70      	pop	{r4, r5, r6, pc}
 800959e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80095a2:	da08      	bge.n	80095b6 <scalbn+0xb6>
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	a10a      	add	r1, pc, #40	; (adr r1, 80095d0 <scalbn+0xd0>)
 80095a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ac:	dac0      	bge.n	8009530 <scalbn+0x30>
 80095ae:	a10e      	add	r1, pc, #56	; (adr r1, 80095e8 <scalbn+0xe8>)
 80095b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b4:	e7bc      	b.n	8009530 <scalbn+0x30>
 80095b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095ba:	3236      	adds	r2, #54	; 0x36
 80095bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80095c4:	4620      	mov	r0, r4
 80095c6:	4b0c      	ldr	r3, [pc, #48]	; (80095f8 <scalbn+0xf8>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	e7d5      	b.n	8009578 <scalbn+0x78>
 80095cc:	f3af 8000 	nop.w
 80095d0:	c2f8f359 	.word	0xc2f8f359
 80095d4:	01a56e1f 	.word	0x01a56e1f
 80095d8:	8800759c 	.word	0x8800759c
 80095dc:	7e37e43c 	.word	0x7e37e43c
 80095e0:	8800759c 	.word	0x8800759c
 80095e4:	fe37e43c 	.word	0xfe37e43c
 80095e8:	c2f8f359 	.word	0xc2f8f359
 80095ec:	81a56e1f 	.word	0x81a56e1f
 80095f0:	43500000 	.word	0x43500000
 80095f4:	ffff3cb0 	.word	0xffff3cb0
 80095f8:	3c900000 	.word	0x3c900000

080095fc <with_errno>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	4604      	mov	r4, r0
 8009600:	460d      	mov	r5, r1
 8009602:	4616      	mov	r6, r2
 8009604:	f7fd f926 	bl	8006854 <__errno>
 8009608:	4629      	mov	r1, r5
 800960a:	6006      	str	r6, [r0, #0]
 800960c:	4620      	mov	r0, r4
 800960e:	bd70      	pop	{r4, r5, r6, pc}

08009610 <xflow>:
 8009610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009612:	4614      	mov	r4, r2
 8009614:	461d      	mov	r5, r3
 8009616:	b108      	cbz	r0, 800961c <xflow+0xc>
 8009618:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800961c:	e9cd 2300 	strd	r2, r3, [sp]
 8009620:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009624:	4620      	mov	r0, r4
 8009626:	4629      	mov	r1, r5
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	2222      	movs	r2, #34	; 0x22
 800962e:	b003      	add	sp, #12
 8009630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009634:	f7ff bfe2 	b.w	80095fc <with_errno>

08009638 <__math_uflow>:
 8009638:	b508      	push	{r3, lr}
 800963a:	2200      	movs	r2, #0
 800963c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009640:	f7ff ffe6 	bl	8009610 <xflow>
 8009644:	ec41 0b10 	vmov	d0, r0, r1
 8009648:	bd08      	pop	{r3, pc}

0800964a <__math_oflow>:
 800964a:	b508      	push	{r3, lr}
 800964c:	2200      	movs	r2, #0
 800964e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009652:	f7ff ffdd 	bl	8009610 <xflow>
 8009656:	ec41 0b10 	vmov	d0, r0, r1
 800965a:	bd08      	pop	{r3, pc}

0800965c <__ieee754_sqrt>:
 800965c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	ec55 4b10 	vmov	r4, r5, d0
 8009664:	4e67      	ldr	r6, [pc, #412]	; (8009804 <__ieee754_sqrt+0x1a8>)
 8009666:	43ae      	bics	r6, r5
 8009668:	ee10 0a10 	vmov	r0, s0
 800966c:	ee10 2a10 	vmov	r2, s0
 8009670:	4629      	mov	r1, r5
 8009672:	462b      	mov	r3, r5
 8009674:	d10d      	bne.n	8009692 <__ieee754_sqrt+0x36>
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	4602      	mov	r2, r0
 800967c:	460b      	mov	r3, r1
 800967e:	4620      	mov	r0, r4
 8009680:	4629      	mov	r1, r5
 8009682:	f7f6 fe03 	bl	800028c <__adddf3>
 8009686:	4604      	mov	r4, r0
 8009688:	460d      	mov	r5, r1
 800968a:	ec45 4b10 	vmov	d0, r4, r5
 800968e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	2d00      	cmp	r5, #0
 8009694:	dc0b      	bgt.n	80096ae <__ieee754_sqrt+0x52>
 8009696:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800969a:	4326      	orrs	r6, r4
 800969c:	d0f5      	beq.n	800968a <__ieee754_sqrt+0x2e>
 800969e:	b135      	cbz	r5, 80096ae <__ieee754_sqrt+0x52>
 80096a0:	f7f6 fdf2 	bl	8000288 <__aeabi_dsub>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	f7f7 f8d0 	bl	800084c <__aeabi_ddiv>
 80096ac:	e7eb      	b.n	8009686 <__ieee754_sqrt+0x2a>
 80096ae:	1509      	asrs	r1, r1, #20
 80096b0:	f000 808d 	beq.w	80097ce <__ieee754_sqrt+0x172>
 80096b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80096bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c0:	07c9      	lsls	r1, r1, #31
 80096c2:	bf5c      	itt	pl
 80096c4:	005b      	lslpl	r3, r3, #1
 80096c6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80096ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096ce:	bf58      	it	pl
 80096d0:	0052      	lslpl	r2, r2, #1
 80096d2:	2500      	movs	r5, #0
 80096d4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80096d8:	1076      	asrs	r6, r6, #1
 80096da:	0052      	lsls	r2, r2, #1
 80096dc:	f04f 0e16 	mov.w	lr, #22
 80096e0:	46ac      	mov	ip, r5
 80096e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096e6:	eb0c 0001 	add.w	r0, ip, r1
 80096ea:	4298      	cmp	r0, r3
 80096ec:	bfde      	ittt	le
 80096ee:	1a1b      	suble	r3, r3, r0
 80096f0:	eb00 0c01 	addle.w	ip, r0, r1
 80096f4:	186d      	addle	r5, r5, r1
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	f1be 0e01 	subs.w	lr, lr, #1
 80096fc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009700:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009704:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009708:	d1ed      	bne.n	80096e6 <__ieee754_sqrt+0x8a>
 800970a:	4674      	mov	r4, lr
 800970c:	2720      	movs	r7, #32
 800970e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009712:	4563      	cmp	r3, ip
 8009714:	eb01 000e 	add.w	r0, r1, lr
 8009718:	dc02      	bgt.n	8009720 <__ieee754_sqrt+0xc4>
 800971a:	d113      	bne.n	8009744 <__ieee754_sqrt+0xe8>
 800971c:	4290      	cmp	r0, r2
 800971e:	d811      	bhi.n	8009744 <__ieee754_sqrt+0xe8>
 8009720:	2800      	cmp	r0, #0
 8009722:	eb00 0e01 	add.w	lr, r0, r1
 8009726:	da57      	bge.n	80097d8 <__ieee754_sqrt+0x17c>
 8009728:	f1be 0f00 	cmp.w	lr, #0
 800972c:	db54      	blt.n	80097d8 <__ieee754_sqrt+0x17c>
 800972e:	f10c 0801 	add.w	r8, ip, #1
 8009732:	eba3 030c 	sub.w	r3, r3, ip
 8009736:	4290      	cmp	r0, r2
 8009738:	bf88      	it	hi
 800973a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800973e:	1a12      	subs	r2, r2, r0
 8009740:	440c      	add	r4, r1
 8009742:	46c4      	mov	ip, r8
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	3f01      	subs	r7, #1
 8009748:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800974c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009750:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009754:	d1dd      	bne.n	8009712 <__ieee754_sqrt+0xb6>
 8009756:	4313      	orrs	r3, r2
 8009758:	d01b      	beq.n	8009792 <__ieee754_sqrt+0x136>
 800975a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009808 <__ieee754_sqrt+0x1ac>
 800975e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800980c <__ieee754_sqrt+0x1b0>
 8009762:	e9da 0100 	ldrd	r0, r1, [sl]
 8009766:	e9db 2300 	ldrd	r2, r3, [fp]
 800976a:	f7f6 fd8d 	bl	8000288 <__aeabi_dsub>
 800976e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f7 f9b9 	bl	8000af0 <__aeabi_dcmple>
 800977e:	b140      	cbz	r0, 8009792 <__ieee754_sqrt+0x136>
 8009780:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009784:	e9da 0100 	ldrd	r0, r1, [sl]
 8009788:	e9db 2300 	ldrd	r2, r3, [fp]
 800978c:	d126      	bne.n	80097dc <__ieee754_sqrt+0x180>
 800978e:	3501      	adds	r5, #1
 8009790:	463c      	mov	r4, r7
 8009792:	106a      	asrs	r2, r5, #1
 8009794:	0863      	lsrs	r3, r4, #1
 8009796:	07e9      	lsls	r1, r5, #31
 8009798:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800979c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80097a0:	bf48      	it	mi
 80097a2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80097a6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80097aa:	461c      	mov	r4, r3
 80097ac:	e76d      	b.n	800968a <__ieee754_sqrt+0x2e>
 80097ae:	0ad3      	lsrs	r3, r2, #11
 80097b0:	3815      	subs	r0, #21
 80097b2:	0552      	lsls	r2, r2, #21
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0fa      	beq.n	80097ae <__ieee754_sqrt+0x152>
 80097b8:	02dc      	lsls	r4, r3, #11
 80097ba:	d50a      	bpl.n	80097d2 <__ieee754_sqrt+0x176>
 80097bc:	f1c1 0420 	rsb	r4, r1, #32
 80097c0:	fa22 f404 	lsr.w	r4, r2, r4
 80097c4:	1e4d      	subs	r5, r1, #1
 80097c6:	408a      	lsls	r2, r1
 80097c8:	4323      	orrs	r3, r4
 80097ca:	1b41      	subs	r1, r0, r5
 80097cc:	e772      	b.n	80096b4 <__ieee754_sqrt+0x58>
 80097ce:	4608      	mov	r0, r1
 80097d0:	e7f0      	b.n	80097b4 <__ieee754_sqrt+0x158>
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	3101      	adds	r1, #1
 80097d6:	e7ef      	b.n	80097b8 <__ieee754_sqrt+0x15c>
 80097d8:	46e0      	mov	r8, ip
 80097da:	e7aa      	b.n	8009732 <__ieee754_sqrt+0xd6>
 80097dc:	f7f6 fd56 	bl	800028c <__adddf3>
 80097e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4640      	mov	r0, r8
 80097ea:	4649      	mov	r1, r9
 80097ec:	f7f7 f976 	bl	8000adc <__aeabi_dcmplt>
 80097f0:	b120      	cbz	r0, 80097fc <__ieee754_sqrt+0x1a0>
 80097f2:	1ca0      	adds	r0, r4, #2
 80097f4:	bf08      	it	eq
 80097f6:	3501      	addeq	r5, #1
 80097f8:	3402      	adds	r4, #2
 80097fa:	e7ca      	b.n	8009792 <__ieee754_sqrt+0x136>
 80097fc:	3401      	adds	r4, #1
 80097fe:	f024 0401 	bic.w	r4, r4, #1
 8009802:	e7c6      	b.n	8009792 <__ieee754_sqrt+0x136>
 8009804:	7ff00000 	.word	0x7ff00000
 8009808:	200001e0 	.word	0x200001e0
 800980c:	200001e8 	.word	0x200001e8

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
